
AmpLedMod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000159c  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000159c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000331  0080012c  0080012c  0000165c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7e  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063e  00000000  00000000  0000275e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000690  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  0000342c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00003804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e2d  00000000  00000000  00003c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004a66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e9       	ldi	r30, 0x9C	; 156
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 32       	cpi	r26, 0x2C	; 44
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	ac e2       	ldi	r26, 0x2C	; 44
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 35       	cpi	r26, 0x5D	; 93
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
      9e:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
static uint8_t ringBufferReadPos = 0;
static uint8_t ringBufferWritePos = 0;
static uint8_t ringBufferTmp = 0;

ISR(USART_RX_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	5f 93       	push	r21
      b6:	6f 93       	push	r22
      b8:	7f 93       	push	r23
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
	ringBufferTmp = (ringBufferWritePos+1)%RING_BUFFER_SIZE;
      c6:	20 91 2d 01 	lds	r18, 0x012D
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	c9 01       	movw	r24, r18
      ce:	01 96       	adiw	r24, 0x01	; 1
      d0:	64 e8       	ldi	r22, 0x84	; 132
      d2:	72 e0       	ldi	r23, 0x02	; 2
      d4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodhi4>
      d8:	80 93 2c 01 	sts	0x012C, r24
	if(ringBufferTmp != ringBufferReadPos)
      dc:	90 91 2e 01 	lds	r25, 0x012E
      e0:	98 17       	cp	r25, r24
      e2:	41 f0       	breq	.+16     	; 0xf4 <__vector_18+0x4e>
	{
		ringBuffer[ringBufferWritePos] = UDR0;
      e4:	90 91 c6 00 	lds	r25, 0x00C6
      e8:	f9 01       	movw	r30, r18
      ea:	e1 5d       	subi	r30, 0xD1	; 209
      ec:	fe 4f       	sbci	r31, 0xFE	; 254
      ee:	90 83       	st	Z, r25
		ringBufferWritePos = ringBufferTmp;
      f0:	80 93 2d 01 	sts	0x012D, r24
	}
}
      f4:	ff 91       	pop	r31
      f6:	ef 91       	pop	r30
      f8:	bf 91       	pop	r27
      fa:	af 91       	pop	r26
      fc:	9f 91       	pop	r25
      fe:	8f 91       	pop	r24
     100:	7f 91       	pop	r23
     102:	6f 91       	pop	r22
     104:	5f 91       	pop	r21
     106:	3f 91       	pop	r19
     108:	2f 91       	pop	r18
     10a:	0f 90       	pop	r0
     10c:	0f be       	out	0x3f, r0	; 63
     10e:	0f 90       	pop	r0
     110:	1f 90       	pop	r1
     112:	18 95       	reti

00000114 <ringBufGetFrame>:

int8_t ringBufGetFrame(uint8_t *frame)
{
	int len = (int)ringBufferWritePos - ringBufferReadPos;
     114:	40 91 2e 01 	lds	r20, 0x012E
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	20 91 2d 01 	lds	r18, 0x012D
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	24 1b       	sub	r18, r20
     122:	35 0b       	sbc	r19, r21
	if(len < 0)
     124:	12 f4       	brpl	.+4      	; 0x12a <ringBufGetFrame+0x16>
		len += RING_BUFFER_SIZE;
     126:	2c 57       	subi	r18, 0x7C	; 124
     128:	3d 4f       	sbci	r19, 0xFD	; 253
	if(len >= 6 &&
     12a:	26 30       	cpi	r18, 0x06	; 6
     12c:	31 05       	cpc	r19, r1
     12e:	4c f1       	brlt	.+82     	; 0x182 <ringBufGetFrame+0x6e>
		RING_BUF_AT(ringBufferReadPos+1) == 0 &&
     130:	fa 01       	movw	r30, r20
     132:	e1 5d       	subi	r30, 0xD1	; 209
     134:	fe 4f       	sbci	r31, 0xFE	; 254
int8_t ringBufGetFrame(uint8_t *frame)
{
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0)
		len += RING_BUFFER_SIZE;
	if(len >= 6 &&
     136:	21 81       	ldd	r18, Z+1	; 0x01
     138:	21 11       	cpse	r18, r1
     13a:	25 c0       	rjmp	.+74     	; 0x186 <ringBufGetFrame+0x72>
		RING_BUF_AT(ringBufferReadPos+1) == 0 &&
		RING_BUF_AT(ringBufferReadPos+3) == 0 &&
     13c:	fa 01       	movw	r30, r20
     13e:	e1 5d       	subi	r30, 0xD1	; 209
     140:	fe 4f       	sbci	r31, 0xFE	; 254
{
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0)
		len += RING_BUFFER_SIZE;
	if(len >= 6 &&
		RING_BUF_AT(ringBufferReadPos+1) == 0 &&
     142:	23 81       	ldd	r18, Z+3	; 0x03
     144:	21 11       	cpse	r18, r1
     146:	21 c0       	rjmp	.+66     	; 0x18a <ringBufGetFrame+0x76>
		RING_BUF_AT(ringBufferReadPos+3) == 0 &&
		RING_BUF_AT(ringBufferReadPos+5) == 0)
     148:	fa 01       	movw	r30, r20
     14a:	e1 5d       	subi	r30, 0xD1	; 209
     14c:	fe 4f       	sbci	r31, 0xFE	; 254
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0)
		len += RING_BUFFER_SIZE;
	if(len >= 6 &&
		RING_BUF_AT(ringBufferReadPos+1) == 0 &&
		RING_BUF_AT(ringBufferReadPos+3) == 0 &&
     14e:	25 81       	ldd	r18, Z+5	; 0x05
     150:	21 11       	cpse	r18, r1
     152:	1d c0       	rjmp	.+58     	; 0x18e <ringBufGetFrame+0x7a>
		RING_BUF_AT(ringBufferReadPos+5) == 0)
	{
		frame[0] = RING_BUF_AT(ringBufferReadPos+0);
     154:	fa 01       	movw	r30, r20
     156:	e1 5d       	subi	r30, 0xD1	; 209
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	20 81       	ld	r18, Z
     15c:	dc 01       	movw	r26, r24
     15e:	2c 93       	st	X, r18
		frame[1] = RING_BUF_AT(ringBufferReadPos+2);
     160:	22 81       	ldd	r18, Z+2	; 0x02
     162:	11 96       	adiw	r26, 0x01	; 1
     164:	2c 93       	st	X, r18
     166:	11 97       	sbiw	r26, 0x01	; 1
		frame[2] = RING_BUF_AT(ringBufferReadPos+4);
     168:	24 81       	ldd	r18, Z+4	; 0x04
     16a:	12 96       	adiw	r26, 0x02	; 2
     16c:	2c 93       	st	X, r18
		ringBufferReadPos = (ringBufferReadPos+6) % RING_BUFFER_SIZE;
     16e:	ca 01       	movw	r24, r20
     170:	06 96       	adiw	r24, 0x06	; 6
     172:	64 e8       	ldi	r22, 0x84	; 132
     174:	72 e0       	ldi	r23, 0x02	; 2
     176:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodhi4>
     17a:	80 93 2e 01 	sts	0x012E, r24
		return 1;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	08 95       	ret
	}
	else
		return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	08 95       	ret
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	08 95       	ret
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 95       	ret
     18e:	80 e0       	ldi	r24, 0x00	; 0
}
     190:	08 95       	ret

00000192 <bluetoothInit>:

void bluetoothInit(unsigned int baudrate)
{
	/* Set baudrate. */
	unsigned int ubrr = (F_CPU / 16 / baudrate - 1);
     192:	9c 01       	movw	r18, r24
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	60 e2       	ldi	r22, 0x20	; 32
     19a:	71 ea       	ldi	r23, 0xA1	; 161
     19c:	87 e0       	ldi	r24, 0x07	; 7
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__divmodsi4>
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
     1a8:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)(ubrr);
     1ac:	20 93 c4 00 	sts	0x00C4, r18
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); /* Enable USART RX, TX, interrupt for RX. */
     1b0:	88 e9       	ldi	r24, 0x98	; 152
     1b2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); /* Set USART 8bit size data. */
     1b6:	86 e0       	ldi	r24, 0x06	; 6
     1b8:	80 93 c2 00 	sts	0x00C2, r24
	
	sei();
     1bc:	78 94       	sei
     1be:	08 95       	ret

000001c0 <main>:
static color_t leds[NUM_LEDS];	/**< Array of colors for each physical rgb led. */

// ------------------------------------------------------------------- DEFINITIONS

int main(void)
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <main+0x6>
     1c6:	1f 92       	push	r1
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t frame[3]; /**< Buffer for frame received from controller. */
	
	/* Debug pin indicating that whether module is running. */
	DDRC |= (1<<PC5);
     1cc:	3d 9a       	sbi	0x07, 5	; 7
	PORTC |= (1<<PC5);
     1ce:	45 9a       	sbi	0x08, 5	; 8
     1d0:	e3 eb       	ldi	r30, 0xB3	; 179
     1d2:	f3 e0       	ldi	r31, 0x03	; 3
     1d4:	8f e4       	ldi	r24, 0x4F	; 79
     1d6:	94 e0       	ldi	r25, 0x04	; 4
	
	/* Reset leds colors. */
	for(int i = 0; i < NUM_LEDS; i++)
		leds[i].val = 0;
     1d8:	11 92       	st	Z+, r1
     1da:	11 92       	st	Z+, r1
     1dc:	11 92       	st	Z+, r1
     1de:	11 92       	st	Z+, r1
	/* Debug pin indicating that whether module is running. */
	DDRC |= (1<<PC5);
	PORTC |= (1<<PC5);
	
	/* Reset leds colors. */
	for(int i = 0; i < NUM_LEDS; i++)
     1e0:	e8 17       	cp	r30, r24
     1e2:	f9 07       	cpc	r31, r25
     1e4:	c9 f7       	brne	.-14     	; 0x1d8 <main+0x18>
		leds[i].val = 0;
	
	/* Init USART for bluetooth driver with 38400 baudrate. */
	bluetoothInit(38400);
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	96 e9       	ldi	r25, 0x96	; 150
     1ea:	0e 94 c9 00 	call	0x192	; 0x192 <bluetoothInit>
	
	/* Init ws2812b driver. */
	wsInit();
     1ee:	0e 94 19 08 	call	0x1032	; 0x1032 <wsInit>
	
	/* Seq leds animation. */
	seqSetFunction(eSeqStaticColor);
     1f2:	84 e0       	ldi	r24, 0x04	; 4
     1f4:	0e 94 f9 07 	call	0xff2	; 0xff2 <seqSetFunction>
	
	while (1)
	{
		/* Send colors to ws2812b leds. */
		wsSend(leds, NUM_LEDS);
     1f8:	67 e2       	ldi	r22, 0x27	; 39
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	83 eb       	ldi	r24, 0xB3	; 179
     1fe:	93 e0       	ldi	r25, 0x03	; 3
     200:	0e 94 1b 08 	call	0x1036	; 0x1036 <wsSend>
		
		/* Update color array (animate). */
		seqUpdate(leds, NUM_LEDS);
     204:	67 e2       	ldi	r22, 0x27	; 39
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	83 eb       	ldi	r24, 0xB3	; 179
     20a:	93 e0       	ldi	r25, 0x03	; 3
     20c:	0e 94 fc 07 	call	0xff8	; 0xff8 <seqUpdate>
		
		if(ringBufGetFrame(frame)) {
     210:	ce 01       	movw	r24, r28
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	0e 94 8a 00 	call	0x114	; 0x114 <ringBufGetFrame>
     218:	88 23       	and	r24, r24
     21a:	31 f0       	breq	.+12     	; 0x228 <main+0x68>
			/* New frame received. */
			seqSetColorRGB(0, frame[0], frame[1], frame[2]);
     21c:	2b 81       	ldd	r18, Y+3	; 0x03
     21e:	4a 81       	ldd	r20, Y+2	; 0x02
     220:	69 81       	ldd	r22, Y+1	; 0x01
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 08 08 	call	0x1010	; 0x1010 <seqSetColorRGB>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     228:	8f e1       	ldi	r24, 0x1F	; 31
     22a:	9e e4       	ldi	r25, 0x4E	; 78
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x6c>
     230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x72>
     232:	00 00       	nop
     234:	e1 cf       	rjmp	.-62     	; 0x1f8 <main+0x38>

00000236 <seqPingPongFunc>:
}

// ------------------------------------------------------------ STATIC DEFINITIONS

static void seqPingPongFunc(color_t *leds, int num_leds)
{
     236:	2f 92       	push	r2
     238:	3f 92       	push	r3
     23a:	4f 92       	push	r4
     23c:	5f 92       	push	r5
     23e:	6f 92       	push	r6
     240:	7f 92       	push	r7
     242:	8f 92       	push	r8
     244:	9f 92       	push	r9
     246:	af 92       	push	r10
     248:	bf 92       	push	r11
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	63 97       	sbiw	r28, 0x13	; 19
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	fc 01       	movw	r30, r24
     26c:	7f 87       	std	Y+15, r23	; 0x0f
     26e:	6e 87       	std	Y+14, r22	; 0x0e
	static uint8_t color_i = 0;
	static int8_t led_dir = 0;
	static uint8_t seq_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     270:	90 91 52 04 	lds	r25, 0x0452
     274:	9f 5f       	subi	r25, 0xFF	; 255
	if(timer < 2)
     276:	92 30       	cpi	r25, 0x02	; 2
     278:	18 f4       	brcc	.+6      	; 0x280 <seqPingPongFunc+0x4a>
	static uint8_t color_i = 0;
	static int8_t led_dir = 0;
	static uint8_t seq_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     27a:	90 93 52 04 	sts	0x0452, r25
     27e:	bf c1       	rjmp	.+894    	; 0x5fe <__stack+0xff>
	if(timer < 2)
		return;
	else
		timer = 0;
     280:	10 92 52 04 	sts	0x0452, r1
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
	{
		float k = (i+1)/15.0f;
		if(!led_dir) {
     284:	20 91 51 04 	lds	r18, 0x0451
     288:	29 87       	std	Y+9, r18	; 0x09
			if(color_i-i < 0)
			break;
			leds[color_i-i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.r;
     28a:	80 91 4f 04 	lds	r24, 0x044F
     28e:	48 2f       	mov	r20, r24
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	80 91 50 04 	lds	r24, 0x0450
     296:	a8 2f       	mov	r26, r24
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	bd 87       	std	Y+13, r27	; 0x0d
     29c:	ac 87       	std	Y+12, r26	; 0x0c
     29e:	9d 01       	movw	r18, r26
     2a0:	22 0f       	add	r18, r18
     2a2:	33 1f       	adc	r19, r19
     2a4:	22 0f       	add	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	19 01       	movw	r2, r18
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	2b 0e       	add	r2, r27
     2ae:	31 1c       	adc	r3, r1
     2b0:	2e 0e       	add	r2, r30
     2b2:	3f 1e       	adc	r3, r31
     2b4:	2f 5f       	subi	r18, 0xFF	; 255
     2b6:	3f 4f       	sbci	r19, 0xFF	; 255
     2b8:	4f 01       	movw	r8, r30
     2ba:	82 0e       	add	r8, r18
     2bc:	93 1e       	adc	r9, r19
	else
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
     2be:	00 e0       	ldi	r16, 0x00	; 0
     2c0:	10 e0       	ldi	r17, 0x00	; 0
			leds[color_i-i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.g;
			leds[color_i-i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.b;
			} else {
			if(color_i+i >= num_leds)
			break;
			leds[color_i+i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.r;
     2c2:	ca 01       	movw	r24, r20
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	fc 01       	movw	r30, r24
     2ce:	e0 50       	subi	r30, 0x00	; 0
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	fb 87       	std	Y+11, r31	; 0x0b
     2d4:	ea 87       	std	Y+10, r30	; 0x0a
     2d6:	2c 85       	ldd	r18, Y+12	; 0x0c
     2d8:	3d 85       	ldd	r19, Y+13	; 0x0d
     2da:	2f 5f       	subi	r18, 0xFF	; 255
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	39 8b       	std	Y+17, r19	; 0x11
     2e0:	28 8b       	std	Y+16, r18	; 0x10
     2e2:	54 01       	movw	r10, r8
     2e4:	41 01       	movw	r8, r2
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
	{
		float k = (i+1)/15.0f;
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	b8 01       	movw	r22, r16
     2ec:	01 2e       	mov	r0, r17
     2ee:	00 0c       	add	r0, r0
     2f0:	88 0b       	sbc	r24, r24
     2f2:	99 0b       	sbc	r25, r25
     2f4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e7       	ldi	r20, 0x70	; 112
     2fe:	51 e4       	ldi	r21, 0x41	; 65
     300:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     304:	6b 01       	movw	r12, r22
     306:	7c 01       	movw	r14, r24
		if(!led_dir) {
     308:	39 85       	ldd	r19, Y+9	; 0x09
     30a:	31 11       	cpse	r19, r1
     30c:	9c c0       	rjmp	.+312    	; 0x446 <seqPingPongFunc+0x210>
     30e:	88 89       	ldd	r24, Y+16	; 0x10
     310:	99 89       	ldd	r25, Y+17	; 0x11
     312:	80 1b       	sub	r24, r16
     314:	91 0b       	sbc	r25, r17
			if(color_i-i < 0)
     316:	0a f4       	brpl	.+2      	; 0x31a <seqPingPongFunc+0xe4>
     318:	6f c1       	rjmp	.+734    	; 0x5f8 <__stack+0xf9>
			break;
			leds[color_i-i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.r;
     31a:	aa 85       	ldd	r26, Y+10	; 0x0a
     31c:	bb 85       	ldd	r27, Y+11	; 0x0b
     31e:	4d 90       	ld	r4, X+
     320:	5d 90       	ld	r5, X+
     322:	6d 90       	ld	r6, X+
     324:	7c 90       	ld	r7, X
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	80 e8       	ldi	r24, 0x80	; 128
     330:	9f e3       	ldi	r25, 0x3F	; 63
     332:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__subsf3>
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	3b 8a       	std	Y+19, r3	; 0x13
     340:	2a 8a       	std	Y+18, r2	; 0x12
     342:	c3 01       	movw	r24, r6
     344:	b2 01       	movw	r22, r4
     346:	77 27       	eor	r23, r23
     348:	88 27       	eor	r24, r24
     34a:	99 27       	eor	r25, r25
     34c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     350:	a7 01       	movw	r20, r14
     352:	96 01       	movw	r18, r12
     354:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     358:	6d 83       	std	Y+5, r22	; 0x05
     35a:	7e 83       	std	Y+6, r23	; 0x06
     35c:	8f 83       	std	Y+7, r24	; 0x07
     35e:	98 87       	std	Y+8, r25	; 0x08
     360:	f1 01       	movw	r30, r2
     362:	62 91       	ld	r22, -Z
     364:	fb 8b       	std	Y+19, r31	; 0x13
     366:	ea 8b       	std	Y+18, r30	; 0x12
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     372:	9b 01       	movw	r18, r22
     374:	ac 01       	movw	r20, r24
     376:	69 81       	ldd	r22, Y+1	; 0x01
     378:	7a 81       	ldd	r23, Y+2	; 0x02
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	9c 81       	ldd	r25, Y+4	; 0x04
     37e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     382:	9b 01       	movw	r18, r22
     384:	ac 01       	movw	r20, r24
     386:	6d 81       	ldd	r22, Y+5	; 0x05
     388:	7e 81       	ldd	r23, Y+6	; 0x06
     38a:	8f 81       	ldd	r24, Y+7	; 0x07
     38c:	98 85       	ldd	r25, Y+8	; 0x08
     38e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     392:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     396:	aa 89       	ldd	r26, Y+18	; 0x12
     398:	bb 89       	ldd	r27, Y+19	; 0x13
     39a:	6c 93       	st	X, r22
			leds[color_i-i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.g;
     39c:	65 2d       	mov	r22, r5
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     3b0:	6d 83       	std	Y+5, r22	; 0x05
     3b2:	7e 83       	std	Y+6, r23	; 0x06
     3b4:	8f 83       	std	Y+7, r24	; 0x07
     3b6:	98 87       	std	Y+8, r25	; 0x08
     3b8:	f1 01       	movw	r30, r2
     3ba:	60 81       	ld	r22, Z
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     3c6:	9b 01       	movw	r18, r22
     3c8:	ac 01       	movw	r20, r24
     3ca:	69 81       	ldd	r22, Y+1	; 0x01
     3cc:	7a 81       	ldd	r23, Y+2	; 0x02
     3ce:	8b 81       	ldd	r24, Y+3	; 0x03
     3d0:	9c 81       	ldd	r25, Y+4	; 0x04
     3d2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	6d 81       	ldd	r22, Y+5	; 0x05
     3dc:	7e 81       	ldd	r23, Y+6	; 0x06
     3de:	8f 81       	ldd	r24, Y+7	; 0x07
     3e0:	98 85       	ldd	r25, Y+8	; 0x08
     3e2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     3e6:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     3ea:	d1 01       	movw	r26, r2
     3ec:	6c 93       	st	X, r22
     3ee:	f1 01       	movw	r30, r2
     3f0:	32 97       	sbiw	r30, 0x02	; 2
     3f2:	fe 83       	std	Y+6, r31	; 0x06
     3f4:	ed 83       	std	Y+5, r30	; 0x05
			leds[color_i-i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.b;
     3f6:	66 2d       	mov	r22, r6
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     402:	a7 01       	movw	r20, r14
     404:	96 01       	movw	r18, r12
     406:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     40a:	6b 01       	movw	r12, r22
     40c:	7c 01       	movw	r14, r24
     40e:	ad 81       	ldd	r26, Y+5	; 0x05
     410:	be 81       	ldd	r27, Y+6	; 0x06
     412:	6c 91       	ld	r22, X
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     41e:	9b 01       	movw	r18, r22
     420:	ac 01       	movw	r20, r24
     422:	69 81       	ldd	r22, Y+1	; 0x01
     424:	7a 81       	ldd	r23, Y+2	; 0x02
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	9c 81       	ldd	r25, Y+4	; 0x04
     42a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     42e:	9b 01       	movw	r18, r22
     430:	ac 01       	movw	r20, r24
     432:	c7 01       	movw	r24, r14
     434:	b6 01       	movw	r22, r12
     436:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     43a:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     43e:	ed 81       	ldd	r30, Y+5	; 0x05
     440:	fe 81       	ldd	r31, Y+6	; 0x06
     442:	60 83       	st	Z, r22
     444:	9a c0       	rjmp	.+308    	; 0x57a <__stack+0x7b>
     446:	8c 85       	ldd	r24, Y+12	; 0x0c
     448:	9d 85       	ldd	r25, Y+13	; 0x0d
     44a:	80 0f       	add	r24, r16
     44c:	91 1f       	adc	r25, r17
     44e:	01 97       	sbiw	r24, 0x01	; 1
			} else {
			if(color_i+i >= num_leds)
     450:	2e 85       	ldd	r18, Y+14	; 0x0e
     452:	3f 85       	ldd	r19, Y+15	; 0x0f
     454:	82 17       	cp	r24, r18
     456:	93 07       	cpc	r25, r19
     458:	0c f0       	brlt	.+2      	; 0x45c <seqPingPongFunc+0x226>
     45a:	cb c0       	rjmp	.+406    	; 0x5f2 <__stack+0xf3>
			break;
			leds[color_i+i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.r;
     45c:	a7 01       	movw	r20, r14
     45e:	96 01       	movw	r18, r12
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	80 e8       	ldi	r24, 0x80	; 128
     466:	9f e3       	ldi	r25, 0x3F	; 63
     468:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__subsf3>
     46c:	69 83       	std	Y+1, r22	; 0x01
     46e:	7a 83       	std	Y+2, r23	; 0x02
     470:	8b 83       	std	Y+3, r24	; 0x03
     472:	9c 83       	std	Y+4, r25	; 0x04
     474:	aa 85       	ldd	r26, Y+10	; 0x0a
     476:	bb 85       	ldd	r27, Y+11	; 0x0b
     478:	4d 90       	ld	r4, X+
     47a:	5d 90       	ld	r5, X+
     47c:	6d 90       	ld	r6, X+
     47e:	7c 90       	ld	r7, X
     480:	c3 01       	movw	r24, r6
     482:	b2 01       	movw	r22, r4
     484:	77 27       	eor	r23, r23
     486:	88 27       	eor	r24, r24
     488:	99 27       	eor	r25, r25
     48a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     48e:	a7 01       	movw	r20, r14
     490:	96 01       	movw	r18, r12
     492:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     496:	6d 83       	std	Y+5, r22	; 0x05
     498:	7e 83       	std	Y+6, r23	; 0x06
     49a:	8f 83       	std	Y+7, r24	; 0x07
     49c:	98 87       	std	Y+8, r25	; 0x08
     49e:	f5 01       	movw	r30, r10
     4a0:	60 81       	ld	r22, Z
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     4ac:	9b 01       	movw	r18, r22
     4ae:	ac 01       	movw	r20, r24
     4b0:	69 81       	ldd	r22, Y+1	; 0x01
     4b2:	7a 81       	ldd	r23, Y+2	; 0x02
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	6d 81       	ldd	r22, Y+5	; 0x05
     4c2:	7e 81       	ldd	r23, Y+6	; 0x06
     4c4:	8f 81       	ldd	r24, Y+7	; 0x07
     4c6:	98 85       	ldd	r25, Y+8	; 0x08
     4c8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     4cc:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     4d0:	d5 01       	movw	r26, r10
     4d2:	6c 93       	st	X, r22
			leds[color_i+i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.g;
     4d4:	65 2d       	mov	r22, r5
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     4e0:	a7 01       	movw	r20, r14
     4e2:	96 01       	movw	r18, r12
     4e4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     4e8:	6d 83       	std	Y+5, r22	; 0x05
     4ea:	7e 83       	std	Y+6, r23	; 0x06
     4ec:	8f 83       	std	Y+7, r24	; 0x07
     4ee:	98 87       	std	Y+8, r25	; 0x08
     4f0:	f4 01       	movw	r30, r8
     4f2:	60 81       	ld	r22, Z
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     4fe:	9b 01       	movw	r18, r22
     500:	ac 01       	movw	r20, r24
     502:	69 81       	ldd	r22, Y+1	; 0x01
     504:	7a 81       	ldd	r23, Y+2	; 0x02
     506:	8b 81       	ldd	r24, Y+3	; 0x03
     508:	9c 81       	ldd	r25, Y+4	; 0x04
     50a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     50e:	9b 01       	movw	r18, r22
     510:	ac 01       	movw	r20, r24
     512:	6d 81       	ldd	r22, Y+5	; 0x05
     514:	7e 81       	ldd	r23, Y+6	; 0x06
     516:	8f 81       	ldd	r24, Y+7	; 0x07
     518:	98 85       	ldd	r25, Y+8	; 0x08
     51a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     51e:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     522:	d4 01       	movw	r26, r8
     524:	6c 93       	st	X, r22
     526:	be 82       	std	Y+6, r11	; 0x06
     528:	ad 82       	std	Y+5, r10	; 0x05
			leds[color_i+i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.b;
     52a:	66 2d       	mov	r22, r6
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     536:	a7 01       	movw	r20, r14
     538:	96 01       	movw	r18, r12
     53a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     53e:	6b 01       	movw	r12, r22
     540:	7c 01       	movw	r14, r24
     542:	f5 01       	movw	r30, r10
     544:	62 91       	ld	r22, -Z
     546:	fe 83       	std	Y+6, r31	; 0x06
     548:	ed 83       	std	Y+5, r30	; 0x05
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	69 81       	ldd	r22, Y+1	; 0x01
     55a:	7a 81       	ldd	r23, Y+2	; 0x02
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	9c 81       	ldd	r25, Y+4	; 0x04
     560:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     564:	9b 01       	movw	r18, r22
     566:	ac 01       	movw	r20, r24
     568:	c7 01       	movw	r24, r14
     56a:	b6 01       	movw	r22, r12
     56c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     570:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     574:	ad 81       	ldd	r26, Y+5	; 0x05
     576:	be 81       	ldd	r27, Y+6	; 0x06
     578:	6c 93       	st	X, r22
     57a:	b4 e0       	ldi	r27, 0x04	; 4
     57c:	2b 1a       	sub	r2, r27
     57e:	31 08       	sbc	r3, r1
     580:	e4 e0       	ldi	r30, 0x04	; 4
     582:	ae 0e       	add	r10, r30
     584:	b1 1c       	adc	r11, r1
     586:	f4 e0       	ldi	r31, 0x04	; 4
     588:	8f 0e       	add	r8, r31
     58a:	91 1c       	adc	r9, r1
	else
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
     58c:	0f 30       	cpi	r16, 0x0F	; 15
     58e:	11 05       	cpc	r17, r1
     590:	09 f0       	breq	.+2      	; 0x594 <__stack+0x95>
     592:	a9 ce       	rjmp	.-686    	; 0x2e6 <seqPingPongFunc+0xb0>
			leds[color_i+i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.g;
			leds[color_i+i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.b;
		}
	}
	
	if(led_dir) color_i--;
     594:	20 91 51 04 	lds	r18, 0x0451
     598:	22 23       	and	r18, r18
     59a:	31 f0       	breq	.+12     	; 0x5a8 <__stack+0xa9>
     59c:	80 91 50 04 	lds	r24, 0x0450
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	80 93 50 04 	sts	0x0450, r24
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <__stack+0xb3>
	else color_i++;
     5a8:	80 91 50 04 	lds	r24, 0x0450
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	80 93 50 04 	sts	0x0450, r24
	if(color_i >= num_leds || color_i < 0) {
     5b2:	80 91 50 04 	lds	r24, 0x0450
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	4e 85       	ldd	r20, Y+14	; 0x0e
     5ba:	5f 85       	ldd	r21, Y+15	; 0x0f
     5bc:	84 17       	cp	r24, r20
     5be:	95 07       	cpc	r25, r21
     5c0:	f4 f0       	brlt	.+60     	; 0x5fe <__stack+0xff>
		seq_i = (seq_i+1)%numColors;
     5c2:	80 91 4f 04 	lds	r24, 0x044F
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	60 91 20 01 	lds	r22, 0x0120
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodhi4>
     5d4:	80 93 4f 04 	sts	0x044F, r24
		led_dir = led_dir == 1 ? 0 : 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	21 30       	cpi	r18, 0x01	; 1
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__stack+0xe1>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	80 93 51 04 	sts	0x0451, r24
		color_i = 0 + led_dir*num_leds;
     5e4:	5e 85       	ldd	r21, Y+14	; 0x0e
     5e6:	85 9f       	mul	r24, r21
     5e8:	80 2d       	mov	r24, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	80 93 50 04 	sts	0x0450, r24
     5f0:	06 c0       	rjmp	.+12     	; 0x5fe <__stack+0xff>
			leds[color_i+i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.g;
			leds[color_i+i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.b;
		}
	}
	
	if(led_dir) color_i--;
     5f2:	20 91 51 04 	lds	r18, 0x0451
     5f6:	d2 cf       	rjmp	.-92     	; 0x59c <__stack+0x9d>
     5f8:	20 91 51 04 	lds	r18, 0x0451
     5fc:	d5 cf       	rjmp	.-86     	; 0x5a8 <__stack+0xa9>
	if(color_i >= num_leds || color_i < 0) {
		seq_i = (seq_i+1)%numColors;
		led_dir = led_dir == 1 ? 0 : 1;
		color_i = 0 + led_dir*num_leds;
	}
}
     5fe:	63 96       	adiw	r28, 0x13	; 19
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	9f 90       	pop	r9
     620:	8f 90       	pop	r8
     622:	7f 90       	pop	r7
     624:	6f 90       	pop	r6
     626:	5f 90       	pop	r5
     628:	4f 90       	pop	r4
     62a:	3f 90       	pop	r3
     62c:	2f 90       	pop	r2
     62e:	08 95       	ret

00000630 <seqDoublePingPongFunc>:

static void seqDoublePingPongFunc(color_t *leds, int num_leds)
{
     630:	2f 92       	push	r2
     632:	3f 92       	push	r3
     634:	4f 92       	push	r4
     636:	5f 92       	push	r5
     638:	6f 92       	push	r6
     63a:	7f 92       	push	r7
     63c:	8f 92       	push	r8
     63e:	9f 92       	push	r9
     640:	af 92       	push	r10
     642:	bf 92       	push	r11
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	a1 97       	sbiw	r28, 0x21	; 33
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
     664:	ac 01       	movw	r20, r24
	static uint8_t led_i = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     666:	90 91 56 04 	lds	r25, 0x0456
     66a:	9f 5f       	subi	r25, 0xFF	; 255
	if(timer < 2)
     66c:	92 30       	cpi	r25, 0x02	; 2
     66e:	18 f4       	brcc	.+6      	; 0x676 <seqDoublePingPongFunc+0x46>
	static uint8_t led_i = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     670:	90 93 56 04 	sts	0x0456, r25
     674:	d1 c2       	rjmp	.+1442   	; 0xc18 <seqDoublePingPongFunc+0x5e8>
	if(timer < 2)
		return;
	else
		timer = 0;
     676:	10 92 56 04 	sts	0x0456, r1
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
	{
		float k = (i+1)/10.0f;
		if(!led_dir) {
     67a:	20 91 55 04 	lds	r18, 0x0455
     67e:	2d 8b       	std	Y+21, r18	; 0x15
			if(led_i-i < 0)
     680:	10 91 54 04 	lds	r17, 0x0454
			break;
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     684:	80 91 53 04 	lds	r24, 0x0453
     688:	28 2f       	mov	r18, r24
     68a:	30 e0       	ldi	r19, 0x00	; 0
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
			} else {
			if(led_i+i > num_leds/2)
     68c:	fb 01       	movw	r30, r22
     68e:	77 23       	and	r23, r23
     690:	0c f4       	brge	.+2      	; 0x694 <seqDoublePingPongFunc+0x64>
     692:	31 96       	adiw	r30, 0x01	; 1
     694:	7f 8f       	std	Y+31, r23	; 0x1f
     696:	6e 8f       	std	Y+30, r22	; 0x1e
     698:	ca 01       	movw	r24, r20
     69a:	af 01       	movw	r20, r30
     69c:	55 95       	asr	r21
     69e:	47 95       	ror	r20
     6a0:	5b 8f       	std	Y+27, r21	; 0x1b
     6a2:	4a 8f       	std	Y+26, r20	; 0x1a
     6a4:	61 2f       	mov	r22, r17
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	79 8f       	std	Y+25, r23	; 0x19
     6aa:	68 8f       	std	Y+24, r22	; 0x18
     6ac:	ab 01       	movw	r20, r22
     6ae:	44 0f       	add	r20, r20
     6b0:	55 1f       	adc	r21, r21
     6b2:	44 0f       	add	r20, r20
     6b4:	55 1f       	adc	r21, r21
     6b6:	ba 01       	movw	r22, r20
     6b8:	6e 5f       	subi	r22, 0xFE	; 254
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	3c 01       	movw	r6, r24
     6be:	66 0e       	add	r6, r22
     6c0:	77 1e       	adc	r7, r23
			break;
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
     6c2:	2e 8c       	ldd	r2, Y+30	; 0x1e
     6c4:	3f 8c       	ldd	r3, Y+31	; 0x1f
     6c6:	71 e0       	ldi	r23, 0x01	; 1
     6c8:	27 1a       	sub	r2, r23
     6ca:	31 08       	sbc	r3, r1
     6cc:	a8 8d       	ldd	r26, Y+24	; 0x18
     6ce:	b9 8d       	ldd	r27, Y+25	; 0x19
     6d0:	2a 1a       	sub	r2, r26
     6d2:	3b 0a       	sbc	r3, r27
     6d4:	22 0c       	add	r2, r2
     6d6:	33 1c       	adc	r3, r3
     6d8:	22 0c       	add	r2, r2
     6da:	33 1c       	adc	r3, r3
     6dc:	b2 e0       	ldi	r27, 0x02	; 2
     6de:	2b 0e       	add	r2, r27
     6e0:	31 1c       	adc	r3, r1
     6e2:	28 0e       	add	r2, r24
     6e4:	39 1e       	adc	r3, r25
     6e6:	4f 5f       	subi	r20, 0xFF	; 255
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	4c 01       	movw	r8, r24
     6ec:	84 0e       	add	r8, r20
     6ee:	95 1e       	adc	r9, r21
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
     6f0:	00 e0       	ldi	r16, 0x00	; 0
     6f2:	10 e0       	ldi	r17, 0x00	; 0
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
			} else {
			if(led_i+i > num_leds/2)
			break;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     6f4:	c9 01       	movw	r24, r18
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	fc 01       	movw	r30, r24
     700:	e0 50       	subi	r30, 0x00	; 0
     702:	ff 4f       	sbci	r31, 0xFF	; 255
     704:	ff 8b       	std	Y+23, r31	; 0x17
     706:	ee 8b       	std	Y+22, r30	; 0x16
     708:	28 8d       	ldd	r18, Y+24	; 0x18
     70a:	39 8d       	ldd	r19, Y+25	; 0x19
     70c:	2f 5f       	subi	r18, 0xFF	; 255
     70e:	3f 4f       	sbci	r19, 0xFF	; 255
     710:	3d 8f       	std	Y+29, r19	; 0x1d
     712:	2c 8f       	std	Y+28, r18	; 0x1c
     714:	54 01       	movw	r10, r8
     716:	43 01       	movw	r8, r6
     718:	21 01       	movw	r4, r2
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
	{
		float k = (i+1)/10.0f;
     71a:	0f 5f       	subi	r16, 0xFF	; 255
     71c:	1f 4f       	sbci	r17, 0xFF	; 255
     71e:	b8 01       	movw	r22, r16
     720:	01 2e       	mov	r0, r17
     722:	00 0c       	add	r0, r0
     724:	88 0b       	sbc	r24, r24
     726:	99 0b       	sbc	r25, r25
     728:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e2       	ldi	r20, 0x20	; 32
     732:	51 e4       	ldi	r21, 0x41	; 65
     734:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     738:	6d 83       	std	Y+5, r22	; 0x05
     73a:	7e 83       	std	Y+6, r23	; 0x06
     73c:	8f 83       	std	Y+7, r24	; 0x07
     73e:	98 87       	std	Y+8, r25	; 0x08
		if(!led_dir) {
     740:	3d 89       	ldd	r19, Y+21	; 0x15
     742:	31 11       	cpse	r19, r1
     744:	f6 c0       	rjmp	.+492    	; 0x932 <seqDoublePingPongFunc+0x302>
     746:	8c 8d       	ldd	r24, Y+28	; 0x1c
     748:	9d 8d       	ldd	r25, Y+29	; 0x1d
     74a:	80 1b       	sub	r24, r16
     74c:	91 0b       	sbc	r25, r17
			if(led_i-i < 0)
     74e:	0a f4       	brpl	.+2      	; 0x752 <seqDoublePingPongFunc+0x122>
     750:	60 c2       	rjmp	.+1216   	; 0xc12 <seqDoublePingPongFunc+0x5e2>
			break;
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     752:	ae 89       	ldd	r26, Y+22	; 0x16
     754:	bf 89       	ldd	r27, Y+23	; 0x17
     756:	cd 90       	ld	r12, X+
     758:	dd 90       	ld	r13, X+
     75a:	ed 90       	ld	r14, X+
     75c:	fc 90       	ld	r15, X
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	77 27       	eor	r23, r23
     764:	88 27       	eor	r24, r24
     766:	99 27       	eor	r25, r25
     768:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     76c:	2d 81       	ldd	r18, Y+5	; 0x05
     76e:	3e 81       	ldd	r19, Y+6	; 0x06
     770:	4f 81       	ldd	r20, Y+7	; 0x07
     772:	58 85       	ldd	r21, Y+8	; 0x08
     774:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     778:	69 87       	std	Y+9, r22	; 0x09
     77a:	7a 87       	std	Y+10, r23	; 0x0a
     77c:	8b 87       	std	Y+11, r24	; 0x0b
     77e:	9c 87       	std	Y+12, r25	; 0x0c
     780:	2d 81       	ldd	r18, Y+5	; 0x05
     782:	3e 81       	ldd	r19, Y+6	; 0x06
     784:	4f 81       	ldd	r20, Y+7	; 0x07
     786:	58 85       	ldd	r21, Y+8	; 0x08
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 e8       	ldi	r24, 0x80	; 128
     78e:	9f e3       	ldi	r25, 0x3F	; 63
     790:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__subsf3>
     794:	69 83       	std	Y+1, r22	; 0x01
     796:	7a 83       	std	Y+2, r23	; 0x02
     798:	8b 83       	std	Y+3, r24	; 0x03
     79a:	9c 83       	std	Y+4, r25	; 0x04
     79c:	f3 01       	movw	r30, r6
     79e:	62 91       	ld	r22, -Z
     7a0:	fe 87       	std	Y+14, r31	; 0x0e
     7a2:	ed 87       	std	Y+13, r30	; 0x0d
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	69 81       	ldd	r22, Y+1	; 0x01
     7b4:	7a 81       	ldd	r23, Y+2	; 0x02
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	69 85       	ldd	r22, Y+9	; 0x09
     7c4:	7a 85       	ldd	r23, Y+10	; 0x0a
     7c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     7c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ca:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     7ce:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     7d2:	ad 85       	ldd	r26, Y+13	; 0x0d
     7d4:	be 85       	ldd	r27, Y+14	; 0x0e
     7d6:	6c 93       	st	X, r22
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
     7d8:	6d 2d       	mov	r22, r13
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     7e4:	2d 81       	ldd	r18, Y+5	; 0x05
     7e6:	3e 81       	ldd	r19, Y+6	; 0x06
     7e8:	4f 81       	ldd	r20, Y+7	; 0x07
     7ea:	58 85       	ldd	r21, Y+8	; 0x08
     7ec:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     7f0:	6d 87       	std	Y+13, r22	; 0x0d
     7f2:	7e 87       	std	Y+14, r23	; 0x0e
     7f4:	8f 87       	std	Y+15, r24	; 0x0f
     7f6:	98 8b       	std	Y+16, r25	; 0x10
     7f8:	f3 01       	movw	r30, r6
     7fa:	60 81       	ld	r22, Z
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	69 81       	ldd	r22, Y+1	; 0x01
     80c:	7a 81       	ldd	r23, Y+2	; 0x02
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     816:	9b 01       	movw	r18, r22
     818:	ac 01       	movw	r20, r24
     81a:	6d 85       	ldd	r22, Y+13	; 0x0d
     81c:	7e 85       	ldd	r23, Y+14	; 0x0e
     81e:	8f 85       	ldd	r24, Y+15	; 0x0f
     820:	98 89       	ldd	r25, Y+16	; 0x10
     822:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     826:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     82a:	d3 01       	movw	r26, r6
     82c:	6c 93       	st	X, r22
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
     82e:	6e 2d       	mov	r22, r14
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     83a:	2d 81       	ldd	r18, Y+5	; 0x05
     83c:	3e 81       	ldd	r19, Y+6	; 0x06
     83e:	4f 81       	ldd	r20, Y+7	; 0x07
     840:	58 85       	ldd	r21, Y+8	; 0x08
     842:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     846:	6b 01       	movw	r12, r22
     848:	7c 01       	movw	r14, r24
     84a:	f3 01       	movw	r30, r6
     84c:	32 97       	sbiw	r30, 0x02	; 2
     84e:	fe 83       	std	Y+6, r31	; 0x06
     850:	ed 83       	std	Y+5, r30	; 0x05
     852:	60 81       	ld	r22, Z
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	7a 81       	ldd	r23, Y+2	; 0x02
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     87a:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     87e:	ad 81       	ldd	r26, Y+5	; 0x05
     880:	be 81       	ldd	r27, Y+6	; 0x06
     882:	6c 93       	st	X, r22
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
     884:	f2 01       	movw	r30, r4
     886:	62 91       	ld	r22, -Z
     888:	fe 83       	std	Y+6, r31	; 0x06
     88a:	ed 83       	std	Y+5, r30	; 0x05
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	69 81       	ldd	r22, Y+1	; 0x01
     89c:	7a 81       	ldd	r23, Y+2	; 0x02
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	9c 81       	ldd	r25, Y+4	; 0x04
     8a2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	69 85       	ldd	r22, Y+9	; 0x09
     8ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     8ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     8b6:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     8ba:	ad 81       	ldd	r26, Y+5	; 0x05
     8bc:	be 81       	ldd	r27, Y+6	; 0x06
     8be:	6c 93       	st	X, r22
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
     8c0:	f2 01       	movw	r30, r4
     8c2:	60 81       	ld	r22, Z
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	69 81       	ldd	r22, Y+1	; 0x01
     8d4:	7a 81       	ldd	r23, Y+2	; 0x02
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     8de:	9b 01       	movw	r18, r22
     8e0:	ac 01       	movw	r20, r24
     8e2:	6d 85       	ldd	r22, Y+13	; 0x0d
     8e4:	7e 85       	ldd	r23, Y+14	; 0x0e
     8e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e8:	98 89       	ldd	r25, Y+16	; 0x10
     8ea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     8ee:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     8f2:	d2 01       	movw	r26, r4
     8f4:	6c 93       	st	X, r22
     8f6:	f2 01       	movw	r30, r4
     8f8:	32 97       	sbiw	r30, 0x02	; 2
     8fa:	fe 83       	std	Y+6, r31	; 0x06
     8fc:	ed 83       	std	Y+5, r30	; 0x05
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
     8fe:	60 81       	ld	r22, Z
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	69 81       	ldd	r22, Y+1	; 0x01
     910:	7a 81       	ldd	r23, Y+2	; 0x02
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     926:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     92a:	ad 81       	ldd	r26, Y+5	; 0x05
     92c:	be 81       	ldd	r27, Y+6	; 0x06
     92e:	6c 93       	st	X, r22
     930:	1f c1       	rjmp	.+574    	; 0xb70 <seqDoublePingPongFunc+0x540>
     932:	88 8d       	ldd	r24, Y+24	; 0x18
     934:	99 8d       	ldd	r25, Y+25	; 0x19
     936:	80 0f       	add	r24, r16
     938:	91 1f       	adc	r25, r17
     93a:	01 97       	sbiw	r24, 0x01	; 1
			} else {
			if(led_i+i > num_leds/2)
     93c:	ea 8d       	ldd	r30, Y+26	; 0x1a
     93e:	fb 8d       	ldd	r31, Y+27	; 0x1b
     940:	e8 17       	cp	r30, r24
     942:	f9 07       	cpc	r31, r25
     944:	0c f4       	brge	.+2      	; 0x948 <seqDoublePingPongFunc+0x318>
     946:	62 c1       	rjmp	.+708    	; 0xc0c <seqDoublePingPongFunc+0x5dc>
			break;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     948:	ae 89       	ldd	r26, Y+22	; 0x16
     94a:	bf 89       	ldd	r27, Y+23	; 0x17
     94c:	cd 90       	ld	r12, X+
     94e:	dd 90       	ld	r13, X+
     950:	ed 90       	ld	r14, X+
     952:	fc 90       	ld	r15, X
     954:	c7 01       	movw	r24, r14
     956:	b6 01       	movw	r22, r12
     958:	77 27       	eor	r23, r23
     95a:	88 27       	eor	r24, r24
     95c:	99 27       	eor	r25, r25
     95e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     962:	2d 81       	ldd	r18, Y+5	; 0x05
     964:	3e 81       	ldd	r19, Y+6	; 0x06
     966:	4f 81       	ldd	r20, Y+7	; 0x07
     968:	58 85       	ldd	r21, Y+8	; 0x08
     96a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     96e:	69 87       	std	Y+9, r22	; 0x09
     970:	7a 87       	std	Y+10, r23	; 0x0a
     972:	8b 87       	std	Y+11, r24	; 0x0b
     974:	9c 87       	std	Y+12, r25	; 0x0c
     976:	2d 81       	ldd	r18, Y+5	; 0x05
     978:	3e 81       	ldd	r19, Y+6	; 0x06
     97a:	4f 81       	ldd	r20, Y+7	; 0x07
     97c:	58 85       	ldd	r21, Y+8	; 0x08
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	9f e3       	ldi	r25, 0x3F	; 63
     986:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__subsf3>
     98a:	69 83       	std	Y+1, r22	; 0x01
     98c:	7a 83       	std	Y+2, r23	; 0x02
     98e:	8b 83       	std	Y+3, r24	; 0x03
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	f5 01       	movw	r30, r10
     994:	60 81       	ld	r22, Z
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	69 81       	ldd	r22, Y+1	; 0x01
     9a6:	7a 81       	ldd	r23, Y+2	; 0x02
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	69 85       	ldd	r22, Y+9	; 0x09
     9b6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     9bc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     9c0:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     9c4:	d5 01       	movw	r26, r10
     9c6:	6c 93       	st	X, r22
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
     9c8:	2d 2d       	mov	r18, r13
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	2d 87       	std	Y+13, r18	; 0x0d
     9d2:	3e 87       	std	Y+14, r19	; 0x0e
     9d4:	4f 87       	std	Y+15, r20	; 0x0f
     9d6:	58 8b       	std	Y+16, r21	; 0x10
     9d8:	ca 01       	movw	r24, r20
     9da:	b9 01       	movw	r22, r18
     9dc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     9e0:	2d 81       	ldd	r18, Y+5	; 0x05
     9e2:	3e 81       	ldd	r19, Y+6	; 0x06
     9e4:	4f 81       	ldd	r20, Y+7	; 0x07
     9e6:	58 85       	ldd	r21, Y+8	; 0x08
     9e8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     9ec:	69 8b       	std	Y+17, r22	; 0x11
     9ee:	7a 8b       	std	Y+18, r23	; 0x12
     9f0:	8b 8b       	std	Y+19, r24	; 0x13
     9f2:	9c 8b       	std	Y+20, r25	; 0x14
     9f4:	d4 01       	movw	r26, r8
     9f6:	6c 91       	ld	r22, X
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     a02:	9b 01       	movw	r18, r22
     a04:	ac 01       	movw	r20, r24
     a06:	69 81       	ldd	r22, Y+1	; 0x01
     a08:	7a 81       	ldd	r23, Y+2	; 0x02
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	69 89       	ldd	r22, Y+17	; 0x11
     a18:	7a 89       	ldd	r23, Y+18	; 0x12
     a1a:	8b 89       	ldd	r24, Y+19	; 0x13
     a1c:	9c 89       	ldd	r25, Y+20	; 0x14
     a1e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     a22:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     a26:	f4 01       	movw	r30, r8
     a28:	60 83       	st	Z, r22
     a2a:	b9 a2       	std	Y+33, r11	; 0x21
     a2c:	a8 a2       	std	Y+32, r10	; 0x20
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
     a2e:	2e 2d       	mov	r18, r14
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	29 8b       	std	Y+17, r18	; 0x11
     a38:	3a 8b       	std	Y+18, r19	; 0x12
     a3a:	4b 8b       	std	Y+19, r20	; 0x13
     a3c:	5c 8b       	std	Y+20, r21	; 0x14
     a3e:	ca 01       	movw	r24, r20
     a40:	b9 01       	movw	r22, r18
     a42:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     a46:	2d 81       	ldd	r18, Y+5	; 0x05
     a48:	3e 81       	ldd	r19, Y+6	; 0x06
     a4a:	4f 81       	ldd	r20, Y+7	; 0x07
     a4c:	58 85       	ldd	r21, Y+8	; 0x08
     a4e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     a52:	6b 01       	movw	r12, r22
     a54:	7c 01       	movw	r14, r24
     a56:	d5 01       	movw	r26, r10
     a58:	6e 91       	ld	r22, -X
     a5a:	b9 a3       	std	Y+33, r27	; 0x21
     a5c:	a8 a3       	std	Y+32, r26	; 0x20
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     a68:	9b 01       	movw	r18, r22
     a6a:	ac 01       	movw	r20, r24
     a6c:	69 81       	ldd	r22, Y+1	; 0x01
     a6e:	7a 81       	ldd	r23, Y+2	; 0x02
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     a78:	9b 01       	movw	r18, r22
     a7a:	ac 01       	movw	r20, r24
     a7c:	c7 01       	movw	r24, r14
     a7e:	b6 01       	movw	r22, r12
     a80:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     a84:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     a88:	e8 a1       	ldd	r30, Y+32	; 0x20
     a8a:	f9 a1       	ldd	r31, Y+33	; 0x21
     a8c:	60 83       	st	Z, r22
			
			leds[num_leds-1-led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.r;
     a8e:	d1 01       	movw	r26, r2
     a90:	6e 91       	ld	r22, -X
     a92:	7d 01       	movw	r14, r26
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	69 81       	ldd	r22, Y+1	; 0x01
     aa4:	7a 81       	ldd	r23, Y+2	; 0x02
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	9c 81       	ldd	r25, Y+4	; 0x04
     aaa:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     aae:	9b 01       	movw	r18, r22
     ab0:	ac 01       	movw	r20, r24
     ab2:	69 85       	ldd	r22, Y+9	; 0x09
     ab4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aba:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     abe:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     ac2:	f7 01       	movw	r30, r14
     ac4:	60 83       	st	Z, r22
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
     ac6:	6d 85       	ldd	r22, Y+13	; 0x0d
     ac8:	7e 85       	ldd	r23, Y+14	; 0x0e
     aca:	8f 85       	ldd	r24, Y+15	; 0x0f
     acc:	98 89       	ldd	r25, Y+16	; 0x10
     ace:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     ad2:	2d 81       	ldd	r18, Y+5	; 0x05
     ad4:	3e 81       	ldd	r19, Y+6	; 0x06
     ad6:	4f 81       	ldd	r20, Y+7	; 0x07
     ad8:	58 85       	ldd	r21, Y+8	; 0x08
     ada:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	d1 01       	movw	r26, r2
     ae4:	6c 91       	ld	r22, X
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     af0:	9b 01       	movw	r18, r22
     af2:	ac 01       	movw	r20, r24
     af4:	69 81       	ldd	r22, Y+1	; 0x01
     af6:	7a 81       	ldd	r23, Y+2	; 0x02
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	9c 81       	ldd	r25, Y+4	; 0x04
     afc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c7 01       	movw	r24, r14
     b06:	b6 01       	movw	r22, r12
     b08:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     b0c:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     b10:	f1 01       	movw	r30, r2
     b12:	60 83       	st	Z, r22
     b14:	91 01       	movw	r18, r2
     b16:	22 50       	subi	r18, 0x02	; 2
     b18:	31 09       	sbc	r19, r1
     b1a:	3a 87       	std	Y+10, r19	; 0x0a
     b1c:	29 87       	std	Y+9, r18	; 0x09
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
     b1e:	69 89       	ldd	r22, Y+17	; 0x11
     b20:	7a 89       	ldd	r23, Y+18	; 0x12
     b22:	8b 89       	ldd	r24, Y+19	; 0x13
     b24:	9c 89       	ldd	r25, Y+20	; 0x14
     b26:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     b2a:	2d 81       	ldd	r18, Y+5	; 0x05
     b2c:	3e 81       	ldd	r19, Y+6	; 0x06
     b2e:	4f 81       	ldd	r20, Y+7	; 0x07
     b30:	58 85       	ldd	r21, Y+8	; 0x08
     b32:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     b36:	6b 01       	movw	r12, r22
     b38:	7c 01       	movw	r14, r24
     b3a:	a9 85       	ldd	r26, Y+9	; 0x09
     b3c:	ba 85       	ldd	r27, Y+10	; 0x0a
     b3e:	6c 91       	ld	r22, X
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
     b4e:	69 81       	ldd	r22, Y+1	; 0x01
     b50:	7a 81       	ldd	r23, Y+2	; 0x02
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     b5a:	9b 01       	movw	r18, r22
     b5c:	ac 01       	movw	r20, r24
     b5e:	c7 01       	movw	r24, r14
     b60:	b6 01       	movw	r22, r12
     b62:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     b66:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     b6a:	e9 85       	ldd	r30, Y+9	; 0x09
     b6c:	fa 85       	ldd	r31, Y+10	; 0x0a
     b6e:	60 83       	st	Z, r22
     b70:	f4 e0       	ldi	r31, 0x04	; 4
     b72:	6f 1a       	sub	r6, r31
     b74:	71 08       	sbc	r7, r1
     b76:	24 e0       	ldi	r18, 0x04	; 4
     b78:	42 0e       	add	r4, r18
     b7a:	51 1c       	adc	r5, r1
     b7c:	34 e0       	ldi	r19, 0x04	; 4
     b7e:	a3 0e       	add	r10, r19
     b80:	b1 1c       	adc	r11, r1
     b82:	44 e0       	ldi	r20, 0x04	; 4
     b84:	84 0e       	add	r8, r20
     b86:	91 1c       	adc	r9, r1
     b88:	54 e0       	ldi	r21, 0x04	; 4
     b8a:	25 1a       	sub	r2, r21
     b8c:	31 08       	sbc	r3, r1
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
     b8e:	0a 30       	cpi	r16, 0x0A	; 10
     b90:	11 05       	cpc	r17, r1
     b92:	09 f0       	breq	.+2      	; 0xb96 <seqDoublePingPongFunc+0x566>
     b94:	c2 cd       	rjmp	.-1148   	; 0x71a <seqDoublePingPongFunc+0xea>
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     b96:	30 91 55 04 	lds	r19, 0x0455
     b9a:	33 23       	and	r19, r19
     b9c:	31 f0       	breq	.+12     	; 0xbaa <seqDoublePingPongFunc+0x57a>
     b9e:	80 91 54 04 	lds	r24, 0x0454
     ba2:	81 50       	subi	r24, 0x01	; 1
     ba4:	80 93 54 04 	sts	0x0454, r24
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <seqDoublePingPongFunc+0x584>
	else led_i++;
     baa:	80 91 54 04 	lds	r24, 0x0454
     bae:	8f 5f       	subi	r24, 0xFF	; 255
     bb0:	80 93 54 04 	sts	0x0454, r24
	if(led_i >= num_leds/2 || led_i < 0) {
     bb4:	80 91 54 04 	lds	r24, 0x0454
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	6a 8d       	ldd	r22, Y+26	; 0x1a
     bbc:	7b 8d       	ldd	r23, Y+27	; 0x1b
     bbe:	86 17       	cp	r24, r22
     bc0:	97 07       	cpc	r25, r23
     bc2:	54 f1       	brlt	.+84     	; 0xc18 <seqDoublePingPongFunc+0x5e8>
		color_i = (color_i+1)%numColors;
     bc4:	80 91 53 04 	lds	r24, 0x0453
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	60 91 20 01 	lds	r22, 0x0120
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodhi4>
     bd6:	80 93 53 04 	sts	0x0453, r24
		led_dir = led_dir == 1 ? 0 : 1;
     bda:	21 e0       	ldi	r18, 0x01	; 1
     bdc:	31 30       	cpi	r19, 0x01	; 1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <seqDoublePingPongFunc+0x5b2>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	20 93 55 04 	sts	0x0455, r18
		led_i = 0 + led_dir*num_leds/2-1;
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	ae 8d       	ldd	r26, Y+30	; 0x1e
     bea:	bf 8d       	ldd	r27, Y+31	; 0x1f
     bec:	2a 9f       	mul	r18, r26
     bee:	c0 01       	movw	r24, r0
     bf0:	2b 9f       	mul	r18, r27
     bf2:	90 0d       	add	r25, r0
     bf4:	3a 9f       	mul	r19, r26
     bf6:	90 0d       	add	r25, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	99 23       	and	r25, r25
     bfc:	0c f4       	brge	.+2      	; 0xc00 <seqDoublePingPongFunc+0x5d0>
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	95 95       	asr	r25
     c02:	87 95       	ror	r24
     c04:	81 50       	subi	r24, 0x01	; 1
     c06:	80 93 54 04 	sts	0x0454, r24
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <seqDoublePingPongFunc+0x5e8>
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     c0c:	30 91 55 04 	lds	r19, 0x0455
     c10:	c6 cf       	rjmp	.-116    	; 0xb9e <seqDoublePingPongFunc+0x56e>
     c12:	30 91 55 04 	lds	r19, 0x0455
     c16:	c9 cf       	rjmp	.-110    	; 0xbaa <seqDoublePingPongFunc+0x57a>
	if(led_i >= num_leds/2 || led_i < 0) {
		color_i = (color_i+1)%numColors;
		led_dir = led_dir == 1 ? 0 : 1;
		led_i = 0 + led_dir*num_leds/2-1;
	}
}
     c18:	a1 96       	adiw	r28, 0x21	; 33
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	af 90       	pop	r10
     c38:	9f 90       	pop	r9
     c3a:	8f 90       	pop	r8
     c3c:	7f 90       	pop	r7
     c3e:	6f 90       	pop	r6
     c40:	5f 90       	pop	r5
     c42:	4f 90       	pop	r4
     c44:	3f 90       	pop	r3
     c46:	2f 90       	pop	r2
     c48:	08 95       	ret

00000c4a <seqFadeFunc>:

static void seqFadeFunc(color_t *leds, int num_leds)
{
     c4a:	4f 92       	push	r4
     c4c:	5f 92       	push	r5
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	6c 01       	movw	r12, r24
     c6a:	eb 01       	movw	r28, r22
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
     c6c:	f0 90 59 04 	lds	r15, 0x0459
     c70:	6f 2d       	mov	r22, r15
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	48 e4       	ldi	r20, 0x48	; 72
     c82:	52 e4       	ldi	r21, 0x42	; 66
     c84:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     c88:	4b 01       	movw	r8, r22
     c8a:	5c 01       	movw	r10, r24
	for(int i = 0; i < num_leds; i++)
     c8c:	1c 16       	cp	r1, r28
     c8e:	1d 06       	cpc	r1, r29
     c90:	0c f0       	brlt	.+2      	; 0xc94 <seqFadeFunc+0x4a>
     c92:	48 c0       	rjmp	.+144    	; 0xd24 <seqFadeFunc+0xda>
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     c94:	e0 91 58 04 	lds	r30, 0x0458
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	e0 50       	subi	r30, 0x00	; 0
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	40 80       	ld	r4, Z
     ca8:	51 80       	ldd	r5, Z+1	; 0x01
     caa:	62 80       	ldd	r6, Z+2	; 0x02
     cac:	73 80       	ldd	r7, Z+3	; 0x03
     cae:	c3 01       	movw	r24, r6
     cb0:	b2 01       	movw	r22, r4
     cb2:	77 27       	eor	r23, r23
     cb4:	88 27       	eor	r24, r24
     cb6:	99 27       	eor	r25, r25
     cb8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     cbc:	a5 01       	movw	r20, r10
     cbe:	94 01       	movw	r18, r8
     cc0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     cc4:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     cc8:	06 2f       	mov	r16, r22
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     cca:	65 2d       	mov	r22, r5
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     cd6:	a5 01       	movw	r20, r10
     cd8:	94 01       	movw	r18, r8
     cda:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     cde:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     ce2:	16 2f       	mov	r17, r22
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     ce4:	66 2d       	mov	r22, r6
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     cf0:	a5 01       	movw	r20, r10
     cf2:	94 01       	movw	r18, r8
     cf4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     cf8:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     cfc:	f6 01       	movw	r30, r12
     cfe:	32 96       	adiw	r30, 0x02	; 2
     d00:	cc 0f       	add	r28, r28
     d02:	dd 1f       	adc	r29, r29
     d04:	cc 0f       	add	r28, r28
     d06:	dd 1f       	adc	r29, r29
     d08:	22 96       	adiw	r28, 0x02	; 2
     d0a:	c6 01       	movw	r24, r12
     d0c:	8c 0f       	add	r24, r28
     d0e:	9d 1f       	adc	r25, r29
     d10:	df 01       	movw	r26, r30
     d12:	11 97       	sbiw	r26, 0x01	; 1
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     d14:	0c 93       	st	X, r16
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     d16:	10 83       	st	Z, r17
     d18:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     d1a:	6c 93       	st	X, r22
     d1c:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t timer = 0;
	static uint8_t time = 50;
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
     d1e:	e8 17       	cp	r30, r24
     d20:	f9 07       	cpc	r31, r25
     d22:	b1 f7       	brne	.-20     	; 0xd10 <seqFadeFunc+0xc6>
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
	}
	
	if(!led_dir)
     d24:	80 91 57 04 	lds	r24, 0x0457
     d28:	81 11       	cpse	r24, r1
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <seqFadeFunc+0xea>
	timer++;
     d2c:	f3 94       	inc	r15
     d2e:	f0 92 59 04 	sts	0x0459, r15
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <seqFadeFunc+0xf0>
	else
	timer--;
     d34:	fa 94       	dec	r15
     d36:	f0 92 59 04 	sts	0x0459, r15
	if(timer >= time)
     d3a:	80 91 59 04 	lds	r24, 0x0459
     d3e:	82 33       	cpi	r24, 0x32	; 50
     d40:	30 f0       	brcs	.+12     	; 0xd4e <seqFadeFunc+0x104>
	led_dir = 1;
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	90 93 57 04 	sts	0x0457, r25
	if(timer <= 0 && led_dir) {
     d48:	88 23       	and	r24, r24
     d4a:	39 f0       	breq	.+14     	; 0xd5a <seqFadeFunc+0x110>
     d4c:	13 c0       	rjmp	.+38     	; 0xd74 <seqFadeFunc+0x12a>
     d4e:	81 11       	cpse	r24, r1
     d50:	11 c0       	rjmp	.+34     	; 0xd74 <seqFadeFunc+0x12a>
     d52:	80 91 57 04 	lds	r24, 0x0457
     d56:	88 23       	and	r24, r24
     d58:	69 f0       	breq	.+26     	; 0xd74 <seqFadeFunc+0x12a>
		color_i = (color_i+1)%numColors;
     d5a:	80 91 58 04 	lds	r24, 0x0458
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	60 91 20 01 	lds	r22, 0x0120
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodhi4>
     d6c:	80 93 58 04 	sts	0x0458, r24
		led_dir = 0;
     d70:	10 92 57 04 	sts	0x0457, r1
	}
}
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	08 95       	ret

00000d94 <seqSoftSwitchFunc>:

static void seqSoftSwitchFunc(color_t *leds, int num_leds)
{
     d94:	2f 92       	push	r2
     d96:	3f 92       	push	r3
     d98:	4f 92       	push	r4
     d9a:	5f 92       	push	r5
     d9c:	6f 92       	push	r6
     d9e:	7f 92       	push	r7
     da0:	8f 92       	push	r8
     da2:	9f 92       	push	r9
     da4:	af 92       	push	r10
     da6:	bf 92       	push	r11
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	2a 97       	sbiw	r28, 0x0a	; 10
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	1c 01       	movw	r2, r24
     dca:	8b 01       	movw	r16, r22
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	
	float k = (float)timer/time;
     dcc:	20 91 5b 04 	lds	r18, 0x045B
     dd0:	2a 87       	std	Y+10, r18	; 0x0a
     dd2:	62 2f       	mov	r22, r18
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	48 e4       	ldi	r20, 0x48	; 72
     de4:	52 e4       	ldi	r21, 0x42	; 66
     de6:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     dea:	69 83       	std	Y+1, r22	; 0x01
     dec:	7a 83       	std	Y+2, r23	; 0x02
     dee:	8b 83       	std	Y+3, r24	; 0x03
     df0:	9c 83       	std	Y+4, r25	; 0x04
	for(int i = 0; i < num_leds; i++)
     df2:	10 16       	cp	r1, r16
     df4:	11 06       	cpc	r1, r17
     df6:	0c f0       	brlt	.+2      	; 0xdfa <seqSoftSwitchFunc+0x66>
     df8:	b2 c0       	rjmp	.+356    	; 0xf5e <seqSoftSwitchFunc+0x1ca>
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
     dfa:	9b 01       	movw	r18, r22
     dfc:	ac 01       	movw	r20, r24
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	80 e8       	ldi	r24, 0x80	; 128
     e04:	9f e3       	ldi	r25, 0x3F	; 63
     e06:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__subsf3>
     e0a:	6d 83       	std	Y+5, r22	; 0x05
     e0c:	7e 83       	std	Y+6, r23	; 0x06
     e0e:	8f 83       	std	Y+7, r24	; 0x07
     e10:	98 87       	std	Y+8, r25	; 0x08
     e12:	80 91 5a 04 	lds	r24, 0x045A
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	fc 01       	movw	r30, r24
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	e0 50       	subi	r30, 0x00	; 0
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 80       	ld	r8, Z
     e28:	91 80       	ldd	r9, Z+1	; 0x01
     e2a:	a2 80       	ldd	r10, Z+2	; 0x02
     e2c:	b3 80       	ldd	r11, Z+3	; 0x03
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	60 91 20 01 	lds	r22, 0x0120
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodhi4>
     e3a:	fc 01       	movw	r30, r24
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	e0 50       	subi	r30, 0x00	; 0
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	c0 80       	ld	r12, Z
     e4a:	d1 80       	ldd	r13, Z+1	; 0x01
     e4c:	e2 80       	ldd	r14, Z+2	; 0x02
     e4e:	f3 80       	ldd	r15, Z+3	; 0x03
     e50:	c5 01       	movw	r24, r10
     e52:	b4 01       	movw	r22, r8
     e54:	77 27       	eor	r23, r23
     e56:	88 27       	eor	r24, r24
     e58:	99 27       	eor	r25, r25
     e5a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
     e62:	6d 81       	ldd	r22, Y+5	; 0x05
     e64:	7e 81       	ldd	r23, Y+6	; 0x06
     e66:	8f 81       	ldd	r24, Y+7	; 0x07
     e68:	98 85       	ldd	r25, Y+8	; 0x08
     e6a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     e6e:	2b 01       	movw	r4, r22
     e70:	3c 01       	movw	r6, r24
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	77 27       	eor	r23, r23
     e78:	88 27       	eor	r24, r24
     e7a:	99 27       	eor	r25, r25
     e7c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     e80:	29 81       	ldd	r18, Y+1	; 0x01
     e82:	3a 81       	ldd	r19, Y+2	; 0x02
     e84:	4b 81       	ldd	r20, Y+3	; 0x03
     e86:	5c 81       	ldd	r21, Y+4	; 0x04
     e88:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
     e90:	c3 01       	movw	r24, r6
     e92:	b2 01       	movw	r22, r4
     e94:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     e98:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     e9c:	69 87       	std	Y+9, r22	; 0x09
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
     e9e:	69 2d       	mov	r22, r9
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     eaa:	9b 01       	movw	r18, r22
     eac:	ac 01       	movw	r20, r24
     eae:	6d 81       	ldd	r22, Y+5	; 0x05
     eb0:	7e 81       	ldd	r23, Y+6	; 0x06
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     eba:	2b 01       	movw	r4, r22
     ebc:	3c 01       	movw	r6, r24
     ebe:	6d 2d       	mov	r22, r13
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     eca:	29 81       	ldd	r18, Y+1	; 0x01
     ecc:	3a 81       	ldd	r19, Y+2	; 0x02
     ece:	4b 81       	ldd	r20, Y+3	; 0x03
     ed0:	5c 81       	ldd	r21, Y+4	; 0x04
     ed2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	c3 01       	movw	r24, r6
     edc:	b2 01       	movw	r22, r4
     ede:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     ee2:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     ee6:	76 2e       	mov	r7, r22
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
     ee8:	6a 2d       	mov	r22, r10
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     ef4:	9b 01       	movw	r18, r22
     ef6:	ac 01       	movw	r20, r24
     ef8:	6d 81       	ldd	r22, Y+5	; 0x05
     efa:	7e 81       	ldd	r23, Y+6	; 0x06
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	98 85       	ldd	r25, Y+8	; 0x08
     f00:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     f04:	4b 01       	movw	r8, r22
     f06:	5c 01       	movw	r10, r24
     f08:	6e 2d       	mov	r22, r14
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatunsisf>
     f14:	29 81       	ldd	r18, Y+1	; 0x01
     f16:	3a 81       	ldd	r19, Y+2	; 0x02
     f18:	4b 81       	ldd	r20, Y+3	; 0x03
     f1a:	5c 81       	ldd	r21, Y+4	; 0x04
     f1c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	c5 01       	movw	r24, r10
     f26:	b4 01       	movw	r22, r8
     f28:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__addsf3>
     f2c:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
     f30:	f1 01       	movw	r30, r2
     f32:	32 96       	adiw	r30, 0x02	; 2
     f34:	00 0f       	add	r16, r16
     f36:	11 1f       	adc	r17, r17
     f38:	00 0f       	add	r16, r16
     f3a:	11 1f       	adc	r17, r17
     f3c:	0e 5f       	subi	r16, 0xFE	; 254
     f3e:	1f 4f       	sbci	r17, 0xFF	; 255
     f40:	20 0e       	add	r2, r16
     f42:	31 1e       	adc	r3, r17
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	df 01       	movw	r26, r30
     f4a:	11 97       	sbiw	r26, 0x01	; 1
	static uint8_t time = 50;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
     f4c:	8c 93       	st	X, r24
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
     f4e:	70 82       	st	Z, r7
     f50:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
     f52:	6c 93       	st	X, r22
     f54:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
     f56:	e2 15       	cp	r30, r2
     f58:	f3 05       	cpc	r31, r3
     f5a:	b1 f7       	brne	.-20     	; 0xf48 <seqSoftSwitchFunc+0x1b4>
     f5c:	9a 87       	std	Y+10, r25	; 0x0a
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
	}
	
	timer++;
     f5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	80 93 5b 04 	sts	0x045B, r24
	if(timer > time) {
     f66:	83 33       	cpi	r24, 0x33	; 51
     f68:	68 f0       	brcs	.+26     	; 0xf84 <seqSoftSwitchFunc+0x1f0>
		color_i = (color_i+1)%numColors;
     f6a:	80 91 5a 04 	lds	r24, 0x045A
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	60 91 20 01 	lds	r22, 0x0120
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodhi4>
     f7c:	80 93 5a 04 	sts	0x045A, r24
		timer = 0;
     f80:	10 92 5b 04 	sts	0x045B, r1
	}
}
     f84:	2a 96       	adiw	r28, 0x0a	; 10
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	7f 90       	pop	r7
     faa:	6f 90       	pop	r6
     fac:	5f 90       	pop	r5
     fae:	4f 90       	pop	r4
     fb0:	3f 90       	pop	r3
     fb2:	2f 90       	pop	r2
     fb4:	08 95       	ret

00000fb6 <seqStaticColor>:

static void seqStaticColor(color_t *leds, int num_leds)
{
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
	for(int i = 0; i < num_leds; i++)
     fba:	16 16       	cp	r1, r22
     fbc:	17 06       	cpc	r1, r23
     fbe:	b4 f4       	brge	.+44     	; 0xfec <seqStaticColor+0x36>
		leds[i].val = colors[0];
     fc0:	00 91 00 01 	lds	r16, 0x0100
     fc4:	10 91 01 01 	lds	r17, 0x0101
     fc8:	20 91 02 01 	lds	r18, 0x0102
     fcc:	30 91 03 01 	lds	r19, 0x0103
     fd0:	fc 01       	movw	r30, r24
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	86 0f       	add	r24, r22
     fdc:	97 1f       	adc	r25, r23
     fde:	01 93       	st	Z+, r16
     fe0:	11 93       	st	Z+, r17
     fe2:	21 93       	st	Z+, r18
     fe4:	31 93       	st	Z+, r19
	}
}

static void seqStaticColor(color_t *leds, int num_leds)
{
	for(int i = 0; i < num_leds; i++)
     fe6:	e8 17       	cp	r30, r24
     fe8:	f9 07       	cpc	r31, r25
     fea:	c9 f7       	brne	.-14     	; 0xfde <seqStaticColor+0x28>
		leds[i].val = colors[0];
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <seqSetFunction>:

// ------------------------------------------------------------------- DEFINITIONS

void seqSetFunction(seqType_t type)
{
	seqType = type;
     ff2:	80 93 5c 04 	sts	0x045C, r24
     ff6:	08 95       	ret

00000ff8 <seqUpdate>:
}

void seqUpdate(color_t *leds, int num_leds)
{
	functions[seqType](leds, num_leds);
     ff8:	e0 91 5c 04 	lds	r30, 0x045C
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	ef 5d       	subi	r30, 0xDF	; 223
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	01 90       	ld	r0, Z+
    1008:	f0 81       	ld	r31, Z
    100a:	e0 2d       	mov	r30, r0
    100c:	09 95       	icall
    100e:	08 95       	ret

00001010 <seqSetColorRGB>:
	colors[i] = c;
}

void seqSetColorRGB(uint8_t i, uint8_t r, uint8_t g, uint8_t b)
{
	if(i >= numColors)
    1010:	90 91 20 01 	lds	r25, 0x0120
    1014:	89 17       	cp	r24, r25
    1016:	60 f4       	brcc	.+24     	; 0x1030 <seqSetColorRGB+0x20>
	
	color_t color;
	color.rgb.r = r;
	color.rgb.b = b;
	color.rgb.g = g;
	colors[i] = color.val;
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	e0 50       	subi	r30, 0x00	; 0
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	20 83       	st	Z, r18
    102a:	61 83       	std	Z+1, r22	; 0x01
    102c:	42 83       	std	Z+2, r20	; 0x02
    102e:	13 82       	std	Z+3, r1	; 0x03
    1030:	08 95       	ret

00001032 <wsInit>:

// ------------------------------------------------------------------- DEFINITIONS

void wsInit()
{
	WS_DDR |= WS_BIT;
    1032:	53 9a       	sbi	0x0a, 3	; 10
    1034:	08 95       	ret

00001036 <wsSend>:
}

void wsSend(color_t *leds, int num_leds)
{
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	dc 01       	movw	r26, r24
    103e:	eb 01       	movw	r28, r22
	for(uint8_t j = 0; j < num_leds; j++)
    1040:	1c 16       	cp	r1, r28
    1042:	1d 06       	cpc	r1, r29
    1044:	34 f1       	brlt	.+76     	; 0x1092 <wsSend+0x5c>
    1046:	31 c0       	rjmp	.+98     	; 0x10aa <wsSend+0x74>
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1048:	40 81       	ld	r20, Z
    104a:	51 81       	ldd	r21, Z+1	; 0x01
    104c:	62 81       	ldd	r22, Z+2	; 0x02
    104e:	73 81       	ldd	r23, Z+3	; 0x03
    1050:	02 2e       	mov	r0, r18
    1052:	04 c0       	rjmp	.+8      	; 0x105c <wsSend+0x26>
    1054:	76 95       	lsr	r23
    1056:	67 95       	ror	r22
    1058:	57 95       	ror	r21
    105a:	47 95       	ror	r20
    105c:	0a 94       	dec	r0
    105e:	d2 f7       	brpl	.-12     	; 0x1054 <wsSend+0x1e>
    1060:	40 ff       	sbrs	r20, 0
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <wsSend+0x3c>
				WS_PORT |= WS_BIT;
    1064:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1066:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1068:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    106a:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    106c:	5b 9a       	sbi	0x0b, 3	; 11
				//WS_PORT |= WS_BIT;
				
				//WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
				WS_PORT &= ~WS_BIT;
    106e:	5b 98       	cbi	0x0b, 3	; 11
    1070:	06 c0       	rjmp	.+12     	; 0x107e <wsSend+0x48>
				} else {
				//WS_PORT |= WS_BIT;
				//WS_PORT |= WS_BIT;
				WS_PORT |= WS_BIT;
    1072:	5b 9a       	sbi	0x0b, 3	; 11
				
				WS_PORT &= ~WS_BIT;
    1074:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1076:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1078:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    107a:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    107c:	5b 98       	cbi	0x0b, 3	; 11
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	31 09       	sbc	r19, r1
    1082:	10 f7       	brcc	.-60     	; 0x1048 <wsSend+0x12>
	WS_DDR |= WS_BIT;
}

void wsSend(color_t *leds, int num_leds)
{
	for(uint8_t j = 0; j < num_leds; j++)
    1084:	9f 5f       	subi	r25, 0xFF	; 255
    1086:	29 2f       	mov	r18, r25
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	2c 17       	cp	r18, r28
    108c:	3d 07       	cpc	r19, r29
    108e:	24 f0       	brlt	.+8      	; 0x1098 <wsSend+0x62>
    1090:	0c c0       	rjmp	.+24     	; 0x10aa <wsSend+0x74>
    1092:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1094:	17 e1       	ldi	r17, 0x17	; 23
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	fd 01       	movw	r30, r26
    109a:	24 e0       	ldi	r18, 0x04	; 4
    109c:	92 9f       	mul	r25, r18
    109e:	e0 0d       	add	r30, r0
    10a0:	f1 1d       	adc	r31, r1
    10a2:	11 24       	eor	r1, r1
    10a4:	21 2f       	mov	r18, r17
    10a6:	38 2f       	mov	r19, r24
    10a8:	cf cf       	rjmp	.-98     	; 0x1048 <wsSend+0x12>
				WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
			}
		}
	}
	WS_PORT = 0;
    10aa:	1b b8       	out	0x0b, r1	; 11
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	08 95       	ret

000010b4 <__subsf3>:
    10b4:	50 58       	subi	r21, 0x80	; 128

000010b6 <__addsf3>:
    10b6:	bb 27       	eor	r27, r27
    10b8:	aa 27       	eor	r26, r26
    10ba:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__addsf3x>
    10be:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_round>
    10c2:	0e 94 ae 09 	call	0x135c	; 0x135c <__fp_pscA>
    10c6:	38 f0       	brcs	.+14     	; 0x10d6 <__addsf3+0x20>
    10c8:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_pscB>
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <__addsf3+0x20>
    10ce:	39 f4       	brne	.+14     	; 0x10de <__addsf3+0x28>
    10d0:	9f 3f       	cpi	r25, 0xFF	; 255
    10d2:	19 f4       	brne	.+6      	; 0x10da <__addsf3+0x24>
    10d4:	26 f4       	brtc	.+8      	; 0x10de <__addsf3+0x28>
    10d6:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_nan>
    10da:	0e f4       	brtc	.+2      	; 0x10de <__addsf3+0x28>
    10dc:	e0 95       	com	r30
    10de:	e7 fb       	bst	r30, 7
    10e0:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__fp_inf>

000010e4 <__addsf3x>:
    10e4:	e9 2f       	mov	r30, r25
    10e6:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_split3>
    10ea:	58 f3       	brcs	.-42     	; 0x10c2 <__addsf3+0xc>
    10ec:	ba 17       	cp	r27, r26
    10ee:	62 07       	cpc	r22, r18
    10f0:	73 07       	cpc	r23, r19
    10f2:	84 07       	cpc	r24, r20
    10f4:	95 07       	cpc	r25, r21
    10f6:	20 f0       	brcs	.+8      	; 0x1100 <__addsf3x+0x1c>
    10f8:	79 f4       	brne	.+30     	; 0x1118 <__addsf3x+0x34>
    10fa:	a6 f5       	brtc	.+104    	; 0x1164 <__addsf3x+0x80>
    10fc:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_zero>
    1100:	0e f4       	brtc	.+2      	; 0x1104 <__addsf3x+0x20>
    1102:	e0 95       	com	r30
    1104:	0b 2e       	mov	r0, r27
    1106:	ba 2f       	mov	r27, r26
    1108:	a0 2d       	mov	r26, r0
    110a:	0b 01       	movw	r0, r22
    110c:	b9 01       	movw	r22, r18
    110e:	90 01       	movw	r18, r0
    1110:	0c 01       	movw	r0, r24
    1112:	ca 01       	movw	r24, r20
    1114:	a0 01       	movw	r20, r0
    1116:	11 24       	eor	r1, r1
    1118:	ff 27       	eor	r31, r31
    111a:	59 1b       	sub	r21, r25
    111c:	99 f0       	breq	.+38     	; 0x1144 <__addsf3x+0x60>
    111e:	59 3f       	cpi	r21, 0xF9	; 249
    1120:	50 f4       	brcc	.+20     	; 0x1136 <__addsf3x+0x52>
    1122:	50 3e       	cpi	r21, 0xE0	; 224
    1124:	68 f1       	brcs	.+90     	; 0x1180 <__addsf3x+0x9c>
    1126:	1a 16       	cp	r1, r26
    1128:	f0 40       	sbci	r31, 0x00	; 0
    112a:	a2 2f       	mov	r26, r18
    112c:	23 2f       	mov	r18, r19
    112e:	34 2f       	mov	r19, r20
    1130:	44 27       	eor	r20, r20
    1132:	58 5f       	subi	r21, 0xF8	; 248
    1134:	f3 cf       	rjmp	.-26     	; 0x111c <__addsf3x+0x38>
    1136:	46 95       	lsr	r20
    1138:	37 95       	ror	r19
    113a:	27 95       	ror	r18
    113c:	a7 95       	ror	r26
    113e:	f0 40       	sbci	r31, 0x00	; 0
    1140:	53 95       	inc	r21
    1142:	c9 f7       	brne	.-14     	; 0x1136 <__addsf3x+0x52>
    1144:	7e f4       	brtc	.+30     	; 0x1164 <__addsf3x+0x80>
    1146:	1f 16       	cp	r1, r31
    1148:	ba 0b       	sbc	r27, r26
    114a:	62 0b       	sbc	r22, r18
    114c:	73 0b       	sbc	r23, r19
    114e:	84 0b       	sbc	r24, r20
    1150:	ba f0       	brmi	.+46     	; 0x1180 <__addsf3x+0x9c>
    1152:	91 50       	subi	r25, 0x01	; 1
    1154:	a1 f0       	breq	.+40     	; 0x117e <__addsf3x+0x9a>
    1156:	ff 0f       	add	r31, r31
    1158:	bb 1f       	adc	r27, r27
    115a:	66 1f       	adc	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	c2 f7       	brpl	.-16     	; 0x1152 <__addsf3x+0x6e>
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <__addsf3x+0x9c>
    1164:	ba 0f       	add	r27, r26
    1166:	62 1f       	adc	r22, r18
    1168:	73 1f       	adc	r23, r19
    116a:	84 1f       	adc	r24, r20
    116c:	48 f4       	brcc	.+18     	; 0x1180 <__addsf3x+0x9c>
    116e:	87 95       	ror	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f7 95       	ror	r31
    1178:	9e 3f       	cpi	r25, 0xFE	; 254
    117a:	08 f0       	brcs	.+2      	; 0x117e <__addsf3x+0x9a>
    117c:	b0 cf       	rjmp	.-160    	; 0x10de <__addsf3+0x28>
    117e:	93 95       	inc	r25
    1180:	88 0f       	add	r24, r24
    1182:	08 f0       	brcs	.+2      	; 0x1186 <__addsf3x+0xa2>
    1184:	99 27       	eor	r25, r25
    1186:	ee 0f       	add	r30, r30
    1188:	97 95       	ror	r25
    118a:	87 95       	ror	r24
    118c:	08 95       	ret

0000118e <__divsf3>:
    118e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__divsf3x>
    1192:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_round>
    1196:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_pscB>
    119a:	58 f0       	brcs	.+22     	; 0x11b2 <__divsf3+0x24>
    119c:	0e 94 ae 09 	call	0x135c	; 0x135c <__fp_pscA>
    11a0:	40 f0       	brcs	.+16     	; 0x11b2 <__divsf3+0x24>
    11a2:	29 f4       	brne	.+10     	; 0x11ae <__divsf3+0x20>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <__divsf3+0x24>
    11a8:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__fp_inf>
    11ac:	51 11       	cpse	r21, r1
    11ae:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>
    11b2:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_nan>

000011b6 <__divsf3x>:
    11b6:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_split3>
    11ba:	68 f3       	brcs	.-38     	; 0x1196 <__divsf3+0x8>

000011bc <__divsf3_pse>:
    11bc:	99 23       	and	r25, r25
    11be:	b1 f3       	breq	.-20     	; 0x11ac <__divsf3+0x1e>
    11c0:	55 23       	and	r21, r21
    11c2:	91 f3       	breq	.-28     	; 0x11a8 <__divsf3+0x1a>
    11c4:	95 1b       	sub	r25, r21
    11c6:	55 0b       	sbc	r21, r21
    11c8:	bb 27       	eor	r27, r27
    11ca:	aa 27       	eor	r26, r26
    11cc:	62 17       	cp	r22, r18
    11ce:	73 07       	cpc	r23, r19
    11d0:	84 07       	cpc	r24, r20
    11d2:	38 f0       	brcs	.+14     	; 0x11e2 <__divsf3_pse+0x26>
    11d4:	9f 5f       	subi	r25, 0xFF	; 255
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	22 0f       	add	r18, r18
    11da:	33 1f       	adc	r19, r19
    11dc:	44 1f       	adc	r20, r20
    11de:	aa 1f       	adc	r26, r26
    11e0:	a9 f3       	breq	.-22     	; 0x11cc <__divsf3_pse+0x10>
    11e2:	35 d0       	rcall	.+106    	; 0x124e <__divsf3_pse+0x92>
    11e4:	0e 2e       	mov	r0, r30
    11e6:	3a f0       	brmi	.+14     	; 0x11f6 <__divsf3_pse+0x3a>
    11e8:	e0 e8       	ldi	r30, 0x80	; 128
    11ea:	32 d0       	rcall	.+100    	; 0x1250 <__divsf3_pse+0x94>
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	e6 95       	lsr	r30
    11f2:	00 1c       	adc	r0, r0
    11f4:	ca f7       	brpl	.-14     	; 0x11e8 <__divsf3_pse+0x2c>
    11f6:	2b d0       	rcall	.+86     	; 0x124e <__divsf3_pse+0x92>
    11f8:	fe 2f       	mov	r31, r30
    11fa:	29 d0       	rcall	.+82     	; 0x124e <__divsf3_pse+0x92>
    11fc:	66 0f       	add	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	88 1f       	adc	r24, r24
    1202:	bb 1f       	adc	r27, r27
    1204:	26 17       	cp	r18, r22
    1206:	37 07       	cpc	r19, r23
    1208:	48 07       	cpc	r20, r24
    120a:	ab 07       	cpc	r26, r27
    120c:	b0 e8       	ldi	r27, 0x80	; 128
    120e:	09 f0       	breq	.+2      	; 0x1212 <__divsf3_pse+0x56>
    1210:	bb 0b       	sbc	r27, r27
    1212:	80 2d       	mov	r24, r0
    1214:	bf 01       	movw	r22, r30
    1216:	ff 27       	eor	r31, r31
    1218:	93 58       	subi	r25, 0x83	; 131
    121a:	5f 4f       	sbci	r21, 0xFF	; 255
    121c:	3a f0       	brmi	.+14     	; 0x122c <__divsf3_pse+0x70>
    121e:	9e 3f       	cpi	r25, 0xFE	; 254
    1220:	51 05       	cpc	r21, r1
    1222:	78 f0       	brcs	.+30     	; 0x1242 <__divsf3_pse+0x86>
    1224:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__fp_inf>
    1228:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>
    122c:	5f 3f       	cpi	r21, 0xFF	; 255
    122e:	e4 f3       	brlt	.-8      	; 0x1228 <__divsf3_pse+0x6c>
    1230:	98 3e       	cpi	r25, 0xE8	; 232
    1232:	d4 f3       	brlt	.-12     	; 0x1228 <__divsf3_pse+0x6c>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b7 95       	ror	r27
    123c:	f7 95       	ror	r31
    123e:	9f 5f       	subi	r25, 0xFF	; 255
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__divsf3_pse+0x78>
    1242:	88 0f       	add	r24, r24
    1244:	91 1d       	adc	r25, r1
    1246:	96 95       	lsr	r25
    1248:	87 95       	ror	r24
    124a:	97 f9       	bld	r25, 7
    124c:	08 95       	ret
    124e:	e1 e0       	ldi	r30, 0x01	; 1
    1250:	66 0f       	add	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	bb 1f       	adc	r27, r27
    1258:	62 17       	cp	r22, r18
    125a:	73 07       	cpc	r23, r19
    125c:	84 07       	cpc	r24, r20
    125e:	ba 07       	cpc	r27, r26
    1260:	20 f0       	brcs	.+8      	; 0x126a <__divsf3_pse+0xae>
    1262:	62 1b       	sub	r22, r18
    1264:	73 0b       	sbc	r23, r19
    1266:	84 0b       	sbc	r24, r20
    1268:	ba 0b       	sbc	r27, r26
    126a:	ee 1f       	adc	r30, r30
    126c:	88 f7       	brcc	.-30     	; 0x1250 <__divsf3_pse+0x94>
    126e:	e0 95       	com	r30
    1270:	08 95       	ret

00001272 <__fixunssfsi>:
    1272:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_splitA>
    1276:	88 f0       	brcs	.+34     	; 0x129a <__fixunssfsi+0x28>
    1278:	9f 57       	subi	r25, 0x7F	; 127
    127a:	98 f0       	brcs	.+38     	; 0x12a2 <__fixunssfsi+0x30>
    127c:	b9 2f       	mov	r27, r25
    127e:	99 27       	eor	r25, r25
    1280:	b7 51       	subi	r27, 0x17	; 23
    1282:	b0 f0       	brcs	.+44     	; 0x12b0 <__fixunssfsi+0x3e>
    1284:	e1 f0       	breq	.+56     	; 0x12be <__fixunssfsi+0x4c>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	1a f0       	brmi	.+6      	; 0x1296 <__fixunssfsi+0x24>
    1290:	ba 95       	dec	r27
    1292:	c9 f7       	brne	.-14     	; 0x1286 <__fixunssfsi+0x14>
    1294:	14 c0       	rjmp	.+40     	; 0x12be <__fixunssfsi+0x4c>
    1296:	b1 30       	cpi	r27, 0x01	; 1
    1298:	91 f0       	breq	.+36     	; 0x12be <__fixunssfsi+0x4c>
    129a:	0e 94 ef 09 	call	0x13de	; 0x13de <__fp_zero>
    129e:	b1 e0       	ldi	r27, 0x01	; 1
    12a0:	08 95       	ret
    12a2:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_zero>
    12a6:	67 2f       	mov	r22, r23
    12a8:	78 2f       	mov	r23, r24
    12aa:	88 27       	eor	r24, r24
    12ac:	b8 5f       	subi	r27, 0xF8	; 248
    12ae:	39 f0       	breq	.+14     	; 0x12be <__fixunssfsi+0x4c>
    12b0:	b9 3f       	cpi	r27, 0xF9	; 249
    12b2:	cc f3       	brlt	.-14     	; 0x12a6 <__fixunssfsi+0x34>
    12b4:	86 95       	lsr	r24
    12b6:	77 95       	ror	r23
    12b8:	67 95       	ror	r22
    12ba:	b3 95       	inc	r27
    12bc:	d9 f7       	brne	.-10     	; 0x12b4 <__fixunssfsi+0x42>
    12be:	3e f4       	brtc	.+14     	; 0x12ce <__fixunssfsi+0x5c>
    12c0:	90 95       	com	r25
    12c2:	80 95       	com	r24
    12c4:	70 95       	com	r23
    12c6:	61 95       	neg	r22
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__floatunsisf>:
    12d0:	e8 94       	clt
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <__floatsisf+0x12>

000012d4 <__floatsisf>:
    12d4:	97 fb       	bst	r25, 7
    12d6:	3e f4       	brtc	.+14     	; 0x12e6 <__floatsisf+0x12>
    12d8:	90 95       	com	r25
    12da:	80 95       	com	r24
    12dc:	70 95       	com	r23
    12de:	61 95       	neg	r22
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	8f 4f       	sbci	r24, 0xFF	; 255
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	99 23       	and	r25, r25
    12e8:	a9 f0       	breq	.+42     	; 0x1314 <__floatsisf+0x40>
    12ea:	f9 2f       	mov	r31, r25
    12ec:	96 e9       	ldi	r25, 0x96	; 150
    12ee:	bb 27       	eor	r27, r27
    12f0:	93 95       	inc	r25
    12f2:	f6 95       	lsr	r31
    12f4:	87 95       	ror	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b7 95       	ror	r27
    12fc:	f1 11       	cpse	r31, r1
    12fe:	f8 cf       	rjmp	.-16     	; 0x12f0 <__floatsisf+0x1c>
    1300:	fa f4       	brpl	.+62     	; 0x1340 <__floatsisf+0x6c>
    1302:	bb 0f       	add	r27, r27
    1304:	11 f4       	brne	.+4      	; 0x130a <__floatsisf+0x36>
    1306:	60 ff       	sbrs	r22, 0
    1308:	1b c0       	rjmp	.+54     	; 0x1340 <__floatsisf+0x6c>
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <__floatsisf+0x6c>
    1314:	88 23       	and	r24, r24
    1316:	11 f0       	breq	.+4      	; 0x131c <__floatsisf+0x48>
    1318:	96 e9       	ldi	r25, 0x96	; 150
    131a:	11 c0       	rjmp	.+34     	; 0x133e <__floatsisf+0x6a>
    131c:	77 23       	and	r23, r23
    131e:	21 f0       	breq	.+8      	; 0x1328 <__floatsisf+0x54>
    1320:	9e e8       	ldi	r25, 0x8E	; 142
    1322:	87 2f       	mov	r24, r23
    1324:	76 2f       	mov	r23, r22
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <__floatsisf+0x5e>
    1328:	66 23       	and	r22, r22
    132a:	71 f0       	breq	.+28     	; 0x1348 <__floatsisf+0x74>
    132c:	96 e8       	ldi	r25, 0x86	; 134
    132e:	86 2f       	mov	r24, r22
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	2a f0       	brmi	.+10     	; 0x1340 <__floatsisf+0x6c>
    1336:	9a 95       	dec	r25
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	da f7       	brpl	.-10     	; 0x1336 <__floatsisf+0x62>
    1340:	88 0f       	add	r24, r24
    1342:	96 95       	lsr	r25
    1344:	87 95       	ror	r24
    1346:	97 f9       	bld	r25, 7
    1348:	08 95       	ret

0000134a <__fp_inf>:
    134a:	97 f9       	bld	r25, 7
    134c:	9f 67       	ori	r25, 0x7F	; 127
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	08 95       	ret

00001356 <__fp_nan>:
    1356:	9f ef       	ldi	r25, 0xFF	; 255
    1358:	80 ec       	ldi	r24, 0xC0	; 192
    135a:	08 95       	ret

0000135c <__fp_pscA>:
    135c:	00 24       	eor	r0, r0
    135e:	0a 94       	dec	r0
    1360:	16 16       	cp	r1, r22
    1362:	17 06       	cpc	r1, r23
    1364:	18 06       	cpc	r1, r24
    1366:	09 06       	cpc	r0, r25
    1368:	08 95       	ret

0000136a <__fp_pscB>:
    136a:	00 24       	eor	r0, r0
    136c:	0a 94       	dec	r0
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	14 06       	cpc	r1, r20
    1374:	05 06       	cpc	r0, r21
    1376:	08 95       	ret

00001378 <__fp_round>:
    1378:	09 2e       	mov	r0, r25
    137a:	03 94       	inc	r0
    137c:	00 0c       	add	r0, r0
    137e:	11 f4       	brne	.+4      	; 0x1384 <__fp_round+0xc>
    1380:	88 23       	and	r24, r24
    1382:	52 f0       	brmi	.+20     	; 0x1398 <__fp_round+0x20>
    1384:	bb 0f       	add	r27, r27
    1386:	40 f4       	brcc	.+16     	; 0x1398 <__fp_round+0x20>
    1388:	bf 2b       	or	r27, r31
    138a:	11 f4       	brne	.+4      	; 0x1390 <__fp_round+0x18>
    138c:	60 ff       	sbrs	r22, 0
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <__fp_round+0x20>
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	08 95       	ret

0000139a <__fp_split3>:
    139a:	57 fd       	sbrc	r21, 7
    139c:	90 58       	subi	r25, 0x80	; 128
    139e:	44 0f       	add	r20, r20
    13a0:	55 1f       	adc	r21, r21
    13a2:	59 f0       	breq	.+22     	; 0x13ba <__fp_splitA+0x10>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <__fp_splitA+0x1a>
    13a8:	47 95       	ror	r20

000013aa <__fp_splitA>:
    13aa:	88 0f       	add	r24, r24
    13ac:	97 fb       	bst	r25, 7
    13ae:	99 1f       	adc	r25, r25
    13b0:	61 f0       	breq	.+24     	; 0x13ca <__fp_splitA+0x20>
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	79 f0       	breq	.+30     	; 0x13d4 <__fp_splitA+0x2a>
    13b6:	87 95       	ror	r24
    13b8:	08 95       	ret
    13ba:	12 16       	cp	r1, r18
    13bc:	13 06       	cpc	r1, r19
    13be:	14 06       	cpc	r1, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	f2 cf       	rjmp	.-28     	; 0x13a8 <__fp_split3+0xe>
    13c4:	46 95       	lsr	r20
    13c6:	f1 df       	rcall	.-30     	; 0x13aa <__fp_splitA>
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <__fp_splitA+0x30>
    13ca:	16 16       	cp	r1, r22
    13cc:	17 06       	cpc	r1, r23
    13ce:	18 06       	cpc	r1, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	f1 cf       	rjmp	.-30     	; 0x13b6 <__fp_splitA+0xc>
    13d4:	86 95       	lsr	r24
    13d6:	71 05       	cpc	r23, r1
    13d8:	61 05       	cpc	r22, r1
    13da:	08 94       	sec
    13dc:	08 95       	ret

000013de <__fp_zero>:
    13de:	e8 94       	clt

000013e0 <__fp_szero>:
    13e0:	bb 27       	eor	r27, r27
    13e2:	66 27       	eor	r22, r22
    13e4:	77 27       	eor	r23, r23
    13e6:	cb 01       	movw	r24, r22
    13e8:	97 f9       	bld	r25, 7
    13ea:	08 95       	ret

000013ec <__mulsf3>:
    13ec:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3x>
    13f0:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_round>
    13f4:	0e 94 ae 09 	call	0x135c	; 0x135c <__fp_pscA>
    13f8:	38 f0       	brcs	.+14     	; 0x1408 <__mulsf3+0x1c>
    13fa:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_pscB>
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__mulsf3+0x1c>
    1400:	95 23       	and	r25, r21
    1402:	11 f0       	breq	.+4      	; 0x1408 <__mulsf3+0x1c>
    1404:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__fp_inf>
    1408:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_nan>
    140c:	11 24       	eor	r1, r1
    140e:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>

00001412 <__mulsf3x>:
    1412:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_split3>
    1416:	70 f3       	brcs	.-36     	; 0x13f4 <__mulsf3+0x8>

00001418 <__mulsf3_pse>:
    1418:	95 9f       	mul	r25, r21
    141a:	c1 f3       	breq	.-16     	; 0x140c <__mulsf3+0x20>
    141c:	95 0f       	add	r25, r21
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	55 1f       	adc	r21, r21
    1422:	62 9f       	mul	r22, r18
    1424:	f0 01       	movw	r30, r0
    1426:	72 9f       	mul	r23, r18
    1428:	bb 27       	eor	r27, r27
    142a:	f0 0d       	add	r31, r0
    142c:	b1 1d       	adc	r27, r1
    142e:	63 9f       	mul	r22, r19
    1430:	aa 27       	eor	r26, r26
    1432:	f0 0d       	add	r31, r0
    1434:	b1 1d       	adc	r27, r1
    1436:	aa 1f       	adc	r26, r26
    1438:	64 9f       	mul	r22, r20
    143a:	66 27       	eor	r22, r22
    143c:	b0 0d       	add	r27, r0
    143e:	a1 1d       	adc	r26, r1
    1440:	66 1f       	adc	r22, r22
    1442:	82 9f       	mul	r24, r18
    1444:	22 27       	eor	r18, r18
    1446:	b0 0d       	add	r27, r0
    1448:	a1 1d       	adc	r26, r1
    144a:	62 1f       	adc	r22, r18
    144c:	73 9f       	mul	r23, r19
    144e:	b0 0d       	add	r27, r0
    1450:	a1 1d       	adc	r26, r1
    1452:	62 1f       	adc	r22, r18
    1454:	83 9f       	mul	r24, r19
    1456:	a0 0d       	add	r26, r0
    1458:	61 1d       	adc	r22, r1
    145a:	22 1f       	adc	r18, r18
    145c:	74 9f       	mul	r23, r20
    145e:	33 27       	eor	r19, r19
    1460:	a0 0d       	add	r26, r0
    1462:	61 1d       	adc	r22, r1
    1464:	23 1f       	adc	r18, r19
    1466:	84 9f       	mul	r24, r20
    1468:	60 0d       	add	r22, r0
    146a:	21 1d       	adc	r18, r1
    146c:	82 2f       	mov	r24, r18
    146e:	76 2f       	mov	r23, r22
    1470:	6a 2f       	mov	r22, r26
    1472:	11 24       	eor	r1, r1
    1474:	9f 57       	subi	r25, 0x7F	; 127
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	9a f0       	brmi	.+38     	; 0x14a0 <__mulsf3_pse+0x88>
    147a:	f1 f0       	breq	.+60     	; 0x14b8 <__mulsf3_pse+0xa0>
    147c:	88 23       	and	r24, r24
    147e:	4a f0       	brmi	.+18     	; 0x1492 <__mulsf3_pse+0x7a>
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	bb 1f       	adc	r27, r27
    1486:	66 1f       	adc	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	91 50       	subi	r25, 0x01	; 1
    148e:	50 40       	sbci	r21, 0x00	; 0
    1490:	a9 f7       	brne	.-22     	; 0x147c <__mulsf3_pse+0x64>
    1492:	9e 3f       	cpi	r25, 0xFE	; 254
    1494:	51 05       	cpc	r21, r1
    1496:	80 f0       	brcs	.+32     	; 0x14b8 <__mulsf3_pse+0xa0>
    1498:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__fp_inf>
    149c:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_szero>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	e4 f3       	brlt	.-8      	; 0x149c <__mulsf3_pse+0x84>
    14a4:	98 3e       	cpi	r25, 0xE8	; 232
    14a6:	d4 f3       	brlt	.-12     	; 0x149c <__mulsf3_pse+0x84>
    14a8:	86 95       	lsr	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	b7 95       	ror	r27
    14b0:	f7 95       	ror	r31
    14b2:	e7 95       	ror	r30
    14b4:	9f 5f       	subi	r25, 0xFF	; 255
    14b6:	c1 f7       	brne	.-16     	; 0x14a8 <__mulsf3_pse+0x90>
    14b8:	fe 2b       	or	r31, r30
    14ba:	88 0f       	add	r24, r24
    14bc:	91 1d       	adc	r25, r1
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret

000014c6 <__divmodhi4>:
    14c6:	97 fb       	bst	r25, 7
    14c8:	07 2e       	mov	r0, r23
    14ca:	16 f4       	brtc	.+4      	; 0x14d0 <__divmodhi4+0xa>
    14cc:	00 94       	com	r0
    14ce:	07 d0       	rcall	.+14     	; 0x14de <__divmodhi4_neg1>
    14d0:	77 fd       	sbrc	r23, 7
    14d2:	09 d0       	rcall	.+18     	; 0x14e6 <__divmodhi4_neg2>
    14d4:	0e 94 96 0a 	call	0x152c	; 0x152c <__udivmodhi4>
    14d8:	07 fc       	sbrc	r0, 7
    14da:	05 d0       	rcall	.+10     	; 0x14e6 <__divmodhi4_neg2>
    14dc:	3e f4       	brtc	.+14     	; 0x14ec <__divmodhi4_exit>

000014de <__divmodhi4_neg1>:
    14de:	90 95       	com	r25
    14e0:	81 95       	neg	r24
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	08 95       	ret

000014e6 <__divmodhi4_neg2>:
    14e6:	70 95       	com	r23
    14e8:	61 95       	neg	r22
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255

000014ec <__divmodhi4_exit>:
    14ec:	08 95       	ret

000014ee <__divmodsi4>:
    14ee:	05 2e       	mov	r0, r21
    14f0:	97 fb       	bst	r25, 7
    14f2:	1e f4       	brtc	.+6      	; 0x14fa <__divmodsi4+0xc>
    14f4:	00 94       	com	r0
    14f6:	0e 94 8e 0a 	call	0x151c	; 0x151c <__negsi2>
    14fa:	57 fd       	sbrc	r21, 7
    14fc:	07 d0       	rcall	.+14     	; 0x150c <__divmodsi4_neg2>
    14fe:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__udivmodsi4>
    1502:	07 fc       	sbrc	r0, 7
    1504:	03 d0       	rcall	.+6      	; 0x150c <__divmodsi4_neg2>
    1506:	4e f4       	brtc	.+18     	; 0x151a <__divmodsi4_exit>
    1508:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__negsi2>

0000150c <__divmodsi4_neg2>:
    150c:	50 95       	com	r21
    150e:	40 95       	com	r20
    1510:	30 95       	com	r19
    1512:	21 95       	neg	r18
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	4f 4f       	sbci	r20, 0xFF	; 255
    1518:	5f 4f       	sbci	r21, 0xFF	; 255

0000151a <__divmodsi4_exit>:
    151a:	08 95       	ret

0000151c <__negsi2>:
    151c:	90 95       	com	r25
    151e:	80 95       	com	r24
    1520:	70 95       	com	r23
    1522:	61 95       	neg	r22
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	08 95       	ret

0000152c <__udivmodhi4>:
    152c:	aa 1b       	sub	r26, r26
    152e:	bb 1b       	sub	r27, r27
    1530:	51 e1       	ldi	r21, 0x11	; 17
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <__udivmodhi4_ep>

00001534 <__udivmodhi4_loop>:
    1534:	aa 1f       	adc	r26, r26
    1536:	bb 1f       	adc	r27, r27
    1538:	a6 17       	cp	r26, r22
    153a:	b7 07       	cpc	r27, r23
    153c:	10 f0       	brcs	.+4      	; 0x1542 <__udivmodhi4_ep>
    153e:	a6 1b       	sub	r26, r22
    1540:	b7 0b       	sbc	r27, r23

00001542 <__udivmodhi4_ep>:
    1542:	88 1f       	adc	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	5a 95       	dec	r21
    1548:	a9 f7       	brne	.-22     	; 0x1534 <__udivmodhi4_loop>
    154a:	80 95       	com	r24
    154c:	90 95       	com	r25
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	08 95       	ret

00001554 <__udivmodsi4>:
    1554:	a1 e2       	ldi	r26, 0x21	; 33
    1556:	1a 2e       	mov	r1, r26
    1558:	aa 1b       	sub	r26, r26
    155a:	bb 1b       	sub	r27, r27
    155c:	fd 01       	movw	r30, r26
    155e:	0d c0       	rjmp	.+26     	; 0x157a <__udivmodsi4_ep>

00001560 <__udivmodsi4_loop>:
    1560:	aa 1f       	adc	r26, r26
    1562:	bb 1f       	adc	r27, r27
    1564:	ee 1f       	adc	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	a2 17       	cp	r26, r18
    156a:	b3 07       	cpc	r27, r19
    156c:	e4 07       	cpc	r30, r20
    156e:	f5 07       	cpc	r31, r21
    1570:	20 f0       	brcs	.+8      	; 0x157a <__udivmodsi4_ep>
    1572:	a2 1b       	sub	r26, r18
    1574:	b3 0b       	sbc	r27, r19
    1576:	e4 0b       	sbc	r30, r20
    1578:	f5 0b       	sbc	r31, r21

0000157a <__udivmodsi4_ep>:
    157a:	66 1f       	adc	r22, r22
    157c:	77 1f       	adc	r23, r23
    157e:	88 1f       	adc	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	1a 94       	dec	r1
    1584:	69 f7       	brne	.-38     	; 0x1560 <__udivmodsi4_loop>
    1586:	60 95       	com	r22
    1588:	70 95       	com	r23
    158a:	80 95       	com	r24
    158c:	90 95       	com	r25
    158e:	9b 01       	movw	r18, r22
    1590:	ac 01       	movw	r20, r24
    1592:	bd 01       	movw	r22, r26
    1594:	cf 01       	movw	r24, r30
    1596:	08 95       	ret

00001598 <_exit>:
    1598:	f8 94       	cli

0000159a <__stop_program>:
    159a:	ff cf       	rjmp	.-2      	; 0x159a <__stop_program>
