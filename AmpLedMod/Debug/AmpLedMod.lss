
AmpLedMod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  0080010e  0080010e  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001120  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054a  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bd  00000000  00000000  00001b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000020e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  9e:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
		}
	}
	
	len = RING_BUF_AT(ringBufferReadPos+1);
	RING_BUF_INC(ringBufferReadPos);
	RING_BUF_INC(ringBufferReadPos);
  a6:	1f 92       	push	r1
	if(len > max_len)
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
  be:	20 91 0f 01 	lds	r18, 0x010F
	{
		tmp = RING_BUF_AT(ringBufferReadPos);
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	c9 01       	movw	r24, r18
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 78       	andi	r25, 0x80	; 128
		checksum += tmp;
  ca:	99 23       	and	r25, r25
		data[i] = tmp;
  cc:	1c f4       	brge	.+6      	; 0xd4 <__vector_18+0x2e>
		RING_BUF_INC(ringBufferReadPos);
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	9f 6f       	ori	r25, 0xFF	; 255
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	80 93 0e 01 	sts	0x010E, r24
  d8:	40 91 10 01 	lds	r20, 0x0110
  dc:	48 17       	cp	r20, r24
  de:	41 f0       	breq	.+16     	; 0xf0 <__vector_18+0x4a>
  e0:	90 91 c6 00 	lds	r25, 0x00C6
	if(len > max_len)
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
  e4:	f9 01       	movw	r30, r18
  e6:	ef 5e       	subi	r30, 0xEF	; 239
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	90 83       	st	Z, r25
		tmp = RING_BUF_AT(ringBufferReadPos);
		checksum += tmp;
		data[i] = tmp;
		RING_BUF_INC(ringBufferReadPos);
	}
	if(checksum == RING_BUF_AT(ringBufferReadPos)) {
  ec:	80 93 0f 01 	sts	0x010F, r24
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	4f 91       	pop	r20
  fa:	3f 91       	pop	r19
  fc:	2f 91       	pop	r18
		RING_BUF_INC(ringBufferReadPos);
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <lcdSend>:
	LCD_PORT_D &= ~LCD_DB_MASK;
	LCD_PORT_D |= (data & 0x0F) << LCD_DB4;
	LCD_FLUSH;
	#else
	/* For 8-bit simple mode. */
	LCD_PORT_D = data;
 108:	8b b9       	out	0x0b, r24	; 11
	LCD_FLUSH;
 10a:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f ec       	ldi	r24, 0xCF	; 207
 10e:	97 e0       	ldi	r25, 0x07	; 7
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcdSend+0x8>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcdSend+0xe>
 116:	00 00       	nop
 118:	41 98       	cbi	0x08, 1	; 8
 11a:	8f ec       	ldi	r24, 0xCF	; 207
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcdSend+0x16>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcdSend+0x1c>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <lcdInit>:

// ----------------------------------------------------------------------- Definitions

void lcdInit()
{
	LCD_DDR_D |= LCD_DB_MASK;
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8a b9       	out	0x0a, r24	; 10
	LCD_DDR_C |= LCD_RS_BIT | LCD_E_BIT;
 12e:	87 b1       	in	r24, 0x07	; 7
 130:	83 60       	ori	r24, 0x03	; 3
 132:	87 b9       	out	0x07, r24	; 7
	
	/* Initialize LCD. */
	LCD_PORT_D &= ~(LCD_DB_MASK);
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	1b b8       	out	0x0b, r1	; 11
	LCD_PORT_C &= ~LCD_RS_BIT;
 138:	40 98       	cbi	0x08, 0	; 8
	LCD_PORT_D |= (LCD_8_BIT_DATA_MODE << LCD_DB4) | LCD_DB5_BIT;
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	80 63       	ori	r24, 0x30	; 48
 13e:	8b b9       	out	0x0b, r24	; 11
	LCD_FLUSH;
 140:	41 9a       	sbi	0x08, 1	; 8
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcdInit+0x1e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcdInit+0x24>
 14c:	00 00       	nop
 14e:	41 98       	cbi	0x08, 1	; 8
 150:	8f ec       	ldi	r24, 0xCF	; 207
 152:	97 e0       	ldi	r25, 0x07	; 7
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcdInit+0x2c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcdInit+0x32>
 15a:	00 00       	nop
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	97 e2       	ldi	r25, 0x27	; 39
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcdInit+0x38>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcdInit+0x3e>
 166:	00 00       	nop
	_delay_ms(5);
	LCD_FLUSH;
 168:	41 9a       	sbi	0x08, 1	; 8
 16a:	8f ec       	ldi	r24, 0xCF	; 207
 16c:	97 e0       	ldi	r25, 0x07	; 7
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcdInit+0x46>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcdInit+0x4c>
 174:	00 00       	nop
 176:	41 98       	cbi	0x08, 1	; 8
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <lcdInit+0x54>
 180:	00 c0       	rjmp	.+0      	; 0x182 <lcdInit+0x5a>
 182:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	8f e8       	ldi	r24, 0x8F	; 143
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcdInit+0x60>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcdInit+0x66>
 18e:	00 00       	nop
	_delay_us(200);
	LCD_FLUSH;
 190:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f ec       	ldi	r24, 0xCF	; 207
 194:	97 e0       	ldi	r25, 0x07	; 7
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcdInit+0x6e>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcdInit+0x74>
 19c:	00 00       	nop
 19e:	41 98       	cbi	0x08, 1	; 8
 1a0:	8f ec       	ldi	r24, 0xCF	; 207
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcdInit+0x7c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcdInit+0x82>
 1aa:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f e8       	ldi	r24, 0x8F	; 143
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcdInit+0x88>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcdInit+0x8e>
 1b6:	00 00       	nop
 1b8:	08 95       	ret

000001ba <lcdCommand>:
	_delay_us(200);
}

void lcdCommand(uint8_t cmd)
{
	LCD_PORT_C &= ~LCD_RS_BIT;
 1ba:	40 98       	cbi	0x08, 0	; 8
	lcdSend(cmd);
 1bc:	0e 94 84 00 	call	0x108	; 0x108 <lcdSend>
 1c0:	08 95       	ret

000001c2 <lcdClear>:
}

void lcdClear()
{
	lcdCommand(LCD_CMD_CLEAR);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcdCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8f e9       	ldi	r24, 0x9F	; 159
 1ca:	9f e0       	ldi	r25, 0x0F	; 15
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcdClear+0xa>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcdClear+0x10>
 1d2:	00 00       	nop
 1d4:	08 95       	ret

000001d6 <lcdSetEntryMode>:
	lcdCommand(LCD_CMD_RETURN_HOME);
	_delay_ms(2);
}

void lcdSetEntryMode(ELcdDirection dir, ELcdState shift)
{
 1d6:	64 60       	ori	r22, 0x04	; 4
	lcdCommand(LCD_CMD_ENTRY_MODE | (dir<<1) | shift);
 1d8:	88 0f       	add	r24, r24
 1da:	86 2b       	or	r24, r22
 1dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcdCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	80 ea       	ldi	r24, 0xA0	; 160
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcdSetEntryMode+0xc>
 1e6:	08 95       	ret

000001e8 <lcdSetDisplay>:
	_delay_us(60);
}

void lcdSetDisplay(ELcdState disp_on, ELcdState cursor_on, ELcdState blink_on)
{
 1e8:	48 60       	ori	r20, 0x08	; 8
	lcdCommand(LCD_CMD_DISPLAY | (disp_on<<2) | (cursor_on<<1) | blink_on);
 1ea:	66 0f       	add	r22, r22
 1ec:	46 2b       	or	r20, r22
 1ee:	24 e0       	ldi	r18, 0x04	; 4
 1f0:	82 9f       	mul	r24, r18
 1f2:	c0 01       	movw	r24, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	84 2b       	or	r24, r20
 1f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcdCommand>
 1fc:	80 ea       	ldi	r24, 0xA0	; 160
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcdSetDisplay+0x16>
 202:	08 95       	ret

00000204 <lcdFunctionSet>:
	_delay_us(60);
}

void lcdFunctionSet(ELcdDataBits bits8, ELcdLines line2, ELcdFont font)
{
	lcdCommand(LCD_CMD_FUNCTION_SET | (bits8<<4) | (line2<<3) | (font<<2));
 204:	44 0f       	add	r20, r20
 206:	44 0f       	add	r20, r20
 208:	40 62       	ori	r20, 0x20	; 32
 20a:	66 0f       	add	r22, r22
 20c:	66 0f       	add	r22, r22
 20e:	66 0f       	add	r22, r22
 210:	64 2b       	or	r22, r20
 212:	20 e1       	ldi	r18, 0x10	; 16
 214:	82 9f       	mul	r24, r18
 216:	c0 01       	movw	r24, r0
 218:	11 24       	eor	r1, r1
 21a:	86 2b       	or	r24, r22
 21c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcdCommand>
 220:	80 ea       	ldi	r24, 0xA0	; 160
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <lcdFunctionSet+0x1e>
 226:	08 95       	ret

00000228 <lcdPrintChar>:
	_delay_us(60);
}

void lcdPrintChar(const char c)
{
	LCD_PORT_C |= LCD_RS_BIT;
 228:	40 9a       	sbi	0x08, 0	; 8
	lcdSend(c);
 22a:	0e 94 84 00 	call	0x108	; 0x108 <lcdSend>
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <lcdPrintChar+0x8>
 234:	08 95       	ret

00000236 <lcdPrintStr>:
	_delay_us(60);
}

void lcdPrintStr(const char *str)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
	while(*str) {
 23c:	88 81       	ld	r24, Y
 23e:	88 23       	and	r24, r24
 240:	31 f0       	breq	.+12     	; 0x24e <lcdPrintStr+0x18>
 242:	21 96       	adiw	r28, 0x01	; 1
		lcdPrintChar(*str++);
 244:	0e 94 14 01 	call	0x228	; 0x228 <lcdPrintChar>
	_delay_us(60);
}

void lcdPrintStr(const char *str)
{
	while(*str) {
 248:	89 91       	ld	r24, Y+
 24a:	81 11       	cpse	r24, r1
 24c:	fb cf       	rjmp	.-10     	; 0x244 <lcdPrintStr+0xe>
		lcdPrintChar(*str++);
	}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <main>:

// ----------------------------------------------------------------------- Definitions

int main(void)
{
	lcdInit();
 254:	0e 94 94 00 	call	0x128	; 0x128 <lcdInit>
	/* Set 4 bit data. */
	lcdFunctionSet(eLcd8Bits, eLcd2Lines, eLcdFont5x8);
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 02 01 	call	0x204	; 0x204 <lcdFunctionSet>
	/* Entry mode (incremental). */
	lcdSetEntryMode(eLcdRight, eDisabled);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdSetEntryMode>
	/* Clear display. */
	lcdClear();
 26a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdClear>
	/* Display on, cursor on, blink on. */
	lcdSetDisplay(eEnabled, eEnabled, eEnabled);
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcdSetDisplay>
	
	char *str = "Hello World!";
	lcdPrintStr(str);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 1b 01 	call	0x236	; 0x236 <lcdPrintStr>
	lcdSetEntryMode(1, 1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcdSetEntryMode>
 288:	0f 2e       	mov	r0, r31
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ef 2e       	mov	r14, r31
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	ff 2e       	mov	r15, r31
 292:	f0 2d       	mov	r31, r0
 294:	0c e0       	ldi	r16, 0x0C	; 12
 296:	11 e0       	ldi	r17, 0x01	; 1
 298:	e7 01       	movw	r28, r14
	
	int len = strlen(str);
	while(1) {
		for(int i = 0; i < len; i++) {
			lcdPrintChar(str[i]);
 29a:	89 91       	ld	r24, Y+
 29c:	0e 94 14 01 	call	0x228	; 0x228 <lcdPrintChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	84 e3       	ldi	r24, 0x34	; 52
 2a4:	9c e0       	ldi	r25, 0x0C	; 12
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x52>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x5c>
 2b0:	00 00       	nop
	lcdPrintStr(str);
	lcdSetEntryMode(1, 1);
	
	int len = strlen(str);
	while(1) {
		for(int i = 0; i < len; i++) {
 2b2:	c0 17       	cp	r28, r16
 2b4:	d1 07       	cpc	r29, r17
 2b6:	89 f7       	brne	.-30     	; 0x29a <main+0x46>
 2b8:	ef cf       	rjmp	.-34     	; 0x298 <main+0x44>

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
