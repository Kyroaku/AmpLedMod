
AmpLedMod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  0000165c  000016f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000165c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ad  0080020c  0080020c  000017fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa3  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  00002923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a4  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00003614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000440  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e35  00000000  00000000  00003e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004c4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3b       	cpi	r26, 0xB9	; 185
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 40 01 	call	0x280	; 0x280 <main>
      9e:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <bluetoothGetFrame>:
static uint8_t ringBufferReadPos = 0;
static uint8_t ringBufferWritePos = 0;
static uint8_t ringBufferTmp = 0;

int8_t bluetoothGetFrame(uint8_t *frame)
{
      a6:	fc 01       	movw	r30, r24
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
      a8:	20 91 0e 02 	lds	r18, 0x020E
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	40 91 0d 02 	lds	r20, 0x020D
      b2:	50 e0       	ldi	r21, 0x00	; 0
      b4:	42 1b       	sub	r20, r18
      b6:	53 0b       	sbc	r21, r19
	if(len < 0) {
      b8:	0a f0       	brmi	.+2      	; 0xbc <bluetoothGetFrame+0x16>
      ba:	95 c0       	rjmp	.+298    	; 0x1e6 <bluetoothGetFrame+0x140>
		len += RING_BUFFER_SIZE;
      bc:	53 95       	inc	r21
	}
	if(len < 2) {
      be:	42 30       	cpi	r20, 0x02	; 2
      c0:	51 05       	cpc	r21, r1
      c2:	0c f4       	brge	.+2      	; 0xc6 <bluetoothGetFrame+0x20>
      c4:	8c c0       	rjmp	.+280    	; 0x1de <bluetoothGetFrame+0x138>
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
	{
		/* Look for start byte. */
		if(RING_BUF_AT(ringBufferReadPos) == 0xFF) {
      c6:	d9 01       	movw	r26, r18
      c8:	a1 5f       	subi	r26, 0xF1	; 241
      ca:	bd 4f       	sbci	r27, 0xFD	; 253
      cc:	8c 91       	ld	r24, X
      ce:	8f 3f       	cpi	r24, 0xFF	; 255
      d0:	b9 f4       	brne	.+46     	; 0x100 <bluetoothGetFrame+0x5a>
      d2:	09 c0       	rjmp	.+18     	; 0xe6 <bluetoothGetFrame+0x40>
      d4:	33 27       	eor	r19, r19
      d6:	d9 01       	movw	r26, r18
      d8:	a1 5f       	subi	r26, 0xF1	; 241
      da:	bd 4f       	sbci	r27, 0xFD	; 253
      dc:	9c 91       	ld	r25, X
      de:	9f 3f       	cpi	r25, 0xFF	; 255
      e0:	79 f4       	brne	.+30     	; 0x100 <bluetoothGetFrame+0x5a>
      e2:	80 93 0e 02 	sts	0x020E, r24
			/* Check if whole frame is in ring buffer. */
			if(len-2 >= RING_BUF_AT(ringBufferReadPos+1)) {
      e6:	42 50       	subi	r20, 0x02	; 2
      e8:	51 09       	sbc	r21, r1
      ea:	d9 01       	movw	r26, r18
      ec:	a1 5f       	subi	r26, 0xF1	; 241
      ee:	bd 4f       	sbci	r27, 0xFD	; 253
      f0:	11 96       	adiw	r26, 0x01	; 1
      f2:	8c 91       	ld	r24, X
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	48 17       	cp	r20, r24
      f8:	59 07       	cpc	r21, r25
      fa:	a4 f4       	brge	.+40     	; 0x124 <bluetoothGetFrame+0x7e>
				break;
			} else {
				/* Frame is not received yet. */
				return 0;
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	08 95       	ret
			}
		} else {
			RING_BUF_INC(ringBufferReadPos);
     100:	2f 5f       	subi	r18, 0xFF	; 255
     102:	3f 4f       	sbci	r19, 0xFF	; 255
     104:	30 78       	andi	r19, 0x80	; 128
     106:	33 23       	and	r19, r19
     108:	2c f4       	brge	.+10     	; 0x114 <bluetoothGetFrame+0x6e>
     10a:	21 50       	subi	r18, 0x01	; 1
     10c:	31 09       	sbc	r19, r1
     10e:	3f 6f       	ori	r19, 0xFF	; 255
     110:	2f 5f       	subi	r18, 0xFF	; 255
     112:	3f 4f       	sbci	r19, 0xFF	; 255
     114:	82 2f       	mov	r24, r18
			len--;
     116:	41 50       	subi	r20, 0x01	; 1
     118:	51 09       	sbc	r21, r1
	if(len < 2) {
		return 0;
	}
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
     11a:	42 30       	cpi	r20, 0x02	; 2
     11c:	51 05       	cpc	r21, r1
     11e:	d4 f6       	brge	.-76     	; 0xd4 <bluetoothGetFrame+0x2e>
     120:	20 93 0e 02 	sts	0x020E, r18
			RING_BUF_INC(ringBufferReadPos);
			len--;
		}
	}
	
	len = RING_BUF_AT(ringBufferReadPos+1);
     124:	80 91 0e 02 	lds	r24, 0x020E
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	01 96       	adiw	r24, 0x01	; 1
     12c:	dc 01       	movw	r26, r24
     12e:	a1 5f       	subi	r26, 0xF1	; 241
     130:	bd 4f       	sbci	r27, 0xFD	; 253
     132:	4c 91       	ld	r20, X
	uint8_t checksum = len;
	RING_BUF_INC(ringBufferReadPos);
     134:	90 78       	andi	r25, 0x80	; 128
     136:	99 23       	and	r25, r25
     138:	1c f4       	brge	.+6      	; 0x140 <bluetoothGetFrame+0x9a>
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	9f 6f       	ori	r25, 0xFF	; 255
     13e:	01 96       	adiw	r24, 0x01	; 1
	RING_BUF_INC(ringBufferReadPos);
     140:	8f 5f       	subi	r24, 0xFF	; 255
     142:	a8 2f       	mov	r26, r24
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	80 93 0e 02 	sts	0x020E, r24
	frame[0] = RING_BUF_AT(ringBufferReadPos+0);
     14a:	bb 27       	eor	r27, r27
     14c:	a1 5f       	subi	r26, 0xF1	; 241
     14e:	bd 4f       	sbci	r27, 0xFD	; 253
     150:	8c 91       	ld	r24, X
     152:	80 83       	st	Z, r24
	frame[1] = RING_BUF_AT(ringBufferReadPos+1);
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	8c 91       	ld	r24, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	81 83       	std	Z+1, r24	; 0x01
	frame[2] = RING_BUF_AT(ringBufferReadPos+2);
     15c:	12 96       	adiw	r26, 0x02	; 2
     15e:	8c 91       	ld	r24, X
     160:	82 83       	std	Z+2, r24	; 0x02
			RING_BUF_INC(ringBufferReadPos);
			len--;
		}
	}
	
	len = RING_BUF_AT(ringBufferReadPos+1);
     162:	64 2f       	mov	r22, r20
     164:	70 e0       	ldi	r23, 0x00	; 0
	RING_BUF_INC(ringBufferReadPos);
	RING_BUF_INC(ringBufferReadPos);
	frame[0] = RING_BUF_AT(ringBufferReadPos+0);
	frame[1] = RING_BUF_AT(ringBufferReadPos+1);
	frame[2] = RING_BUF_AT(ringBufferReadPos+2);
	for(int i = 0; i < len-1; i++)
     166:	61 50       	subi	r22, 0x01	; 1
     168:	71 09       	sbc	r23, r1
     16a:	16 16       	cp	r1, r22
     16c:	17 06       	cpc	r1, r23
     16e:	c4 f4       	brge	.+48     	; 0x1a0 <bluetoothGetFrame+0xfa>
     170:	80 91 0e 02 	lds	r24, 0x020E
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
	{
		checksum += RING_BUF_AT(ringBufferReadPos);
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	fc 01       	movw	r30, r24
     17c:	e1 5f       	subi	r30, 0xF1	; 241
     17e:	fd 4f       	sbci	r31, 0xFD	; 253
     180:	50 81       	ld	r21, Z
     182:	45 0f       	add	r20, r21
		RING_BUF_INC(ringBufferReadPos);
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	90 78       	andi	r25, 0x80	; 128
     188:	99 23       	and	r25, r25
     18a:	1c f4       	brge	.+6      	; 0x192 <bluetoothGetFrame+0xec>
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	9f 6f       	ori	r25, 0xFF	; 255
     190:	01 96       	adiw	r24, 0x01	; 1
	RING_BUF_INC(ringBufferReadPos);
	RING_BUF_INC(ringBufferReadPos);
	frame[0] = RING_BUF_AT(ringBufferReadPos+0);
	frame[1] = RING_BUF_AT(ringBufferReadPos+1);
	frame[2] = RING_BUF_AT(ringBufferReadPos+2);
	for(int i = 0; i < len-1; i++)
     192:	2f 5f       	subi	r18, 0xFF	; 255
     194:	3f 4f       	sbci	r19, 0xFF	; 255
     196:	26 17       	cp	r18, r22
     198:	37 07       	cpc	r19, r23
     19a:	74 f3       	brlt	.-36     	; 0x178 <bluetoothGetFrame+0xd2>
     19c:	80 93 0e 02 	sts	0x020E, r24
	{
		checksum += RING_BUF_AT(ringBufferReadPos);
		RING_BUF_INC(ringBufferReadPos);
	}
	if(checksum == RING_BUF_AT(ringBufferReadPos)) {
     1a0:	80 91 0e 02 	lds	r24, 0x020E
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	fc 01       	movw	r30, r24
     1a8:	e1 5f       	subi	r30, 0xF1	; 241
     1aa:	fd 4f       	sbci	r31, 0xFD	; 253
     1ac:	20 81       	ld	r18, Z
     1ae:	24 13       	cpse	r18, r20
     1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <bluetoothGetFrame+0x122>
		RING_BUF_INC(ringBufferReadPos);
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	90 78       	andi	r25, 0x80	; 128
     1b6:	99 23       	and	r25, r25
     1b8:	1c f4       	brge	.+6      	; 0x1c0 <bluetoothGetFrame+0x11a>
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	9f 6f       	ori	r25, 0xFF	; 255
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	80 93 0e 02 	sts	0x020E, r24
		return 1;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	08 95       	ret
	} else {
		RING_BUF_INC(ringBufferReadPos);
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	90 78       	andi	r25, 0x80	; 128
     1cc:	99 23       	and	r25, r25
     1ce:	1c f4       	brge	.+6      	; 0x1d6 <bluetoothGetFrame+0x130>
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	9f 6f       	ori	r25, 0xFF	; 255
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	80 93 0e 02 	sts	0x020E, r24
		return 0;
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	08 95       	ret
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
		return 0;
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	08 95       	ret
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	08 95       	ret
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
     1e6:	42 30       	cpi	r20, 0x02	; 2
     1e8:	51 05       	cpc	r21, r1
     1ea:	0c f0       	brlt	.+2      	; 0x1ee <bluetoothGetFrame+0x148>
     1ec:	6c cf       	rjmp	.-296    	; 0xc6 <bluetoothGetFrame+0x20>
     1ee:	f9 cf       	rjmp	.-14     	; 0x1e2 <bluetoothGetFrame+0x13c>

000001f0 <__vector_18>:
	}
		
}

ISR(USART_RX_vect)
{
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	2f 93       	push	r18
     1fc:	3f 93       	push	r19
     1fe:	4f 93       	push	r20
     200:	8f 93       	push	r24
     202:	9f 93       	push	r25
     204:	ef 93       	push	r30
     206:	ff 93       	push	r31
	ringBufferTmp = (ringBufferWritePos+1)%RING_BUFFER_SIZE;
     208:	20 91 0d 02 	lds	r18, 0x020D
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	c9 01       	movw	r24, r18
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 78       	andi	r25, 0x80	; 128
     214:	99 23       	and	r25, r25
     216:	1c f4       	brge	.+6      	; 0x21e <__vector_18+0x2e>
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	9f 6f       	ori	r25, 0xFF	; 255
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	80 93 0c 02 	sts	0x020C, r24
	if(ringBufferTmp != ringBufferReadPos)
     222:	40 91 0e 02 	lds	r20, 0x020E
     226:	48 17       	cp	r20, r24
     228:	41 f0       	breq	.+16     	; 0x23a <__vector_18+0x4a>
	{
		ringBuffer[ringBufferWritePos] = UDR0;
     22a:	90 91 c6 00 	lds	r25, 0x00C6
     22e:	f9 01       	movw	r30, r18
     230:	e1 5f       	subi	r30, 0xF1	; 241
     232:	fd 4f       	sbci	r31, 0xFD	; 253
     234:	90 83       	st	Z, r25
		ringBufferWritePos = ringBufferTmp;
     236:	80 93 0d 02 	sts	0x020D, r24
	}
}
     23a:	ff 91       	pop	r31
     23c:	ef 91       	pop	r30
     23e:	9f 91       	pop	r25
     240:	8f 91       	pop	r24
     242:	4f 91       	pop	r20
     244:	3f 91       	pop	r19
     246:	2f 91       	pop	r18
     248:	0f 90       	pop	r0
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	0f 90       	pop	r0
     24e:	1f 90       	pop	r1
     250:	18 95       	reti

00000252 <bluetoothInit>:

void bluetoothInit(unsigned int baudrate)
{
	/* Set baudrate. */
	unsigned int ubrr = (F_CPU / 16 / baudrate - 1);
     252:	9c 01       	movw	r18, r24
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	60 e2       	ldi	r22, 0x20	; 32
     25a:	71 ea       	ldi	r23, 0xA1	; 161
     25c:	87 e0       	ldi	r24, 0x07	; 7
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divmodsi4>
     264:	21 50       	subi	r18, 0x01	; 1
     266:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
     268:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)(ubrr);
     26c:	20 93 c4 00 	sts	0x00C4, r18
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); /* Enable USART RX, TX, interrupt for RX. */
     270:	88 e9       	ldi	r24, 0x98	; 152
     272:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); /* Set USART 8bit size data. */
     276:	86 e0       	ldi	r24, 0x06	; 6
     278:	80 93 c2 00 	sts	0x00C2, r24
	
	sei();
     27c:	78 94       	sei
     27e:	08 95       	ret

00000280 <main>:
static color_t leds[NUM_LEDS];	/**< Array of colors for each physical rgb led. */

// ------------------------------------------------------------------- DEFINITIONS

int main(void)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	00 d0       	rcall	.+0      	; 0x286 <main+0x6>
     286:	1f 92       	push	r1
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
	uint8_t frame[3]; /**< Buffer for frame received from controller. */
	
	/* Debug pin indicating that whether module is running. */
	DDRC |= (1<<PC5);
     28c:	3d 9a       	sbi	0x07, 5	; 7
	PORTC |= (1<<PC5);
     28e:	45 9a       	sbi	0x08, 5	; 8
     290:	ef e0       	ldi	r30, 0x0F	; 15
     292:	f3 e0       	ldi	r31, 0x03	; 3
     294:	8b ea       	ldi	r24, 0xAB	; 171
     296:	93 e0       	ldi	r25, 0x03	; 3
	
	/* Reset leds colors. */
	for(int i = 0; i < NUM_LEDS; i++)
		leds[i].val = 0;
     298:	11 92       	st	Z+, r1
     29a:	11 92       	st	Z+, r1
     29c:	11 92       	st	Z+, r1
     29e:	11 92       	st	Z+, r1
	/* Debug pin indicating that whether module is running. */
	DDRC |= (1<<PC5);
	PORTC |= (1<<PC5);
	
	/* Reset leds colors. */
	for(int i = 0; i < NUM_LEDS; i++)
     2a0:	e8 17       	cp	r30, r24
     2a2:	f9 07       	cpc	r31, r25
     2a4:	c9 f7       	brne	.-14     	; 0x298 <main+0x18>
		leds[i].val = 0;
	
	/* Init USART for bluetooth driver with 38400 baudrate. */
	bluetoothInit(38400);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	96 e9       	ldi	r25, 0x96	; 150
     2aa:	0e 94 29 01 	call	0x252	; 0x252 <bluetoothInit>
	
	/* Init ws2812b driver. */
	wsInit();
     2ae:	0e 94 79 08 	call	0x10f2	; 0x10f2 <wsInit>
	
	/* Seq leds animation. */
	seqSetFunction(eSeqStaticColor);
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <seqSetFunction>
	
	while (1)
	{
		/* Send colors to ws2812b leds. */
		wsSend(leds, NUM_LEDS);
     2b8:	67 e2       	ldi	r22, 0x27	; 39
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	8f e0       	ldi	r24, 0x0F	; 15
     2be:	93 e0       	ldi	r25, 0x03	; 3
     2c0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <wsSend>
		
		/* Update color array (animate). */
		seqUpdate(leds, NUM_LEDS);
     2c4:	67 e2       	ldi	r22, 0x27	; 39
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	8f e0       	ldi	r24, 0x0F	; 15
     2ca:	93 e0       	ldi	r25, 0x03	; 3
     2cc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <seqUpdate>
		 
		if(bluetoothGetFrame(frame)) {
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	0e 94 53 00 	call	0xa6	; 0xa6 <bluetoothGetFrame>
     2d8:	88 23       	and	r24, r24
     2da:	31 f0       	breq	.+12     	; 0x2e8 <main+0x68>
			/* New frame received. */
			seqSetColorRGB(0, frame[0], frame[1], frame[2]);
     2dc:	2b 81       	ldd	r18, Y+3	; 0x03
     2de:	4a 81       	ldd	r20, Y+2	; 0x02
     2e0:	69 81       	ldd	r22, Y+1	; 0x01
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	0e 94 68 08 	call	0x10d0	; 0x10d0 <seqSetColorRGB>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e8:	8f e1       	ldi	r24, 0x1F	; 31
     2ea:	9e e4       	ldi	r25, 0x4E	; 78
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x6c>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x72>
     2f2:	00 00       	nop
     2f4:	e1 cf       	rjmp	.-62     	; 0x2b8 <main+0x38>

000002f6 <seqPingPongFunc>:
}

// ------------------------------------------------------------ STATIC DEFINITIONS

static void seqPingPongFunc(color_t *leds, int num_leds)
{
     2f6:	2f 92       	push	r2
     2f8:	3f 92       	push	r3
     2fa:	4f 92       	push	r4
     2fc:	5f 92       	push	r5
     2fe:	6f 92       	push	r6
     300:	7f 92       	push	r7
     302:	8f 92       	push	r8
     304:	9f 92       	push	r9
     306:	af 92       	push	r10
     308:	bf 92       	push	r11
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	63 97       	sbiw	r28, 0x13	; 19
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	fc 01       	movw	r30, r24
     32c:	7f 87       	std	Y+15, r23	; 0x0f
     32e:	6e 87       	std	Y+14, r22	; 0x0e
	static uint8_t color_i = 0;
	static int8_t led_dir = 0;
	static uint8_t seq_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     330:	90 91 ae 03 	lds	r25, 0x03AE
     334:	9f 5f       	subi	r25, 0xFF	; 255
	if(timer < 2)
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	18 f4       	brcc	.+6      	; 0x340 <seqPingPongFunc+0x4a>
	static uint8_t color_i = 0;
	static int8_t led_dir = 0;
	static uint8_t seq_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     33a:	90 93 ae 03 	sts	0x03AE, r25
     33e:	bf c1       	rjmp	.+894    	; 0x6be <__stack+0x1bf>
	if(timer < 2)
		return;
	else
		timer = 0;
     340:	10 92 ae 03 	sts	0x03AE, r1
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
	{
		float k = (i+1)/15.0f;
		if(!led_dir) {
     344:	20 91 ad 03 	lds	r18, 0x03AD
     348:	29 87       	std	Y+9, r18	; 0x09
			if(color_i-i < 0)
			break;
			leds[color_i-i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.r;
     34a:	80 91 ab 03 	lds	r24, 0x03AB
     34e:	48 2f       	mov	r20, r24
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	80 91 ac 03 	lds	r24, 0x03AC
     356:	a8 2f       	mov	r26, r24
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	bd 87       	std	Y+13, r27	; 0x0d
     35c:	ac 87       	std	Y+12, r26	; 0x0c
     35e:	9d 01       	movw	r18, r26
     360:	22 0f       	add	r18, r18
     362:	33 1f       	adc	r19, r19
     364:	22 0f       	add	r18, r18
     366:	33 1f       	adc	r19, r19
     368:	19 01       	movw	r2, r18
     36a:	b2 e0       	ldi	r27, 0x02	; 2
     36c:	2b 0e       	add	r2, r27
     36e:	31 1c       	adc	r3, r1
     370:	2e 0e       	add	r2, r30
     372:	3f 1e       	adc	r3, r31
     374:	2f 5f       	subi	r18, 0xFF	; 255
     376:	3f 4f       	sbci	r19, 0xFF	; 255
     378:	4f 01       	movw	r8, r30
     37a:	82 0e       	add	r8, r18
     37c:	93 1e       	adc	r9, r19
	else
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
     37e:	00 e0       	ldi	r16, 0x00	; 0
     380:	10 e0       	ldi	r17, 0x00	; 0
			leds[color_i-i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.g;
			leds[color_i-i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.b;
			} else {
			if(color_i+i >= num_leds)
			break;
			leds[color_i+i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.r;
     382:	ca 01       	movw	r24, r20
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	fc 01       	movw	r30, r24
     38e:	e0 50       	subi	r30, 0x00	; 0
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	fb 87       	std	Y+11, r31	; 0x0b
     394:	ea 87       	std	Y+10, r30	; 0x0a
     396:	2c 85       	ldd	r18, Y+12	; 0x0c
     398:	3d 85       	ldd	r19, Y+13	; 0x0d
     39a:	2f 5f       	subi	r18, 0xFF	; 255
     39c:	3f 4f       	sbci	r19, 0xFF	; 255
     39e:	39 8b       	std	Y+17, r19	; 0x11
     3a0:	28 8b       	std	Y+16, r18	; 0x10
     3a2:	54 01       	movw	r10, r8
     3a4:	41 01       	movw	r8, r2
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
	{
		float k = (i+1)/15.0f;
     3a6:	0f 5f       	subi	r16, 0xFF	; 255
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	b8 01       	movw	r22, r16
     3ac:	01 2e       	mov	r0, r17
     3ae:	00 0c       	add	r0, r0
     3b0:	88 0b       	sbc	r24, r24
     3b2:	99 0b       	sbc	r25, r25
     3b4:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e7       	ldi	r20, 0x70	; 112
     3be:	51 e4       	ldi	r21, 0x41	; 65
     3c0:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3>
     3c4:	6b 01       	movw	r12, r22
     3c6:	7c 01       	movw	r14, r24
		if(!led_dir) {
     3c8:	39 85       	ldd	r19, Y+9	; 0x09
     3ca:	31 11       	cpse	r19, r1
     3cc:	9c c0       	rjmp	.+312    	; 0x506 <__stack+0x7>
     3ce:	88 89       	ldd	r24, Y+16	; 0x10
     3d0:	99 89       	ldd	r25, Y+17	; 0x11
     3d2:	80 1b       	sub	r24, r16
     3d4:	91 0b       	sbc	r25, r17
			if(color_i-i < 0)
     3d6:	0a f4       	brpl	.+2      	; 0x3da <seqPingPongFunc+0xe4>
     3d8:	6f c1       	rjmp	.+734    	; 0x6b8 <__stack+0x1b9>
			break;
			leds[color_i-i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.r;
     3da:	aa 85       	ldd	r26, Y+10	; 0x0a
     3dc:	bb 85       	ldd	r27, Y+11	; 0x0b
     3de:	4d 90       	ld	r4, X+
     3e0:	5d 90       	ld	r5, X+
     3e2:	6d 90       	ld	r6, X+
     3e4:	7c 90       	ld	r7, X
     3e6:	a7 01       	movw	r20, r14
     3e8:	96 01       	movw	r18, r12
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	80 e8       	ldi	r24, 0x80	; 128
     3f0:	9f e3       	ldi	r25, 0x3F	; 63
     3f2:	0e 94 ba 08 	call	0x1174	; 0x1174 <__subsf3>
     3f6:	69 83       	std	Y+1, r22	; 0x01
     3f8:	7a 83       	std	Y+2, r23	; 0x02
     3fa:	8b 83       	std	Y+3, r24	; 0x03
     3fc:	9c 83       	std	Y+4, r25	; 0x04
     3fe:	3b 8a       	std	Y+19, r3	; 0x13
     400:	2a 8a       	std	Y+18, r2	; 0x12
     402:	c3 01       	movw	r24, r6
     404:	b2 01       	movw	r22, r4
     406:	77 27       	eor	r23, r23
     408:	88 27       	eor	r24, r24
     40a:	99 27       	eor	r25, r25
     40c:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     410:	a7 01       	movw	r20, r14
     412:	96 01       	movw	r18, r12
     414:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     418:	6d 83       	std	Y+5, r22	; 0x05
     41a:	7e 83       	std	Y+6, r23	; 0x06
     41c:	8f 83       	std	Y+7, r24	; 0x07
     41e:	98 87       	std	Y+8, r25	; 0x08
     420:	f1 01       	movw	r30, r2
     422:	62 91       	ld	r22, -Z
     424:	fb 8b       	std	Y+19, r31	; 0x13
     426:	ea 8b       	std	Y+18, r30	; 0x12
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     432:	9b 01       	movw	r18, r22
     434:	ac 01       	movw	r20, r24
     436:	69 81       	ldd	r22, Y+1	; 0x01
     438:	7a 81       	ldd	r23, Y+2	; 0x02
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	9c 81       	ldd	r25, Y+4	; 0x04
     43e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     442:	9b 01       	movw	r18, r22
     444:	ac 01       	movw	r20, r24
     446:	6d 81       	ldd	r22, Y+5	; 0x05
     448:	7e 81       	ldd	r23, Y+6	; 0x06
     44a:	8f 81       	ldd	r24, Y+7	; 0x07
     44c:	98 85       	ldd	r25, Y+8	; 0x08
     44e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     452:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     456:	aa 89       	ldd	r26, Y+18	; 0x12
     458:	bb 89       	ldd	r27, Y+19	; 0x13
     45a:	6c 93       	st	X, r22
			leds[color_i-i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.g;
     45c:	65 2d       	mov	r22, r5
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     468:	a7 01       	movw	r20, r14
     46a:	96 01       	movw	r18, r12
     46c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     470:	6d 83       	std	Y+5, r22	; 0x05
     472:	7e 83       	std	Y+6, r23	; 0x06
     474:	8f 83       	std	Y+7, r24	; 0x07
     476:	98 87       	std	Y+8, r25	; 0x08
     478:	f1 01       	movw	r30, r2
     47a:	60 81       	ld	r22, Z
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     486:	9b 01       	movw	r18, r22
     488:	ac 01       	movw	r20, r24
     48a:	69 81       	ldd	r22, Y+1	; 0x01
     48c:	7a 81       	ldd	r23, Y+2	; 0x02
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	9c 81       	ldd	r25, Y+4	; 0x04
     492:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	6d 81       	ldd	r22, Y+5	; 0x05
     49c:	7e 81       	ldd	r23, Y+6	; 0x06
     49e:	8f 81       	ldd	r24, Y+7	; 0x07
     4a0:	98 85       	ldd	r25, Y+8	; 0x08
     4a2:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     4a6:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     4aa:	d1 01       	movw	r26, r2
     4ac:	6c 93       	st	X, r22
     4ae:	f1 01       	movw	r30, r2
     4b0:	32 97       	sbiw	r30, 0x02	; 2
     4b2:	fe 83       	std	Y+6, r31	; 0x06
     4b4:	ed 83       	std	Y+5, r30	; 0x05
			leds[color_i-i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i-i].rgb.b;
     4b6:	66 2d       	mov	r22, r6
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     4c2:	a7 01       	movw	r20, r14
     4c4:	96 01       	movw	r18, r12
     4c6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     4ca:	6b 01       	movw	r12, r22
     4cc:	7c 01       	movw	r14, r24
     4ce:	ad 81       	ldd	r26, Y+5	; 0x05
     4d0:	be 81       	ldd	r27, Y+6	; 0x06
     4d2:	6c 91       	ld	r22, X
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     4de:	9b 01       	movw	r18, r22
     4e0:	ac 01       	movw	r20, r24
     4e2:	69 81       	ldd	r22, Y+1	; 0x01
     4e4:	7a 81       	ldd	r23, Y+2	; 0x02
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ea:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     4ee:	9b 01       	movw	r18, r22
     4f0:	ac 01       	movw	r20, r24
     4f2:	c7 01       	movw	r24, r14
     4f4:	b6 01       	movw	r22, r12
     4f6:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     4fa:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     4fe:	ed 81       	ldd	r30, Y+5	; 0x05
     500:	fe 81       	ldd	r31, Y+6	; 0x06
     502:	60 83       	st	Z, r22
     504:	9a c0       	rjmp	.+308    	; 0x63a <__stack+0x13b>
     506:	8c 85       	ldd	r24, Y+12	; 0x0c
     508:	9d 85       	ldd	r25, Y+13	; 0x0d
     50a:	80 0f       	add	r24, r16
     50c:	91 1f       	adc	r25, r17
     50e:	01 97       	sbiw	r24, 0x01	; 1
			} else {
			if(color_i+i >= num_leds)
     510:	2e 85       	ldd	r18, Y+14	; 0x0e
     512:	3f 85       	ldd	r19, Y+15	; 0x0f
     514:	82 17       	cp	r24, r18
     516:	93 07       	cpc	r25, r19
     518:	0c f0       	brlt	.+2      	; 0x51c <__stack+0x1d>
     51a:	cb c0       	rjmp	.+406    	; 0x6b2 <__stack+0x1b3>
			break;
			leds[color_i+i].rgb.r = k*((colors[seq_i]>>0)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.r;
     51c:	a7 01       	movw	r20, r14
     51e:	96 01       	movw	r18, r12
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e8       	ldi	r24, 0x80	; 128
     526:	9f e3       	ldi	r25, 0x3F	; 63
     528:	0e 94 ba 08 	call	0x1174	; 0x1174 <__subsf3>
     52c:	69 83       	std	Y+1, r22	; 0x01
     52e:	7a 83       	std	Y+2, r23	; 0x02
     530:	8b 83       	std	Y+3, r24	; 0x03
     532:	9c 83       	std	Y+4, r25	; 0x04
     534:	aa 85       	ldd	r26, Y+10	; 0x0a
     536:	bb 85       	ldd	r27, Y+11	; 0x0b
     538:	4d 90       	ld	r4, X+
     53a:	5d 90       	ld	r5, X+
     53c:	6d 90       	ld	r6, X+
     53e:	7c 90       	ld	r7, X
     540:	c3 01       	movw	r24, r6
     542:	b2 01       	movw	r22, r4
     544:	77 27       	eor	r23, r23
     546:	88 27       	eor	r24, r24
     548:	99 27       	eor	r25, r25
     54a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     54e:	a7 01       	movw	r20, r14
     550:	96 01       	movw	r18, r12
     552:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     556:	6d 83       	std	Y+5, r22	; 0x05
     558:	7e 83       	std	Y+6, r23	; 0x06
     55a:	8f 83       	std	Y+7, r24	; 0x07
     55c:	98 87       	std	Y+8, r25	; 0x08
     55e:	f5 01       	movw	r30, r10
     560:	60 81       	ld	r22, Z
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	69 81       	ldd	r22, Y+1	; 0x01
     572:	7a 81       	ldd	r23, Y+2	; 0x02
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	9c 81       	ldd	r25, Y+4	; 0x04
     578:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24
     580:	6d 81       	ldd	r22, Y+5	; 0x05
     582:	7e 81       	ldd	r23, Y+6	; 0x06
     584:	8f 81       	ldd	r24, Y+7	; 0x07
     586:	98 85       	ldd	r25, Y+8	; 0x08
     588:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     58c:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     590:	d5 01       	movw	r26, r10
     592:	6c 93       	st	X, r22
			leds[color_i+i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.g;
     594:	65 2d       	mov	r22, r5
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     5a0:	a7 01       	movw	r20, r14
     5a2:	96 01       	movw	r18, r12
     5a4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     5a8:	6d 83       	std	Y+5, r22	; 0x05
     5aa:	7e 83       	std	Y+6, r23	; 0x06
     5ac:	8f 83       	std	Y+7, r24	; 0x07
     5ae:	98 87       	std	Y+8, r25	; 0x08
     5b0:	f4 01       	movw	r30, r8
     5b2:	60 81       	ld	r22, Z
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     5be:	9b 01       	movw	r18, r22
     5c0:	ac 01       	movw	r20, r24
     5c2:	69 81       	ldd	r22, Y+1	; 0x01
     5c4:	7a 81       	ldd	r23, Y+2	; 0x02
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     5ce:	9b 01       	movw	r18, r22
     5d0:	ac 01       	movw	r20, r24
     5d2:	6d 81       	ldd	r22, Y+5	; 0x05
     5d4:	7e 81       	ldd	r23, Y+6	; 0x06
     5d6:	8f 81       	ldd	r24, Y+7	; 0x07
     5d8:	98 85       	ldd	r25, Y+8	; 0x08
     5da:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     5de:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     5e2:	d4 01       	movw	r26, r8
     5e4:	6c 93       	st	X, r22
     5e6:	be 82       	std	Y+6, r11	; 0x06
     5e8:	ad 82       	std	Y+5, r10	; 0x05
			leds[color_i+i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.b;
     5ea:	66 2d       	mov	r22, r6
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     5f6:	a7 01       	movw	r20, r14
     5f8:	96 01       	movw	r18, r12
     5fa:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
     602:	f5 01       	movw	r30, r10
     604:	62 91       	ld	r22, -Z
     606:	fe 83       	std	Y+6, r31	; 0x06
     608:	ed 83       	std	Y+5, r30	; 0x05
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	69 81       	ldd	r22, Y+1	; 0x01
     61a:	7a 81       	ldd	r23, Y+2	; 0x02
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	9c 81       	ldd	r25, Y+4	; 0x04
     620:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     630:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     634:	ad 81       	ldd	r26, Y+5	; 0x05
     636:	be 81       	ldd	r27, Y+6	; 0x06
     638:	6c 93       	st	X, r22
     63a:	b4 e0       	ldi	r27, 0x04	; 4
     63c:	2b 1a       	sub	r2, r27
     63e:	31 08       	sbc	r3, r1
     640:	e4 e0       	ldi	r30, 0x04	; 4
     642:	ae 0e       	add	r10, r30
     644:	b1 1c       	adc	r11, r1
     646:	f4 e0       	ldi	r31, 0x04	; 4
     648:	8f 0e       	add	r8, r31
     64a:	91 1c       	adc	r9, r1
	else
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < 15; i++)
     64c:	0f 30       	cpi	r16, 0x0F	; 15
     64e:	11 05       	cpc	r17, r1
     650:	09 f0       	breq	.+2      	; 0x654 <__stack+0x155>
     652:	a9 ce       	rjmp	.-686    	; 0x3a6 <seqPingPongFunc+0xb0>
			leds[color_i+i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.g;
			leds[color_i+i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.b;
		}
	}
	
	if(led_dir) color_i--;
     654:	20 91 ad 03 	lds	r18, 0x03AD
     658:	22 23       	and	r18, r18
     65a:	31 f0       	breq	.+12     	; 0x668 <__stack+0x169>
     65c:	80 91 ac 03 	lds	r24, 0x03AC
     660:	81 50       	subi	r24, 0x01	; 1
     662:	80 93 ac 03 	sts	0x03AC, r24
     666:	05 c0       	rjmp	.+10     	; 0x672 <__stack+0x173>
	else color_i++;
     668:	80 91 ac 03 	lds	r24, 0x03AC
     66c:	8f 5f       	subi	r24, 0xFF	; 255
     66e:	80 93 ac 03 	sts	0x03AC, r24
	if(color_i >= num_leds || color_i < 0) {
     672:	80 91 ac 03 	lds	r24, 0x03AC
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	4e 85       	ldd	r20, Y+14	; 0x0e
     67a:	5f 85       	ldd	r21, Y+15	; 0x0f
     67c:	84 17       	cp	r24, r20
     67e:	95 07       	cpc	r25, r21
     680:	f4 f0       	brlt	.+60     	; 0x6be <__stack+0x1bf>
		seq_i = (seq_i+1)%numColors;
     682:	80 91 ab 03 	lds	r24, 0x03AB
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	60 91 00 02 	lds	r22, 0x0200
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__divmodhi4>
     694:	80 93 ab 03 	sts	0x03AB, r24
		led_dir = led_dir == 1 ? 0 : 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	21 30       	cpi	r18, 0x01	; 1
     69c:	09 f4       	brne	.+2      	; 0x6a0 <__stack+0x1a1>
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	80 93 ad 03 	sts	0x03AD, r24
		color_i = 0 + led_dir*num_leds;
     6a4:	5e 85       	ldd	r21, Y+14	; 0x0e
     6a6:	85 9f       	mul	r24, r21
     6a8:	80 2d       	mov	r24, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	80 93 ac 03 	sts	0x03AC, r24
     6b0:	06 c0       	rjmp	.+12     	; 0x6be <__stack+0x1bf>
			leds[color_i+i].rgb.g = k*((colors[seq_i]>>8)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.g;
			leds[color_i+i].rgb.b = k*((colors[seq_i]>>16)&0xFF) + (1.0f-k)*leds[color_i+i].rgb.b;
		}
	}
	
	if(led_dir) color_i--;
     6b2:	20 91 ad 03 	lds	r18, 0x03AD
     6b6:	d2 cf       	rjmp	.-92     	; 0x65c <__stack+0x15d>
     6b8:	20 91 ad 03 	lds	r18, 0x03AD
     6bc:	d5 cf       	rjmp	.-86     	; 0x668 <__stack+0x169>
	if(color_i >= num_leds || color_i < 0) {
		seq_i = (seq_i+1)%numColors;
		led_dir = led_dir == 1 ? 0 : 1;
		color_i = 0 + led_dir*num_leds;
	}
}
     6be:	63 96       	adiw	r28, 0x13	; 19
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	cf 90       	pop	r12
     6da:	bf 90       	pop	r11
     6dc:	af 90       	pop	r10
     6de:	9f 90       	pop	r9
     6e0:	8f 90       	pop	r8
     6e2:	7f 90       	pop	r7
     6e4:	6f 90       	pop	r6
     6e6:	5f 90       	pop	r5
     6e8:	4f 90       	pop	r4
     6ea:	3f 90       	pop	r3
     6ec:	2f 90       	pop	r2
     6ee:	08 95       	ret

000006f0 <seqDoublePingPongFunc>:

static void seqDoublePingPongFunc(color_t *leds, int num_leds)
{
     6f0:	2f 92       	push	r2
     6f2:	3f 92       	push	r3
     6f4:	4f 92       	push	r4
     6f6:	5f 92       	push	r5
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	a1 97       	sbiw	r28, 0x21	; 33
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	ac 01       	movw	r20, r24
	static uint8_t led_i = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     726:	90 91 b2 03 	lds	r25, 0x03B2
     72a:	9f 5f       	subi	r25, 0xFF	; 255
	if(timer < 2)
     72c:	92 30       	cpi	r25, 0x02	; 2
     72e:	18 f4       	brcc	.+6      	; 0x736 <seqDoublePingPongFunc+0x46>
	static uint8_t led_i = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	
	timer++;
     730:	90 93 b2 03 	sts	0x03B2, r25
     734:	d1 c2       	rjmp	.+1442   	; 0xcd8 <seqDoublePingPongFunc+0x5e8>
	if(timer < 2)
		return;
	else
		timer = 0;
     736:	10 92 b2 03 	sts	0x03B2, r1
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
	{
		float k = (i+1)/10.0f;
		if(!led_dir) {
     73a:	20 91 b1 03 	lds	r18, 0x03B1
     73e:	2d 8b       	std	Y+21, r18	; 0x15
			if(led_i-i < 0)
     740:	10 91 b0 03 	lds	r17, 0x03B0
			break;
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     744:	80 91 af 03 	lds	r24, 0x03AF
     748:	28 2f       	mov	r18, r24
     74a:	30 e0       	ldi	r19, 0x00	; 0
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
			} else {
			if(led_i+i > num_leds/2)
     74c:	fb 01       	movw	r30, r22
     74e:	77 23       	and	r23, r23
     750:	0c f4       	brge	.+2      	; 0x754 <seqDoublePingPongFunc+0x64>
     752:	31 96       	adiw	r30, 0x01	; 1
     754:	7f 8f       	std	Y+31, r23	; 0x1f
     756:	6e 8f       	std	Y+30, r22	; 0x1e
     758:	ca 01       	movw	r24, r20
     75a:	af 01       	movw	r20, r30
     75c:	55 95       	asr	r21
     75e:	47 95       	ror	r20
     760:	5b 8f       	std	Y+27, r21	; 0x1b
     762:	4a 8f       	std	Y+26, r20	; 0x1a
     764:	61 2f       	mov	r22, r17
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	79 8f       	std	Y+25, r23	; 0x19
     76a:	68 8f       	std	Y+24, r22	; 0x18
     76c:	ab 01       	movw	r20, r22
     76e:	44 0f       	add	r20, r20
     770:	55 1f       	adc	r21, r21
     772:	44 0f       	add	r20, r20
     774:	55 1f       	adc	r21, r21
     776:	ba 01       	movw	r22, r20
     778:	6e 5f       	subi	r22, 0xFE	; 254
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	3c 01       	movw	r6, r24
     77e:	66 0e       	add	r6, r22
     780:	77 1e       	adc	r7, r23
			break;
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
     782:	2e 8c       	ldd	r2, Y+30	; 0x1e
     784:	3f 8c       	ldd	r3, Y+31	; 0x1f
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	27 1a       	sub	r2, r23
     78a:	31 08       	sbc	r3, r1
     78c:	a8 8d       	ldd	r26, Y+24	; 0x18
     78e:	b9 8d       	ldd	r27, Y+25	; 0x19
     790:	2a 1a       	sub	r2, r26
     792:	3b 0a       	sbc	r3, r27
     794:	22 0c       	add	r2, r2
     796:	33 1c       	adc	r3, r3
     798:	22 0c       	add	r2, r2
     79a:	33 1c       	adc	r3, r3
     79c:	b2 e0       	ldi	r27, 0x02	; 2
     79e:	2b 0e       	add	r2, r27
     7a0:	31 1c       	adc	r3, r1
     7a2:	28 0e       	add	r2, r24
     7a4:	39 1e       	adc	r3, r25
     7a6:	4f 5f       	subi	r20, 0xFF	; 255
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	4c 01       	movw	r8, r24
     7ac:	84 0e       	add	r8, r20
     7ae:	95 1e       	adc	r9, r21
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	10 e0       	ldi	r17, 0x00	; 0
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
			} else {
			if(led_i+i > num_leds/2)
			break;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     7b4:	c9 01       	movw	r24, r18
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	fc 01       	movw	r30, r24
     7c0:	e0 50       	subi	r30, 0x00	; 0
     7c2:	ff 4f       	sbci	r31, 0xFF	; 255
     7c4:	ff 8b       	std	Y+23, r31	; 0x17
     7c6:	ee 8b       	std	Y+22, r30	; 0x16
     7c8:	28 8d       	ldd	r18, Y+24	; 0x18
     7ca:	39 8d       	ldd	r19, Y+25	; 0x19
     7cc:	2f 5f       	subi	r18, 0xFF	; 255
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	3d 8f       	std	Y+29, r19	; 0x1d
     7d2:	2c 8f       	std	Y+28, r18	; 0x1c
     7d4:	54 01       	movw	r10, r8
     7d6:	43 01       	movw	r8, r6
     7d8:	21 01       	movw	r4, r2
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
	{
		float k = (i+1)/10.0f;
     7da:	0f 5f       	subi	r16, 0xFF	; 255
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	b8 01       	movw	r22, r16
     7e0:	01 2e       	mov	r0, r17
     7e2:	00 0c       	add	r0, r0
     7e4:	88 0b       	sbc	r24, r24
     7e6:	99 0b       	sbc	r25, r25
     7e8:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e2       	ldi	r20, 0x20	; 32
     7f2:	51 e4       	ldi	r21, 0x41	; 65
     7f4:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3>
     7f8:	6d 83       	std	Y+5, r22	; 0x05
     7fa:	7e 83       	std	Y+6, r23	; 0x06
     7fc:	8f 83       	std	Y+7, r24	; 0x07
     7fe:	98 87       	std	Y+8, r25	; 0x08
		if(!led_dir) {
     800:	3d 89       	ldd	r19, Y+21	; 0x15
     802:	31 11       	cpse	r19, r1
     804:	f6 c0       	rjmp	.+492    	; 0x9f2 <seqDoublePingPongFunc+0x302>
     806:	8c 8d       	ldd	r24, Y+28	; 0x1c
     808:	9d 8d       	ldd	r25, Y+29	; 0x1d
     80a:	80 1b       	sub	r24, r16
     80c:	91 0b       	sbc	r25, r17
			if(led_i-i < 0)
     80e:	0a f4       	brpl	.+2      	; 0x812 <seqDoublePingPongFunc+0x122>
     810:	60 c2       	rjmp	.+1216   	; 0xcd2 <seqDoublePingPongFunc+0x5e2>
			break;
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     812:	ae 89       	ldd	r26, Y+22	; 0x16
     814:	bf 89       	ldd	r27, Y+23	; 0x17
     816:	cd 90       	ld	r12, X+
     818:	dd 90       	ld	r13, X+
     81a:	ed 90       	ld	r14, X+
     81c:	fc 90       	ld	r15, X
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	77 27       	eor	r23, r23
     824:	88 27       	eor	r24, r24
     826:	99 27       	eor	r25, r25
     828:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     82c:	2d 81       	ldd	r18, Y+5	; 0x05
     82e:	3e 81       	ldd	r19, Y+6	; 0x06
     830:	4f 81       	ldd	r20, Y+7	; 0x07
     832:	58 85       	ldd	r21, Y+8	; 0x08
     834:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     838:	69 87       	std	Y+9, r22	; 0x09
     83a:	7a 87       	std	Y+10, r23	; 0x0a
     83c:	8b 87       	std	Y+11, r24	; 0x0b
     83e:	9c 87       	std	Y+12, r25	; 0x0c
     840:	2d 81       	ldd	r18, Y+5	; 0x05
     842:	3e 81       	ldd	r19, Y+6	; 0x06
     844:	4f 81       	ldd	r20, Y+7	; 0x07
     846:	58 85       	ldd	r21, Y+8	; 0x08
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 e8       	ldi	r24, 0x80	; 128
     84e:	9f e3       	ldi	r25, 0x3F	; 63
     850:	0e 94 ba 08 	call	0x1174	; 0x1174 <__subsf3>
     854:	69 83       	std	Y+1, r22	; 0x01
     856:	7a 83       	std	Y+2, r23	; 0x02
     858:	8b 83       	std	Y+3, r24	; 0x03
     85a:	9c 83       	std	Y+4, r25	; 0x04
     85c:	f3 01       	movw	r30, r6
     85e:	62 91       	ld	r22, -Z
     860:	fe 87       	std	Y+14, r31	; 0x0e
     862:	ed 87       	std	Y+13, r30	; 0x0d
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	69 81       	ldd	r22, Y+1	; 0x01
     874:	7a 81       	ldd	r23, Y+2	; 0x02
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	69 85       	ldd	r22, Y+9	; 0x09
     884:	7a 85       	ldd	r23, Y+10	; 0x0a
     886:	8b 85       	ldd	r24, Y+11	; 0x0b
     888:	9c 85       	ldd	r25, Y+12	; 0x0c
     88a:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     88e:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     892:	ad 85       	ldd	r26, Y+13	; 0x0d
     894:	be 85       	ldd	r27, Y+14	; 0x0e
     896:	6c 93       	st	X, r22
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
     898:	6d 2d       	mov	r22, r13
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     8a4:	2d 81       	ldd	r18, Y+5	; 0x05
     8a6:	3e 81       	ldd	r19, Y+6	; 0x06
     8a8:	4f 81       	ldd	r20, Y+7	; 0x07
     8aa:	58 85       	ldd	r21, Y+8	; 0x08
     8ac:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     8b0:	6d 87       	std	Y+13, r22	; 0x0d
     8b2:	7e 87       	std	Y+14, r23	; 0x0e
     8b4:	8f 87       	std	Y+15, r24	; 0x0f
     8b6:	98 8b       	std	Y+16, r25	; 0x10
     8b8:	f3 01       	movw	r30, r6
     8ba:	60 81       	ld	r22, Z
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	69 81       	ldd	r22, Y+1	; 0x01
     8cc:	7a 81       	ldd	r23, Y+2	; 0x02
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	9c 81       	ldd	r25, Y+4	; 0x04
     8d2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     8d6:	9b 01       	movw	r18, r22
     8d8:	ac 01       	movw	r20, r24
     8da:	6d 85       	ldd	r22, Y+13	; 0x0d
     8dc:	7e 85       	ldd	r23, Y+14	; 0x0e
     8de:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e0:	98 89       	ldd	r25, Y+16	; 0x10
     8e2:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     8e6:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     8ea:	d3 01       	movw	r26, r6
     8ec:	6c 93       	st	X, r22
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
     8ee:	6e 2d       	mov	r22, r14
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     8fa:	2d 81       	ldd	r18, Y+5	; 0x05
     8fc:	3e 81       	ldd	r19, Y+6	; 0x06
     8fe:	4f 81       	ldd	r20, Y+7	; 0x07
     900:	58 85       	ldd	r21, Y+8	; 0x08
     902:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     906:	6b 01       	movw	r12, r22
     908:	7c 01       	movw	r14, r24
     90a:	f3 01       	movw	r30, r6
     90c:	32 97       	sbiw	r30, 0x02	; 2
     90e:	fe 83       	std	Y+6, r31	; 0x06
     910:	ed 83       	std	Y+5, r30	; 0x05
     912:	60 81       	ld	r22, Z
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	69 81       	ldd	r22, Y+1	; 0x01
     924:	7a 81       	ldd	r23, Y+2	; 0x02
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	9c 81       	ldd	r25, Y+4	; 0x04
     92a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     93a:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     93e:	ad 81       	ldd	r26, Y+5	; 0x05
     940:	be 81       	ldd	r27, Y+6	; 0x06
     942:	6c 93       	st	X, r22
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
     944:	f2 01       	movw	r30, r4
     946:	62 91       	ld	r22, -Z
     948:	fe 83       	std	Y+6, r31	; 0x06
     94a:	ed 83       	std	Y+5, r30	; 0x05
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	69 81       	ldd	r22, Y+1	; 0x01
     95c:	7a 81       	ldd	r23, Y+2	; 0x02
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	69 85       	ldd	r22, Y+9	; 0x09
     96c:	7a 85       	ldd	r23, Y+10	; 0x0a
     96e:	8b 85       	ldd	r24, Y+11	; 0x0b
     970:	9c 85       	ldd	r25, Y+12	; 0x0c
     972:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     976:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     97a:	ad 81       	ldd	r26, Y+5	; 0x05
     97c:	be 81       	ldd	r27, Y+6	; 0x06
     97e:	6c 93       	st	X, r22
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
     980:	f2 01       	movw	r30, r4
     982:	60 81       	ld	r22, Z
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     98e:	9b 01       	movw	r18, r22
     990:	ac 01       	movw	r20, r24
     992:	69 81       	ldd	r22, Y+1	; 0x01
     994:	7a 81       	ldd	r23, Y+2	; 0x02
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	6d 85       	ldd	r22, Y+13	; 0x0d
     9a4:	7e 85       	ldd	r23, Y+14	; 0x0e
     9a6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9a8:	98 89       	ldd	r25, Y+16	; 0x10
     9aa:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     9ae:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     9b2:	d2 01       	movw	r26, r4
     9b4:	6c 93       	st	X, r22
     9b6:	f2 01       	movw	r30, r4
     9b8:	32 97       	sbiw	r30, 0x02	; 2
     9ba:	fe 83       	std	Y+6, r31	; 0x06
     9bc:	ed 83       	std	Y+5, r30	; 0x05
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
     9be:	60 81       	ld	r22, Z
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	69 81       	ldd	r22, Y+1	; 0x01
     9d0:	7a 81       	ldd	r23, Y+2	; 0x02
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     9da:	9b 01       	movw	r18, r22
     9dc:	ac 01       	movw	r20, r24
     9de:	c7 01       	movw	r24, r14
     9e0:	b6 01       	movw	r22, r12
     9e2:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     9e6:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     9ea:	ad 81       	ldd	r26, Y+5	; 0x05
     9ec:	be 81       	ldd	r27, Y+6	; 0x06
     9ee:	6c 93       	st	X, r22
     9f0:	1f c1       	rjmp	.+574    	; 0xc30 <seqDoublePingPongFunc+0x540>
     9f2:	88 8d       	ldd	r24, Y+24	; 0x18
     9f4:	99 8d       	ldd	r25, Y+25	; 0x19
     9f6:	80 0f       	add	r24, r16
     9f8:	91 1f       	adc	r25, r17
     9fa:	01 97       	sbiw	r24, 0x01	; 1
			} else {
			if(led_i+i > num_leds/2)
     9fc:	ea 8d       	ldd	r30, Y+26	; 0x1a
     9fe:	fb 8d       	ldd	r31, Y+27	; 0x1b
     a00:	e8 17       	cp	r30, r24
     a02:	f9 07       	cpc	r31, r25
     a04:	0c f4       	brge	.+2      	; 0xa08 <seqDoublePingPongFunc+0x318>
     a06:	62 c1       	rjmp	.+708    	; 0xccc <seqDoublePingPongFunc+0x5dc>
			break;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     a08:	ae 89       	ldd	r26, Y+22	; 0x16
     a0a:	bf 89       	ldd	r27, Y+23	; 0x17
     a0c:	cd 90       	ld	r12, X+
     a0e:	dd 90       	ld	r13, X+
     a10:	ed 90       	ld	r14, X+
     a12:	fc 90       	ld	r15, X
     a14:	c7 01       	movw	r24, r14
     a16:	b6 01       	movw	r22, r12
     a18:	77 27       	eor	r23, r23
     a1a:	88 27       	eor	r24, r24
     a1c:	99 27       	eor	r25, r25
     a1e:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     a22:	2d 81       	ldd	r18, Y+5	; 0x05
     a24:	3e 81       	ldd	r19, Y+6	; 0x06
     a26:	4f 81       	ldd	r20, Y+7	; 0x07
     a28:	58 85       	ldd	r21, Y+8	; 0x08
     a2a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     a2e:	69 87       	std	Y+9, r22	; 0x09
     a30:	7a 87       	std	Y+10, r23	; 0x0a
     a32:	8b 87       	std	Y+11, r24	; 0x0b
     a34:	9c 87       	std	Y+12, r25	; 0x0c
     a36:	2d 81       	ldd	r18, Y+5	; 0x05
     a38:	3e 81       	ldd	r19, Y+6	; 0x06
     a3a:	4f 81       	ldd	r20, Y+7	; 0x07
     a3c:	58 85       	ldd	r21, Y+8	; 0x08
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e8       	ldi	r24, 0x80	; 128
     a44:	9f e3       	ldi	r25, 0x3F	; 63
     a46:	0e 94 ba 08 	call	0x1174	; 0x1174 <__subsf3>
     a4a:	69 83       	std	Y+1, r22	; 0x01
     a4c:	7a 83       	std	Y+2, r23	; 0x02
     a4e:	8b 83       	std	Y+3, r24	; 0x03
     a50:	9c 83       	std	Y+4, r25	; 0x04
     a52:	f5 01       	movw	r30, r10
     a54:	60 81       	ld	r22, Z
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	69 81       	ldd	r22, Y+1	; 0x01
     a66:	7a 81       	ldd	r23, Y+2	; 0x02
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     a70:	9b 01       	movw	r18, r22
     a72:	ac 01       	movw	r20, r24
     a74:	69 85       	ldd	r22, Y+9	; 0x09
     a76:	7a 85       	ldd	r23, Y+10	; 0x0a
     a78:	8b 85       	ldd	r24, Y+11	; 0x0b
     a7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a7c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     a80:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     a84:	d5 01       	movw	r26, r10
     a86:	6c 93       	st	X, r22
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
     a88:	2d 2d       	mov	r18, r13
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	2d 87       	std	Y+13, r18	; 0x0d
     a92:	3e 87       	std	Y+14, r19	; 0x0e
     a94:	4f 87       	std	Y+15, r20	; 0x0f
     a96:	58 8b       	std	Y+16, r21	; 0x10
     a98:	ca 01       	movw	r24, r20
     a9a:	b9 01       	movw	r22, r18
     a9c:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     aa0:	2d 81       	ldd	r18, Y+5	; 0x05
     aa2:	3e 81       	ldd	r19, Y+6	; 0x06
     aa4:	4f 81       	ldd	r20, Y+7	; 0x07
     aa6:	58 85       	ldd	r21, Y+8	; 0x08
     aa8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     aac:	69 8b       	std	Y+17, r22	; 0x11
     aae:	7a 8b       	std	Y+18, r23	; 0x12
     ab0:	8b 8b       	std	Y+19, r24	; 0x13
     ab2:	9c 8b       	std	Y+20, r25	; 0x14
     ab4:	d4 01       	movw	r26, r8
     ab6:	6c 91       	ld	r22, X
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	69 81       	ldd	r22, Y+1	; 0x01
     ac8:	7a 81       	ldd	r23, Y+2	; 0x02
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	69 89       	ldd	r22, Y+17	; 0x11
     ad8:	7a 89       	ldd	r23, Y+18	; 0x12
     ada:	8b 89       	ldd	r24, Y+19	; 0x13
     adc:	9c 89       	ldd	r25, Y+20	; 0x14
     ade:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     ae2:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     ae6:	f4 01       	movw	r30, r8
     ae8:	60 83       	st	Z, r22
     aea:	b9 a2       	std	Y+33, r11	; 0x21
     aec:	a8 a2       	std	Y+32, r10	; 0x20
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
     aee:	2e 2d       	mov	r18, r14
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	29 8b       	std	Y+17, r18	; 0x11
     af8:	3a 8b       	std	Y+18, r19	; 0x12
     afa:	4b 8b       	std	Y+19, r20	; 0x13
     afc:	5c 8b       	std	Y+20, r21	; 0x14
     afe:	ca 01       	movw	r24, r20
     b00:	b9 01       	movw	r22, r18
     b02:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     b06:	2d 81       	ldd	r18, Y+5	; 0x05
     b08:	3e 81       	ldd	r19, Y+6	; 0x06
     b0a:	4f 81       	ldd	r20, Y+7	; 0x07
     b0c:	58 85       	ldd	r21, Y+8	; 0x08
     b0e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     b12:	6b 01       	movw	r12, r22
     b14:	7c 01       	movw	r14, r24
     b16:	d5 01       	movw	r26, r10
     b18:	6e 91       	ld	r22, -X
     b1a:	b9 a3       	std	Y+33, r27	; 0x21
     b1c:	a8 a3       	std	Y+32, r26	; 0x20
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	69 81       	ldd	r22, Y+1	; 0x01
     b2e:	7a 81       	ldd	r23, Y+2	; 0x02
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	c7 01       	movw	r24, r14
     b3e:	b6 01       	movw	r22, r12
     b40:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     b44:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     b48:	e8 a1       	ldd	r30, Y+32	; 0x20
     b4a:	f9 a1       	ldd	r31, Y+33	; 0x21
     b4c:	60 83       	st	Z, r22
			
			leds[num_leds-1-led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.r;
     b4e:	d1 01       	movw	r26, r2
     b50:	6e 91       	ld	r22, -X
     b52:	7d 01       	movw	r14, r26
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     b5e:	9b 01       	movw	r18, r22
     b60:	ac 01       	movw	r20, r24
     b62:	69 81       	ldd	r22, Y+1	; 0x01
     b64:	7a 81       	ldd	r23, Y+2	; 0x02
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	69 85       	ldd	r22, Y+9	; 0x09
     b74:	7a 85       	ldd	r23, Y+10	; 0x0a
     b76:	8b 85       	ldd	r24, Y+11	; 0x0b
     b78:	9c 85       	ldd	r25, Y+12	; 0x0c
     b7a:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     b7e:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     b82:	f7 01       	movw	r30, r14
     b84:	60 83       	st	Z, r22
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
     b86:	6d 85       	ldd	r22, Y+13	; 0x0d
     b88:	7e 85       	ldd	r23, Y+14	; 0x0e
     b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8c:	98 89       	ldd	r25, Y+16	; 0x10
     b8e:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     b92:	2d 81       	ldd	r18, Y+5	; 0x05
     b94:	3e 81       	ldd	r19, Y+6	; 0x06
     b96:	4f 81       	ldd	r20, Y+7	; 0x07
     b98:	58 85       	ldd	r21, Y+8	; 0x08
     b9a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     b9e:	6b 01       	movw	r12, r22
     ba0:	7c 01       	movw	r14, r24
     ba2:	d1 01       	movw	r26, r2
     ba4:	6c 91       	ld	r22, X
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     bb0:	9b 01       	movw	r18, r22
     bb2:	ac 01       	movw	r20, r24
     bb4:	69 81       	ldd	r22, Y+1	; 0x01
     bb6:	7a 81       	ldd	r23, Y+2	; 0x02
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	c7 01       	movw	r24, r14
     bc6:	b6 01       	movw	r22, r12
     bc8:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     bcc:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     bd0:	f1 01       	movw	r30, r2
     bd2:	60 83       	st	Z, r22
     bd4:	91 01       	movw	r18, r2
     bd6:	22 50       	subi	r18, 0x02	; 2
     bd8:	31 09       	sbc	r19, r1
     bda:	3a 87       	std	Y+10, r19	; 0x0a
     bdc:	29 87       	std	Y+9, r18	; 0x09
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
     bde:	69 89       	ldd	r22, Y+17	; 0x11
     be0:	7a 89       	ldd	r23, Y+18	; 0x12
     be2:	8b 89       	ldd	r24, Y+19	; 0x13
     be4:	9c 89       	ldd	r25, Y+20	; 0x14
     be6:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     bea:	2d 81       	ldd	r18, Y+5	; 0x05
     bec:	3e 81       	ldd	r19, Y+6	; 0x06
     bee:	4f 81       	ldd	r20, Y+7	; 0x07
     bf0:	58 85       	ldd	r21, Y+8	; 0x08
     bf2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     bf6:	6b 01       	movw	r12, r22
     bf8:	7c 01       	movw	r14, r24
     bfa:	a9 85       	ldd	r26, Y+9	; 0x09
     bfc:	ba 85       	ldd	r27, Y+10	; 0x0a
     bfe:	6c 91       	ld	r22, X
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 ca 09 	call	0x1394	; 0x1394 <__floatsisf>
     c0a:	9b 01       	movw	r18, r22
     c0c:	ac 01       	movw	r20, r24
     c0e:	69 81       	ldd	r22, Y+1	; 0x01
     c10:	7a 81       	ldd	r23, Y+2	; 0x02
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	9c 81       	ldd	r25, Y+4	; 0x04
     c16:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
     c1e:	c7 01       	movw	r24, r14
     c20:	b6 01       	movw	r22, r12
     c22:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     c26:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     c2a:	e9 85       	ldd	r30, Y+9	; 0x09
     c2c:	fa 85       	ldd	r31, Y+10	; 0x0a
     c2e:	60 83       	st	Z, r22
     c30:	f4 e0       	ldi	r31, 0x04	; 4
     c32:	6f 1a       	sub	r6, r31
     c34:	71 08       	sbc	r7, r1
     c36:	24 e0       	ldi	r18, 0x04	; 4
     c38:	42 0e       	add	r4, r18
     c3a:	51 1c       	adc	r5, r1
     c3c:	34 e0       	ldi	r19, 0x04	; 4
     c3e:	a3 0e       	add	r10, r19
     c40:	b1 1c       	adc	r11, r1
     c42:	44 e0       	ldi	r20, 0x04	; 4
     c44:	84 0e       	add	r8, r20
     c46:	91 1c       	adc	r9, r1
     c48:	54 e0       	ldi	r21, 0x04	; 4
     c4a:	25 1a       	sub	r2, r21
     c4c:	31 08       	sbc	r3, r1
		timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < 10; i++)
     c4e:	0a 30       	cpi	r16, 0x0A	; 10
     c50:	11 05       	cpc	r17, r1
     c52:	09 f0       	breq	.+2      	; 0xc56 <seqDoublePingPongFunc+0x566>
     c54:	c2 cd       	rjmp	.-1148   	; 0x7da <seqDoublePingPongFunc+0xea>
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     c56:	30 91 b1 03 	lds	r19, 0x03B1
     c5a:	33 23       	and	r19, r19
     c5c:	31 f0       	breq	.+12     	; 0xc6a <seqDoublePingPongFunc+0x57a>
     c5e:	80 91 b0 03 	lds	r24, 0x03B0
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	80 93 b0 03 	sts	0x03B0, r24
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <seqDoublePingPongFunc+0x584>
	else led_i++;
     c6a:	80 91 b0 03 	lds	r24, 0x03B0
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	80 93 b0 03 	sts	0x03B0, r24
	if(led_i >= num_leds/2 || led_i < 0) {
     c74:	80 91 b0 03 	lds	r24, 0x03B0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c7c:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c7e:	86 17       	cp	r24, r22
     c80:	97 07       	cpc	r25, r23
     c82:	54 f1       	brlt	.+84     	; 0xcd8 <seqDoublePingPongFunc+0x5e8>
		color_i = (color_i+1)%numColors;
     c84:	80 91 af 03 	lds	r24, 0x03AF
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	60 91 00 02 	lds	r22, 0x0200
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__divmodhi4>
     c96:	80 93 af 03 	sts	0x03AF, r24
		led_dir = led_dir == 1 ? 0 : 1;
     c9a:	21 e0       	ldi	r18, 0x01	; 1
     c9c:	31 30       	cpi	r19, 0x01	; 1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <seqDoublePingPongFunc+0x5b2>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	20 93 b1 03 	sts	0x03B1, r18
		led_i = 0 + led_dir*num_leds/2-1;
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	ae 8d       	ldd	r26, Y+30	; 0x1e
     caa:	bf 8d       	ldd	r27, Y+31	; 0x1f
     cac:	2a 9f       	mul	r18, r26
     cae:	c0 01       	movw	r24, r0
     cb0:	2b 9f       	mul	r18, r27
     cb2:	90 0d       	add	r25, r0
     cb4:	3a 9f       	mul	r19, r26
     cb6:	90 0d       	add	r25, r0
     cb8:	11 24       	eor	r1, r1
     cba:	99 23       	and	r25, r25
     cbc:	0c f4       	brge	.+2      	; 0xcc0 <seqDoublePingPongFunc+0x5d0>
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	95 95       	asr	r25
     cc2:	87 95       	ror	r24
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	80 93 b0 03 	sts	0x03B0, r24
     cca:	06 c0       	rjmp	.+12     	; 0xcd8 <seqDoublePingPongFunc+0x5e8>
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     ccc:	30 91 b1 03 	lds	r19, 0x03B1
     cd0:	c6 cf       	rjmp	.-116    	; 0xc5e <seqDoublePingPongFunc+0x56e>
     cd2:	30 91 b1 03 	lds	r19, 0x03B1
     cd6:	c9 cf       	rjmp	.-110    	; 0xc6a <seqDoublePingPongFunc+0x57a>
	if(led_i >= num_leds/2 || led_i < 0) {
		color_i = (color_i+1)%numColors;
		led_dir = led_dir == 1 ? 0 : 1;
		led_i = 0 + led_dir*num_leds/2-1;
	}
}
     cd8:	a1 96       	adiw	r28, 0x21	; 33
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	9f 90       	pop	r9
     cfa:	8f 90       	pop	r8
     cfc:	7f 90       	pop	r7
     cfe:	6f 90       	pop	r6
     d00:	5f 90       	pop	r5
     d02:	4f 90       	pop	r4
     d04:	3f 90       	pop	r3
     d06:	2f 90       	pop	r2
     d08:	08 95       	ret

00000d0a <seqFadeFunc>:

static void seqFadeFunc(color_t *leds, int num_leds)
{
     d0a:	4f 92       	push	r4
     d0c:	5f 92       	push	r5
     d0e:	6f 92       	push	r6
     d10:	7f 92       	push	r7
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	6c 01       	movw	r12, r24
     d2a:	eb 01       	movw	r28, r22
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
     d2c:	f0 90 b5 03 	lds	r15, 0x03B5
     d30:	6f 2d       	mov	r22, r15
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	48 e4       	ldi	r20, 0x48	; 72
     d42:	52 e4       	ldi	r21, 0x42	; 66
     d44:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3>
     d48:	4b 01       	movw	r8, r22
     d4a:	5c 01       	movw	r10, r24
	for(int i = 0; i < num_leds; i++)
     d4c:	1c 16       	cp	r1, r28
     d4e:	1d 06       	cpc	r1, r29
     d50:	0c f0       	brlt	.+2      	; 0xd54 <seqFadeFunc+0x4a>
     d52:	48 c0       	rjmp	.+144    	; 0xde4 <seqFadeFunc+0xda>
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     d54:	e0 91 b4 03 	lds	r30, 0x03B4
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	e0 50       	subi	r30, 0x00	; 0
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	40 80       	ld	r4, Z
     d68:	51 80       	ldd	r5, Z+1	; 0x01
     d6a:	62 80       	ldd	r6, Z+2	; 0x02
     d6c:	73 80       	ldd	r7, Z+3	; 0x03
     d6e:	c3 01       	movw	r24, r6
     d70:	b2 01       	movw	r22, r4
     d72:	77 27       	eor	r23, r23
     d74:	88 27       	eor	r24, r24
     d76:	99 27       	eor	r25, r25
     d78:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     d7c:	a5 01       	movw	r20, r10
     d7e:	94 01       	movw	r18, r8
     d80:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     d84:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     d88:	06 2f       	mov	r16, r22
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     d8a:	65 2d       	mov	r22, r5
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     d96:	a5 01       	movw	r20, r10
     d98:	94 01       	movw	r18, r8
     d9a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     d9e:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     da2:	16 2f       	mov	r17, r22
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     da4:	66 2d       	mov	r22, r6
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     db0:	a5 01       	movw	r20, r10
     db2:	94 01       	movw	r18, r8
     db4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     db8:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     dbc:	f6 01       	movw	r30, r12
     dbe:	32 96       	adiw	r30, 0x02	; 2
     dc0:	cc 0f       	add	r28, r28
     dc2:	dd 1f       	adc	r29, r29
     dc4:	cc 0f       	add	r28, r28
     dc6:	dd 1f       	adc	r29, r29
     dc8:	22 96       	adiw	r28, 0x02	; 2
     dca:	c6 01       	movw	r24, r12
     dcc:	8c 0f       	add	r24, r28
     dce:	9d 1f       	adc	r25, r29
     dd0:	df 01       	movw	r26, r30
     dd2:	11 97       	sbiw	r26, 0x01	; 1
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     dd4:	0c 93       	st	X, r16
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     dd6:	10 83       	st	Z, r17
     dd8:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     dda:	6c 93       	st	X, r22
     ddc:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t timer = 0;
	static uint8_t time = 50;
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
     dde:	e8 17       	cp	r30, r24
     de0:	f9 07       	cpc	r31, r25
     de2:	b1 f7       	brne	.-20     	; 0xdd0 <seqFadeFunc+0xc6>
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
	}
	
	if(!led_dir)
     de4:	80 91 b3 03 	lds	r24, 0x03B3
     de8:	81 11       	cpse	r24, r1
     dea:	04 c0       	rjmp	.+8      	; 0xdf4 <seqFadeFunc+0xea>
	timer++;
     dec:	f3 94       	inc	r15
     dee:	f0 92 b5 03 	sts	0x03B5, r15
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <seqFadeFunc+0xf0>
	else
	timer--;
     df4:	fa 94       	dec	r15
     df6:	f0 92 b5 03 	sts	0x03B5, r15
	if(timer >= time)
     dfa:	80 91 b5 03 	lds	r24, 0x03B5
     dfe:	82 33       	cpi	r24, 0x32	; 50
     e00:	30 f0       	brcs	.+12     	; 0xe0e <seqFadeFunc+0x104>
	led_dir = 1;
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	90 93 b3 03 	sts	0x03B3, r25
	if(timer <= 0 && led_dir) {
     e08:	88 23       	and	r24, r24
     e0a:	39 f0       	breq	.+14     	; 0xe1a <seqFadeFunc+0x110>
     e0c:	13 c0       	rjmp	.+38     	; 0xe34 <seqFadeFunc+0x12a>
     e0e:	81 11       	cpse	r24, r1
     e10:	11 c0       	rjmp	.+34     	; 0xe34 <seqFadeFunc+0x12a>
     e12:	80 91 b3 03 	lds	r24, 0x03B3
     e16:	88 23       	and	r24, r24
     e18:	69 f0       	breq	.+26     	; 0xe34 <seqFadeFunc+0x12a>
		color_i = (color_i+1)%numColors;
     e1a:	80 91 b4 03 	lds	r24, 0x03B4
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	60 91 00 02 	lds	r22, 0x0200
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__divmodhi4>
     e2c:	80 93 b4 03 	sts	0x03B4, r24
		led_dir = 0;
     e30:	10 92 b3 03 	sts	0x03B3, r1
	}
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	7f 90       	pop	r7
     e4c:	6f 90       	pop	r6
     e4e:	5f 90       	pop	r5
     e50:	4f 90       	pop	r4
     e52:	08 95       	ret

00000e54 <seqSoftSwitchFunc>:

static void seqSoftSwitchFunc(color_t *leds, int num_leds)
{
     e54:	2f 92       	push	r2
     e56:	3f 92       	push	r3
     e58:	4f 92       	push	r4
     e5a:	5f 92       	push	r5
     e5c:	6f 92       	push	r6
     e5e:	7f 92       	push	r7
     e60:	8f 92       	push	r8
     e62:	9f 92       	push	r9
     e64:	af 92       	push	r10
     e66:	bf 92       	push	r11
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	2a 97       	sbiw	r28, 0x0a	; 10
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	1c 01       	movw	r2, r24
     e8a:	8b 01       	movw	r16, r22
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	
	float k = (float)timer/time;
     e8c:	20 91 b7 03 	lds	r18, 0x03B7
     e90:	2a 87       	std	Y+10, r18	; 0x0a
     e92:	62 2f       	mov	r22, r18
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	48 e4       	ldi	r20, 0x48	; 72
     ea4:	52 e4       	ldi	r21, 0x42	; 66
     ea6:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3>
     eaa:	69 83       	std	Y+1, r22	; 0x01
     eac:	7a 83       	std	Y+2, r23	; 0x02
     eae:	8b 83       	std	Y+3, r24	; 0x03
     eb0:	9c 83       	std	Y+4, r25	; 0x04
	for(int i = 0; i < num_leds; i++)
     eb2:	10 16       	cp	r1, r16
     eb4:	11 06       	cpc	r1, r17
     eb6:	0c f0       	brlt	.+2      	; 0xeba <seqSoftSwitchFunc+0x66>
     eb8:	b2 c0       	rjmp	.+356    	; 0x101e <seqSoftSwitchFunc+0x1ca>
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
     eba:	9b 01       	movw	r18, r22
     ebc:	ac 01       	movw	r20, r24
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 e8       	ldi	r24, 0x80	; 128
     ec4:	9f e3       	ldi	r25, 0x3F	; 63
     ec6:	0e 94 ba 08 	call	0x1174	; 0x1174 <__subsf3>
     eca:	6d 83       	std	Y+5, r22	; 0x05
     ecc:	7e 83       	std	Y+6, r23	; 0x06
     ece:	8f 83       	std	Y+7, r24	; 0x07
     ed0:	98 87       	std	Y+8, r25	; 0x08
     ed2:	80 91 b6 03 	lds	r24, 0x03B6
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	fc 01       	movw	r30, r24
     eda:	ee 0f       	add	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	e0 50       	subi	r30, 0x00	; 0
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 80       	ld	r8, Z
     ee8:	91 80       	ldd	r9, Z+1	; 0x01
     eea:	a2 80       	ldd	r10, Z+2	; 0x02
     eec:	b3 80       	ldd	r11, Z+3	; 0x03
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	60 91 00 02 	lds	r22, 0x0200
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__divmodhi4>
     efa:	fc 01       	movw	r30, r24
     efc:	ee 0f       	add	r30, r30
     efe:	ff 1f       	adc	r31, r31
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	e0 50       	subi	r30, 0x00	; 0
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	c0 80       	ld	r12, Z
     f0a:	d1 80       	ldd	r13, Z+1	; 0x01
     f0c:	e2 80       	ldd	r14, Z+2	; 0x02
     f0e:	f3 80       	ldd	r15, Z+3	; 0x03
     f10:	c5 01       	movw	r24, r10
     f12:	b4 01       	movw	r22, r8
     f14:	77 27       	eor	r23, r23
     f16:	88 27       	eor	r24, r24
     f18:	99 27       	eor	r25, r25
     f1a:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	6d 81       	ldd	r22, Y+5	; 0x05
     f24:	7e 81       	ldd	r23, Y+6	; 0x06
     f26:	8f 81       	ldd	r24, Y+7	; 0x07
     f28:	98 85       	ldd	r25, Y+8	; 0x08
     f2a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     f2e:	2b 01       	movw	r4, r22
     f30:	3c 01       	movw	r6, r24
     f32:	c7 01       	movw	r24, r14
     f34:	b6 01       	movw	r22, r12
     f36:	77 27       	eor	r23, r23
     f38:	88 27       	eor	r24, r24
     f3a:	99 27       	eor	r25, r25
     f3c:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     f40:	29 81       	ldd	r18, Y+1	; 0x01
     f42:	3a 81       	ldd	r19, Y+2	; 0x02
     f44:	4b 81       	ldd	r20, Y+3	; 0x03
     f46:	5c 81       	ldd	r21, Y+4	; 0x04
     f48:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     f4c:	9b 01       	movw	r18, r22
     f4e:	ac 01       	movw	r20, r24
     f50:	c3 01       	movw	r24, r6
     f52:	b2 01       	movw	r22, r4
     f54:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     f58:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     f5c:	69 87       	std	Y+9, r22	; 0x09
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
     f5e:	69 2d       	mov	r22, r9
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     f6a:	9b 01       	movw	r18, r22
     f6c:	ac 01       	movw	r20, r24
     f6e:	6d 81       	ldd	r22, Y+5	; 0x05
     f70:	7e 81       	ldd	r23, Y+6	; 0x06
     f72:	8f 81       	ldd	r24, Y+7	; 0x07
     f74:	98 85       	ldd	r25, Y+8	; 0x08
     f76:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     f7a:	2b 01       	movw	r4, r22
     f7c:	3c 01       	movw	r6, r24
     f7e:	6d 2d       	mov	r22, r13
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     f8a:	29 81       	ldd	r18, Y+1	; 0x01
     f8c:	3a 81       	ldd	r19, Y+2	; 0x02
     f8e:	4b 81       	ldd	r20, Y+3	; 0x03
     f90:	5c 81       	ldd	r21, Y+4	; 0x04
     f92:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     f96:	9b 01       	movw	r18, r22
     f98:	ac 01       	movw	r20, r24
     f9a:	c3 01       	movw	r24, r6
     f9c:	b2 01       	movw	r22, r4
     f9e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     fa2:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     fa6:	76 2e       	mov	r7, r22
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
     fa8:	6a 2d       	mov	r22, r10
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     fb4:	9b 01       	movw	r18, r22
     fb6:	ac 01       	movw	r20, r24
     fb8:	6d 81       	ldd	r22, Y+5	; 0x05
     fba:	7e 81       	ldd	r23, Y+6	; 0x06
     fbc:	8f 81       	ldd	r24, Y+7	; 0x07
     fbe:	98 85       	ldd	r25, Y+8	; 0x08
     fc0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     fc4:	4b 01       	movw	r8, r22
     fc6:	5c 01       	movw	r10, r24
     fc8:	6e 2d       	mov	r22, r14
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 c8 09 	call	0x1390	; 0x1390 <__floatunsisf>
     fd4:	29 81       	ldd	r18, Y+1	; 0x01
     fd6:	3a 81       	ldd	r19, Y+2	; 0x02
     fd8:	4b 81       	ldd	r20, Y+3	; 0x03
     fda:	5c 81       	ldd	r21, Y+4	; 0x04
     fdc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__mulsf3>
     fe0:	9b 01       	movw	r18, r22
     fe2:	ac 01       	movw	r20, r24
     fe4:	c5 01       	movw	r24, r10
     fe6:	b4 01       	movw	r22, r8
     fe8:	0e 94 bb 08 	call	0x1176	; 0x1176 <__addsf3>
     fec:	0e 94 99 09 	call	0x1332	; 0x1332 <__fixunssfsi>
     ff0:	f1 01       	movw	r30, r2
     ff2:	32 96       	adiw	r30, 0x02	; 2
     ff4:	00 0f       	add	r16, r16
     ff6:	11 1f       	adc	r17, r17
     ff8:	00 0f       	add	r16, r16
     ffa:	11 1f       	adc	r17, r17
     ffc:	0e 5f       	subi	r16, 0xFE	; 254
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	20 0e       	add	r2, r16
    1002:	31 1e       	adc	r3, r17
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	df 01       	movw	r26, r30
    100a:	11 97       	sbiw	r26, 0x01	; 1
	static uint8_t time = 50;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
    100c:	8c 93       	st	X, r24
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
    100e:	70 82       	st	Z, r7
    1010:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
    1012:	6c 93       	st	X, r22
    1014:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
    1016:	e2 15       	cp	r30, r2
    1018:	f3 05       	cpc	r31, r3
    101a:	b1 f7       	brne	.-20     	; 0x1008 <seqSoftSwitchFunc+0x1b4>
    101c:	9a 87       	std	Y+10, r25	; 0x0a
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
	}
	
	timer++;
    101e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	80 93 b7 03 	sts	0x03B7, r24
	if(timer > time) {
    1026:	83 33       	cpi	r24, 0x33	; 51
    1028:	68 f0       	brcs	.+26     	; 0x1044 <seqSoftSwitchFunc+0x1f0>
		color_i = (color_i+1)%numColors;
    102a:	80 91 b6 03 	lds	r24, 0x03B6
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	60 91 00 02 	lds	r22, 0x0200
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__divmodhi4>
    103c:	80 93 b6 03 	sts	0x03B6, r24
		timer = 0;
    1040:	10 92 b7 03 	sts	0x03B7, r1
	}
}
    1044:	2a 96       	adiw	r28, 0x0a	; 10
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	cf 90       	pop	r12
    1060:	bf 90       	pop	r11
    1062:	af 90       	pop	r10
    1064:	9f 90       	pop	r9
    1066:	8f 90       	pop	r8
    1068:	7f 90       	pop	r7
    106a:	6f 90       	pop	r6
    106c:	5f 90       	pop	r5
    106e:	4f 90       	pop	r4
    1070:	3f 90       	pop	r3
    1072:	2f 90       	pop	r2
    1074:	08 95       	ret

00001076 <seqStaticColor>:

static void seqStaticColor(color_t *leds, int num_leds)
{
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
	for(int i = 0; i < num_leds; i++)
    107a:	16 16       	cp	r1, r22
    107c:	17 06       	cpc	r1, r23
    107e:	b4 f4       	brge	.+44     	; 0x10ac <seqStaticColor+0x36>
		leds[i].val = colors[0];
    1080:	00 91 00 01 	lds	r16, 0x0100
    1084:	10 91 01 01 	lds	r17, 0x0101
    1088:	20 91 02 01 	lds	r18, 0x0102
    108c:	30 91 03 01 	lds	r19, 0x0103
    1090:	fc 01       	movw	r30, r24
    1092:	66 0f       	add	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	86 0f       	add	r24, r22
    109c:	97 1f       	adc	r25, r23
    109e:	01 93       	st	Z+, r16
    10a0:	11 93       	st	Z+, r17
    10a2:	21 93       	st	Z+, r18
    10a4:	31 93       	st	Z+, r19
	}
}

static void seqStaticColor(color_t *leds, int num_leds)
{
	for(int i = 0; i < num_leds; i++)
    10a6:	e8 17       	cp	r30, r24
    10a8:	f9 07       	cpc	r31, r25
    10aa:	c9 f7       	brne	.-14     	; 0x109e <seqStaticColor+0x28>
		leds[i].val = colors[0];
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <seqSetFunction>:

// ------------------------------------------------------------------- DEFINITIONS

void seqSetFunction(seqType_t type)
{
	seqType = type;
    10b2:	80 93 b8 03 	sts	0x03B8, r24
    10b6:	08 95       	ret

000010b8 <seqUpdate>:
}

void seqUpdate(color_t *leds, int num_leds)
{
	functions[seqType](leds, num_leds);
    10b8:	e0 91 b8 03 	lds	r30, 0x03B8
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	ef 5f       	subi	r30, 0xFF	; 255
    10c4:	fd 4f       	sbci	r31, 0xFD	; 253
    10c6:	01 90       	ld	r0, Z+
    10c8:	f0 81       	ld	r31, Z
    10ca:	e0 2d       	mov	r30, r0
    10cc:	09 95       	icall
    10ce:	08 95       	ret

000010d0 <seqSetColorRGB>:
	colors[i] = c;
}

void seqSetColorRGB(uint8_t i, uint8_t r, uint8_t g, uint8_t b)
{
	if(i >= numColors)
    10d0:	90 91 00 02 	lds	r25, 0x0200
    10d4:	89 17       	cp	r24, r25
    10d6:	60 f4       	brcc	.+24     	; 0x10f0 <seqSetColorRGB+0x20>
	
	color_t color;
	color.rgb.r = r;
	color.rgb.b = b;
	color.rgb.g = g;
	colors[i] = color.val;
    10d8:	e8 2f       	mov	r30, r24
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	ee 0f       	add	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	e0 50       	subi	r30, 0x00	; 0
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	20 83       	st	Z, r18
    10ea:	61 83       	std	Z+1, r22	; 0x01
    10ec:	42 83       	std	Z+2, r20	; 0x02
    10ee:	13 82       	std	Z+3, r1	; 0x03
    10f0:	08 95       	ret

000010f2 <wsInit>:

// ------------------------------------------------------------------- DEFINITIONS

void wsInit()
{
	WS_DDR |= WS_BIT;
    10f2:	53 9a       	sbi	0x0a, 3	; 10
    10f4:	08 95       	ret

000010f6 <wsSend>:
}

void wsSend(color_t *leds, int num_leds)
{
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	dc 01       	movw	r26, r24
    10fe:	eb 01       	movw	r28, r22
	for(uint8_t j = 0; j < num_leds; j++)
    1100:	1c 16       	cp	r1, r28
    1102:	1d 06       	cpc	r1, r29
    1104:	34 f1       	brlt	.+76     	; 0x1152 <wsSend+0x5c>
    1106:	31 c0       	rjmp	.+98     	; 0x116a <wsSend+0x74>
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1108:	40 81       	ld	r20, Z
    110a:	51 81       	ldd	r21, Z+1	; 0x01
    110c:	62 81       	ldd	r22, Z+2	; 0x02
    110e:	73 81       	ldd	r23, Z+3	; 0x03
    1110:	02 2e       	mov	r0, r18
    1112:	04 c0       	rjmp	.+8      	; 0x111c <wsSend+0x26>
    1114:	76 95       	lsr	r23
    1116:	67 95       	ror	r22
    1118:	57 95       	ror	r21
    111a:	47 95       	ror	r20
    111c:	0a 94       	dec	r0
    111e:	d2 f7       	brpl	.-12     	; 0x1114 <wsSend+0x1e>
    1120:	40 ff       	sbrs	r20, 0
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <wsSend+0x3c>
				WS_PORT |= WS_BIT;
    1124:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1126:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1128:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    112a:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    112c:	5b 9a       	sbi	0x0b, 3	; 11
				//WS_PORT |= WS_BIT;
				
				//WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
				WS_PORT &= ~WS_BIT;
    112e:	5b 98       	cbi	0x0b, 3	; 11
    1130:	06 c0       	rjmp	.+12     	; 0x113e <wsSend+0x48>
				} else {
				//WS_PORT |= WS_BIT;
				//WS_PORT |= WS_BIT;
				WS_PORT |= WS_BIT;
    1132:	5b 9a       	sbi	0x0b, 3	; 11
				
				WS_PORT &= ~WS_BIT;
    1134:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1136:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1138:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    113a:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    113c:	5b 98       	cbi	0x0b, 3	; 11
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	31 09       	sbc	r19, r1
    1142:	10 f7       	brcc	.-60     	; 0x1108 <wsSend+0x12>
	WS_DDR |= WS_BIT;
}

void wsSend(color_t *leds, int num_leds)
{
	for(uint8_t j = 0; j < num_leds; j++)
    1144:	9f 5f       	subi	r25, 0xFF	; 255
    1146:	29 2f       	mov	r18, r25
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	2c 17       	cp	r18, r28
    114c:	3d 07       	cpc	r19, r29
    114e:	24 f0       	brlt	.+8      	; 0x1158 <wsSend+0x62>
    1150:	0c c0       	rjmp	.+24     	; 0x116a <wsSend+0x74>
    1152:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1154:	17 e1       	ldi	r17, 0x17	; 23
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	fd 01       	movw	r30, r26
    115a:	24 e0       	ldi	r18, 0x04	; 4
    115c:	92 9f       	mul	r25, r18
    115e:	e0 0d       	add	r30, r0
    1160:	f1 1d       	adc	r31, r1
    1162:	11 24       	eor	r1, r1
    1164:	21 2f       	mov	r18, r17
    1166:	38 2f       	mov	r19, r24
    1168:	cf cf       	rjmp	.-98     	; 0x1108 <wsSend+0x12>
				WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
			}
		}
	}
	WS_PORT = 0;
    116a:	1b b8       	out	0x0b, r1	; 11
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	08 95       	ret

00001174 <__subsf3>:
    1174:	50 58       	subi	r21, 0x80	; 128

00001176 <__addsf3>:
    1176:	bb 27       	eor	r27, r27
    1178:	aa 27       	eor	r26, r26
    117a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__addsf3x>
    117e:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_round>
    1182:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_pscA>
    1186:	38 f0       	brcs	.+14     	; 0x1196 <__addsf3+0x20>
    1188:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_pscB>
    118c:	20 f0       	brcs	.+8      	; 0x1196 <__addsf3+0x20>
    118e:	39 f4       	brne	.+14     	; 0x119e <__addsf3+0x28>
    1190:	9f 3f       	cpi	r25, 0xFF	; 255
    1192:	19 f4       	brne	.+6      	; 0x119a <__addsf3+0x24>
    1194:	26 f4       	brtc	.+8      	; 0x119e <__addsf3+0x28>
    1196:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_nan>
    119a:	0e f4       	brtc	.+2      	; 0x119e <__addsf3+0x28>
    119c:	e0 95       	com	r30
    119e:	e7 fb       	bst	r30, 7
    11a0:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>

000011a4 <__addsf3x>:
    11a4:	e9 2f       	mov	r30, r25
    11a6:	0e 94 2d 0a 	call	0x145a	; 0x145a <__fp_split3>
    11aa:	58 f3       	brcs	.-42     	; 0x1182 <__addsf3+0xc>
    11ac:	ba 17       	cp	r27, r26
    11ae:	62 07       	cpc	r22, r18
    11b0:	73 07       	cpc	r23, r19
    11b2:	84 07       	cpc	r24, r20
    11b4:	95 07       	cpc	r25, r21
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__addsf3x+0x1c>
    11b8:	79 f4       	brne	.+30     	; 0x11d8 <__addsf3x+0x34>
    11ba:	a6 f5       	brtc	.+104    	; 0x1224 <__addsf3x+0x80>
    11bc:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__fp_zero>
    11c0:	0e f4       	brtc	.+2      	; 0x11c4 <__addsf3x+0x20>
    11c2:	e0 95       	com	r30
    11c4:	0b 2e       	mov	r0, r27
    11c6:	ba 2f       	mov	r27, r26
    11c8:	a0 2d       	mov	r26, r0
    11ca:	0b 01       	movw	r0, r22
    11cc:	b9 01       	movw	r22, r18
    11ce:	90 01       	movw	r18, r0
    11d0:	0c 01       	movw	r0, r24
    11d2:	ca 01       	movw	r24, r20
    11d4:	a0 01       	movw	r20, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	ff 27       	eor	r31, r31
    11da:	59 1b       	sub	r21, r25
    11dc:	99 f0       	breq	.+38     	; 0x1204 <__addsf3x+0x60>
    11de:	59 3f       	cpi	r21, 0xF9	; 249
    11e0:	50 f4       	brcc	.+20     	; 0x11f6 <__addsf3x+0x52>
    11e2:	50 3e       	cpi	r21, 0xE0	; 224
    11e4:	68 f1       	brcs	.+90     	; 0x1240 <__addsf3x+0x9c>
    11e6:	1a 16       	cp	r1, r26
    11e8:	f0 40       	sbci	r31, 0x00	; 0
    11ea:	a2 2f       	mov	r26, r18
    11ec:	23 2f       	mov	r18, r19
    11ee:	34 2f       	mov	r19, r20
    11f0:	44 27       	eor	r20, r20
    11f2:	58 5f       	subi	r21, 0xF8	; 248
    11f4:	f3 cf       	rjmp	.-26     	; 0x11dc <__addsf3x+0x38>
    11f6:	46 95       	lsr	r20
    11f8:	37 95       	ror	r19
    11fa:	27 95       	ror	r18
    11fc:	a7 95       	ror	r26
    11fe:	f0 40       	sbci	r31, 0x00	; 0
    1200:	53 95       	inc	r21
    1202:	c9 f7       	brne	.-14     	; 0x11f6 <__addsf3x+0x52>
    1204:	7e f4       	brtc	.+30     	; 0x1224 <__addsf3x+0x80>
    1206:	1f 16       	cp	r1, r31
    1208:	ba 0b       	sbc	r27, r26
    120a:	62 0b       	sbc	r22, r18
    120c:	73 0b       	sbc	r23, r19
    120e:	84 0b       	sbc	r24, r20
    1210:	ba f0       	brmi	.+46     	; 0x1240 <__addsf3x+0x9c>
    1212:	91 50       	subi	r25, 0x01	; 1
    1214:	a1 f0       	breq	.+40     	; 0x123e <__addsf3x+0x9a>
    1216:	ff 0f       	add	r31, r31
    1218:	bb 1f       	adc	r27, r27
    121a:	66 1f       	adc	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	c2 f7       	brpl	.-16     	; 0x1212 <__addsf3x+0x6e>
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <__addsf3x+0x9c>
    1224:	ba 0f       	add	r27, r26
    1226:	62 1f       	adc	r22, r18
    1228:	73 1f       	adc	r23, r19
    122a:	84 1f       	adc	r24, r20
    122c:	48 f4       	brcc	.+18     	; 0x1240 <__addsf3x+0x9c>
    122e:	87 95       	ror	r24
    1230:	77 95       	ror	r23
    1232:	67 95       	ror	r22
    1234:	b7 95       	ror	r27
    1236:	f7 95       	ror	r31
    1238:	9e 3f       	cpi	r25, 0xFE	; 254
    123a:	08 f0       	brcs	.+2      	; 0x123e <__addsf3x+0x9a>
    123c:	b0 cf       	rjmp	.-160    	; 0x119e <__addsf3+0x28>
    123e:	93 95       	inc	r25
    1240:	88 0f       	add	r24, r24
    1242:	08 f0       	brcs	.+2      	; 0x1246 <__addsf3x+0xa2>
    1244:	99 27       	eor	r25, r25
    1246:	ee 0f       	add	r30, r30
    1248:	97 95       	ror	r25
    124a:	87 95       	ror	r24
    124c:	08 95       	ret

0000124e <__divsf3>:
    124e:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divsf3x>
    1252:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_round>
    1256:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_pscB>
    125a:	58 f0       	brcs	.+22     	; 0x1272 <__divsf3+0x24>
    125c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_pscA>
    1260:	40 f0       	brcs	.+16     	; 0x1272 <__divsf3+0x24>
    1262:	29 f4       	brne	.+10     	; 0x126e <__divsf3+0x20>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	29 f0       	breq	.+10     	; 0x1272 <__divsf3+0x24>
    1268:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>
    126c:	51 11       	cpse	r21, r1
    126e:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_szero>
    1272:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_nan>

00001276 <__divsf3x>:
    1276:	0e 94 2d 0a 	call	0x145a	; 0x145a <__fp_split3>
    127a:	68 f3       	brcs	.-38     	; 0x1256 <__divsf3+0x8>

0000127c <__divsf3_pse>:
    127c:	99 23       	and	r25, r25
    127e:	b1 f3       	breq	.-20     	; 0x126c <__divsf3+0x1e>
    1280:	55 23       	and	r21, r21
    1282:	91 f3       	breq	.-28     	; 0x1268 <__divsf3+0x1a>
    1284:	95 1b       	sub	r25, r21
    1286:	55 0b       	sbc	r21, r21
    1288:	bb 27       	eor	r27, r27
    128a:	aa 27       	eor	r26, r26
    128c:	62 17       	cp	r22, r18
    128e:	73 07       	cpc	r23, r19
    1290:	84 07       	cpc	r24, r20
    1292:	38 f0       	brcs	.+14     	; 0x12a2 <__divsf3_pse+0x26>
    1294:	9f 5f       	subi	r25, 0xFF	; 255
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	22 0f       	add	r18, r18
    129a:	33 1f       	adc	r19, r19
    129c:	44 1f       	adc	r20, r20
    129e:	aa 1f       	adc	r26, r26
    12a0:	a9 f3       	breq	.-22     	; 0x128c <__divsf3_pse+0x10>
    12a2:	35 d0       	rcall	.+106    	; 0x130e <__divsf3_pse+0x92>
    12a4:	0e 2e       	mov	r0, r30
    12a6:	3a f0       	brmi	.+14     	; 0x12b6 <__divsf3_pse+0x3a>
    12a8:	e0 e8       	ldi	r30, 0x80	; 128
    12aa:	32 d0       	rcall	.+100    	; 0x1310 <__divsf3_pse+0x94>
    12ac:	91 50       	subi	r25, 0x01	; 1
    12ae:	50 40       	sbci	r21, 0x00	; 0
    12b0:	e6 95       	lsr	r30
    12b2:	00 1c       	adc	r0, r0
    12b4:	ca f7       	brpl	.-14     	; 0x12a8 <__divsf3_pse+0x2c>
    12b6:	2b d0       	rcall	.+86     	; 0x130e <__divsf3_pse+0x92>
    12b8:	fe 2f       	mov	r31, r30
    12ba:	29 d0       	rcall	.+82     	; 0x130e <__divsf3_pse+0x92>
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	bb 1f       	adc	r27, r27
    12c4:	26 17       	cp	r18, r22
    12c6:	37 07       	cpc	r19, r23
    12c8:	48 07       	cpc	r20, r24
    12ca:	ab 07       	cpc	r26, r27
    12cc:	b0 e8       	ldi	r27, 0x80	; 128
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__divsf3_pse+0x56>
    12d0:	bb 0b       	sbc	r27, r27
    12d2:	80 2d       	mov	r24, r0
    12d4:	bf 01       	movw	r22, r30
    12d6:	ff 27       	eor	r31, r31
    12d8:	93 58       	subi	r25, 0x83	; 131
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	3a f0       	brmi	.+14     	; 0x12ec <__divsf3_pse+0x70>
    12de:	9e 3f       	cpi	r25, 0xFE	; 254
    12e0:	51 05       	cpc	r21, r1
    12e2:	78 f0       	brcs	.+30     	; 0x1302 <__divsf3_pse+0x86>
    12e4:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>
    12e8:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_szero>
    12ec:	5f 3f       	cpi	r21, 0xFF	; 255
    12ee:	e4 f3       	brlt	.-8      	; 0x12e8 <__divsf3_pse+0x6c>
    12f0:	98 3e       	cpi	r25, 0xE8	; 232
    12f2:	d4 f3       	brlt	.-12     	; 0x12e8 <__divsf3_pse+0x6c>
    12f4:	86 95       	lsr	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b7 95       	ror	r27
    12fc:	f7 95       	ror	r31
    12fe:	9f 5f       	subi	r25, 0xFF	; 255
    1300:	c9 f7       	brne	.-14     	; 0x12f4 <__divsf3_pse+0x78>
    1302:	88 0f       	add	r24, r24
    1304:	91 1d       	adc	r25, r1
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret
    130e:	e1 e0       	ldi	r30, 0x01	; 1
    1310:	66 0f       	add	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	bb 1f       	adc	r27, r27
    1318:	62 17       	cp	r22, r18
    131a:	73 07       	cpc	r23, r19
    131c:	84 07       	cpc	r24, r20
    131e:	ba 07       	cpc	r27, r26
    1320:	20 f0       	brcs	.+8      	; 0x132a <__divsf3_pse+0xae>
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	84 0b       	sbc	r24, r20
    1328:	ba 0b       	sbc	r27, r26
    132a:	ee 1f       	adc	r30, r30
    132c:	88 f7       	brcc	.-30     	; 0x1310 <__divsf3_pse+0x94>
    132e:	e0 95       	com	r30
    1330:	08 95       	ret

00001332 <__fixunssfsi>:
    1332:	0e 94 35 0a 	call	0x146a	; 0x146a <__fp_splitA>
    1336:	88 f0       	brcs	.+34     	; 0x135a <__fixunssfsi+0x28>
    1338:	9f 57       	subi	r25, 0x7F	; 127
    133a:	98 f0       	brcs	.+38     	; 0x1362 <__fixunssfsi+0x30>
    133c:	b9 2f       	mov	r27, r25
    133e:	99 27       	eor	r25, r25
    1340:	b7 51       	subi	r27, 0x17	; 23
    1342:	b0 f0       	brcs	.+44     	; 0x1370 <__fixunssfsi+0x3e>
    1344:	e1 f0       	breq	.+56     	; 0x137e <__fixunssfsi+0x4c>
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	1a f0       	brmi	.+6      	; 0x1356 <__fixunssfsi+0x24>
    1350:	ba 95       	dec	r27
    1352:	c9 f7       	brne	.-14     	; 0x1346 <__fixunssfsi+0x14>
    1354:	14 c0       	rjmp	.+40     	; 0x137e <__fixunssfsi+0x4c>
    1356:	b1 30       	cpi	r27, 0x01	; 1
    1358:	91 f0       	breq	.+36     	; 0x137e <__fixunssfsi+0x4c>
    135a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fp_zero>
    135e:	b1 e0       	ldi	r27, 0x01	; 1
    1360:	08 95       	ret
    1362:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__fp_zero>
    1366:	67 2f       	mov	r22, r23
    1368:	78 2f       	mov	r23, r24
    136a:	88 27       	eor	r24, r24
    136c:	b8 5f       	subi	r27, 0xF8	; 248
    136e:	39 f0       	breq	.+14     	; 0x137e <__fixunssfsi+0x4c>
    1370:	b9 3f       	cpi	r27, 0xF9	; 249
    1372:	cc f3       	brlt	.-14     	; 0x1366 <__fixunssfsi+0x34>
    1374:	86 95       	lsr	r24
    1376:	77 95       	ror	r23
    1378:	67 95       	ror	r22
    137a:	b3 95       	inc	r27
    137c:	d9 f7       	brne	.-10     	; 0x1374 <__fixunssfsi+0x42>
    137e:	3e f4       	brtc	.+14     	; 0x138e <__fixunssfsi+0x5c>
    1380:	90 95       	com	r25
    1382:	80 95       	com	r24
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	08 95       	ret

00001390 <__floatunsisf>:
    1390:	e8 94       	clt
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <__floatsisf+0x12>

00001394 <__floatsisf>:
    1394:	97 fb       	bst	r25, 7
    1396:	3e f4       	brtc	.+14     	; 0x13a6 <__floatsisf+0x12>
    1398:	90 95       	com	r25
    139a:	80 95       	com	r24
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	99 23       	and	r25, r25
    13a8:	a9 f0       	breq	.+42     	; 0x13d4 <__floatsisf+0x40>
    13aa:	f9 2f       	mov	r31, r25
    13ac:	96 e9       	ldi	r25, 0x96	; 150
    13ae:	bb 27       	eor	r27, r27
    13b0:	93 95       	inc	r25
    13b2:	f6 95       	lsr	r31
    13b4:	87 95       	ror	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	b7 95       	ror	r27
    13bc:	f1 11       	cpse	r31, r1
    13be:	f8 cf       	rjmp	.-16     	; 0x13b0 <__floatsisf+0x1c>
    13c0:	fa f4       	brpl	.+62     	; 0x1400 <__floatsisf+0x6c>
    13c2:	bb 0f       	add	r27, r27
    13c4:	11 f4       	brne	.+4      	; 0x13ca <__floatsisf+0x36>
    13c6:	60 ff       	sbrs	r22, 0
    13c8:	1b c0       	rjmp	.+54     	; 0x1400 <__floatsisf+0x6c>
    13ca:	6f 5f       	subi	r22, 0xFF	; 255
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	16 c0       	rjmp	.+44     	; 0x1400 <__floatsisf+0x6c>
    13d4:	88 23       	and	r24, r24
    13d6:	11 f0       	breq	.+4      	; 0x13dc <__floatsisf+0x48>
    13d8:	96 e9       	ldi	r25, 0x96	; 150
    13da:	11 c0       	rjmp	.+34     	; 0x13fe <__floatsisf+0x6a>
    13dc:	77 23       	and	r23, r23
    13de:	21 f0       	breq	.+8      	; 0x13e8 <__floatsisf+0x54>
    13e0:	9e e8       	ldi	r25, 0x8E	; 142
    13e2:	87 2f       	mov	r24, r23
    13e4:	76 2f       	mov	r23, r22
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <__floatsisf+0x5e>
    13e8:	66 23       	and	r22, r22
    13ea:	71 f0       	breq	.+28     	; 0x1408 <__floatsisf+0x74>
    13ec:	96 e8       	ldi	r25, 0x86	; 134
    13ee:	86 2f       	mov	r24, r22
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	2a f0       	brmi	.+10     	; 0x1400 <__floatsisf+0x6c>
    13f6:	9a 95       	dec	r25
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	da f7       	brpl	.-10     	; 0x13f6 <__floatsisf+0x62>
    1400:	88 0f       	add	r24, r24
    1402:	96 95       	lsr	r25
    1404:	87 95       	ror	r24
    1406:	97 f9       	bld	r25, 7
    1408:	08 95       	ret

0000140a <__fp_inf>:
    140a:	97 f9       	bld	r25, 7
    140c:	9f 67       	ori	r25, 0x7F	; 127
    140e:	80 e8       	ldi	r24, 0x80	; 128
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	08 95       	ret

00001416 <__fp_nan>:
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	80 ec       	ldi	r24, 0xC0	; 192
    141a:	08 95       	ret

0000141c <__fp_pscA>:
    141c:	00 24       	eor	r0, r0
    141e:	0a 94       	dec	r0
    1420:	16 16       	cp	r1, r22
    1422:	17 06       	cpc	r1, r23
    1424:	18 06       	cpc	r1, r24
    1426:	09 06       	cpc	r0, r25
    1428:	08 95       	ret

0000142a <__fp_pscB>:
    142a:	00 24       	eor	r0, r0
    142c:	0a 94       	dec	r0
    142e:	12 16       	cp	r1, r18
    1430:	13 06       	cpc	r1, r19
    1432:	14 06       	cpc	r1, r20
    1434:	05 06       	cpc	r0, r21
    1436:	08 95       	ret

00001438 <__fp_round>:
    1438:	09 2e       	mov	r0, r25
    143a:	03 94       	inc	r0
    143c:	00 0c       	add	r0, r0
    143e:	11 f4       	brne	.+4      	; 0x1444 <__fp_round+0xc>
    1440:	88 23       	and	r24, r24
    1442:	52 f0       	brmi	.+20     	; 0x1458 <__fp_round+0x20>
    1444:	bb 0f       	add	r27, r27
    1446:	40 f4       	brcc	.+16     	; 0x1458 <__fp_round+0x20>
    1448:	bf 2b       	or	r27, r31
    144a:	11 f4       	brne	.+4      	; 0x1450 <__fp_round+0x18>
    144c:	60 ff       	sbrs	r22, 0
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <__fp_round+0x20>
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	08 95       	ret

0000145a <__fp_split3>:
    145a:	57 fd       	sbrc	r21, 7
    145c:	90 58       	subi	r25, 0x80	; 128
    145e:	44 0f       	add	r20, r20
    1460:	55 1f       	adc	r21, r21
    1462:	59 f0       	breq	.+22     	; 0x147a <__fp_splitA+0x10>
    1464:	5f 3f       	cpi	r21, 0xFF	; 255
    1466:	71 f0       	breq	.+28     	; 0x1484 <__fp_splitA+0x1a>
    1468:	47 95       	ror	r20

0000146a <__fp_splitA>:
    146a:	88 0f       	add	r24, r24
    146c:	97 fb       	bst	r25, 7
    146e:	99 1f       	adc	r25, r25
    1470:	61 f0       	breq	.+24     	; 0x148a <__fp_splitA+0x20>
    1472:	9f 3f       	cpi	r25, 0xFF	; 255
    1474:	79 f0       	breq	.+30     	; 0x1494 <__fp_splitA+0x2a>
    1476:	87 95       	ror	r24
    1478:	08 95       	ret
    147a:	12 16       	cp	r1, r18
    147c:	13 06       	cpc	r1, r19
    147e:	14 06       	cpc	r1, r20
    1480:	55 1f       	adc	r21, r21
    1482:	f2 cf       	rjmp	.-28     	; 0x1468 <__fp_split3+0xe>
    1484:	46 95       	lsr	r20
    1486:	f1 df       	rcall	.-30     	; 0x146a <__fp_splitA>
    1488:	08 c0       	rjmp	.+16     	; 0x149a <__fp_splitA+0x30>
    148a:	16 16       	cp	r1, r22
    148c:	17 06       	cpc	r1, r23
    148e:	18 06       	cpc	r1, r24
    1490:	99 1f       	adc	r25, r25
    1492:	f1 cf       	rjmp	.-30     	; 0x1476 <__fp_splitA+0xc>
    1494:	86 95       	lsr	r24
    1496:	71 05       	cpc	r23, r1
    1498:	61 05       	cpc	r22, r1
    149a:	08 94       	sec
    149c:	08 95       	ret

0000149e <__fp_zero>:
    149e:	e8 94       	clt

000014a0 <__fp_szero>:
    14a0:	bb 27       	eor	r27, r27
    14a2:	66 27       	eor	r22, r22
    14a4:	77 27       	eor	r23, r23
    14a6:	cb 01       	movw	r24, r22
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret

000014ac <__mulsf3>:
    14ac:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__mulsf3x>
    14b0:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_round>
    14b4:	0e 94 0e 0a 	call	0x141c	; 0x141c <__fp_pscA>
    14b8:	38 f0       	brcs	.+14     	; 0x14c8 <__mulsf3+0x1c>
    14ba:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_pscB>
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__mulsf3+0x1c>
    14c0:	95 23       	and	r25, r21
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <__mulsf3+0x1c>
    14c4:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>
    14c8:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_nan>
    14cc:	11 24       	eor	r1, r1
    14ce:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_szero>

000014d2 <__mulsf3x>:
    14d2:	0e 94 2d 0a 	call	0x145a	; 0x145a <__fp_split3>
    14d6:	70 f3       	brcs	.-36     	; 0x14b4 <__mulsf3+0x8>

000014d8 <__mulsf3_pse>:
    14d8:	95 9f       	mul	r25, r21
    14da:	c1 f3       	breq	.-16     	; 0x14cc <__mulsf3+0x20>
    14dc:	95 0f       	add	r25, r21
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	55 1f       	adc	r21, r21
    14e2:	62 9f       	mul	r22, r18
    14e4:	f0 01       	movw	r30, r0
    14e6:	72 9f       	mul	r23, r18
    14e8:	bb 27       	eor	r27, r27
    14ea:	f0 0d       	add	r31, r0
    14ec:	b1 1d       	adc	r27, r1
    14ee:	63 9f       	mul	r22, r19
    14f0:	aa 27       	eor	r26, r26
    14f2:	f0 0d       	add	r31, r0
    14f4:	b1 1d       	adc	r27, r1
    14f6:	aa 1f       	adc	r26, r26
    14f8:	64 9f       	mul	r22, r20
    14fa:	66 27       	eor	r22, r22
    14fc:	b0 0d       	add	r27, r0
    14fe:	a1 1d       	adc	r26, r1
    1500:	66 1f       	adc	r22, r22
    1502:	82 9f       	mul	r24, r18
    1504:	22 27       	eor	r18, r18
    1506:	b0 0d       	add	r27, r0
    1508:	a1 1d       	adc	r26, r1
    150a:	62 1f       	adc	r22, r18
    150c:	73 9f       	mul	r23, r19
    150e:	b0 0d       	add	r27, r0
    1510:	a1 1d       	adc	r26, r1
    1512:	62 1f       	adc	r22, r18
    1514:	83 9f       	mul	r24, r19
    1516:	a0 0d       	add	r26, r0
    1518:	61 1d       	adc	r22, r1
    151a:	22 1f       	adc	r18, r18
    151c:	74 9f       	mul	r23, r20
    151e:	33 27       	eor	r19, r19
    1520:	a0 0d       	add	r26, r0
    1522:	61 1d       	adc	r22, r1
    1524:	23 1f       	adc	r18, r19
    1526:	84 9f       	mul	r24, r20
    1528:	60 0d       	add	r22, r0
    152a:	21 1d       	adc	r18, r1
    152c:	82 2f       	mov	r24, r18
    152e:	76 2f       	mov	r23, r22
    1530:	6a 2f       	mov	r22, r26
    1532:	11 24       	eor	r1, r1
    1534:	9f 57       	subi	r25, 0x7F	; 127
    1536:	50 40       	sbci	r21, 0x00	; 0
    1538:	9a f0       	brmi	.+38     	; 0x1560 <__mulsf3_pse+0x88>
    153a:	f1 f0       	breq	.+60     	; 0x1578 <__mulsf3_pse+0xa0>
    153c:	88 23       	and	r24, r24
    153e:	4a f0       	brmi	.+18     	; 0x1552 <__mulsf3_pse+0x7a>
    1540:	ee 0f       	add	r30, r30
    1542:	ff 1f       	adc	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	91 50       	subi	r25, 0x01	; 1
    154e:	50 40       	sbci	r21, 0x00	; 0
    1550:	a9 f7       	brne	.-22     	; 0x153c <__mulsf3_pse+0x64>
    1552:	9e 3f       	cpi	r25, 0xFE	; 254
    1554:	51 05       	cpc	r21, r1
    1556:	80 f0       	brcs	.+32     	; 0x1578 <__mulsf3_pse+0xa0>
    1558:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_inf>
    155c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_szero>
    1560:	5f 3f       	cpi	r21, 0xFF	; 255
    1562:	e4 f3       	brlt	.-8      	; 0x155c <__mulsf3_pse+0x84>
    1564:	98 3e       	cpi	r25, 0xE8	; 232
    1566:	d4 f3       	brlt	.-12     	; 0x155c <__mulsf3_pse+0x84>
    1568:	86 95       	lsr	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f7 95       	ror	r31
    1572:	e7 95       	ror	r30
    1574:	9f 5f       	subi	r25, 0xFF	; 255
    1576:	c1 f7       	brne	.-16     	; 0x1568 <__mulsf3_pse+0x90>
    1578:	fe 2b       	or	r31, r30
    157a:	88 0f       	add	r24, r24
    157c:	91 1d       	adc	r25, r1
    157e:	96 95       	lsr	r25
    1580:	87 95       	ror	r24
    1582:	97 f9       	bld	r25, 7
    1584:	08 95       	ret

00001586 <__divmodhi4>:
    1586:	97 fb       	bst	r25, 7
    1588:	07 2e       	mov	r0, r23
    158a:	16 f4       	brtc	.+4      	; 0x1590 <__divmodhi4+0xa>
    158c:	00 94       	com	r0
    158e:	07 d0       	rcall	.+14     	; 0x159e <__divmodhi4_neg1>
    1590:	77 fd       	sbrc	r23, 7
    1592:	09 d0       	rcall	.+18     	; 0x15a6 <__divmodhi4_neg2>
    1594:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__udivmodhi4>
    1598:	07 fc       	sbrc	r0, 7
    159a:	05 d0       	rcall	.+10     	; 0x15a6 <__divmodhi4_neg2>
    159c:	3e f4       	brtc	.+14     	; 0x15ac <__divmodhi4_exit>

0000159e <__divmodhi4_neg1>:
    159e:	90 95       	com	r25
    15a0:	81 95       	neg	r24
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	08 95       	ret

000015a6 <__divmodhi4_neg2>:
    15a6:	70 95       	com	r23
    15a8:	61 95       	neg	r22
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255

000015ac <__divmodhi4_exit>:
    15ac:	08 95       	ret

000015ae <__divmodsi4>:
    15ae:	05 2e       	mov	r0, r21
    15b0:	97 fb       	bst	r25, 7
    15b2:	1e f4       	brtc	.+6      	; 0x15ba <__divmodsi4+0xc>
    15b4:	00 94       	com	r0
    15b6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__negsi2>
    15ba:	57 fd       	sbrc	r21, 7
    15bc:	07 d0       	rcall	.+14     	; 0x15cc <__divmodsi4_neg2>
    15be:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__udivmodsi4>
    15c2:	07 fc       	sbrc	r0, 7
    15c4:	03 d0       	rcall	.+6      	; 0x15cc <__divmodsi4_neg2>
    15c6:	4e f4       	brtc	.+18     	; 0x15da <__divmodsi4_exit>
    15c8:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__negsi2>

000015cc <__divmodsi4_neg2>:
    15cc:	50 95       	com	r21
    15ce:	40 95       	com	r20
    15d0:	30 95       	com	r19
    15d2:	21 95       	neg	r18
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	4f 4f       	sbci	r20, 0xFF	; 255
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255

000015da <__divmodsi4_exit>:
    15da:	08 95       	ret

000015dc <__negsi2>:
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	08 95       	ret

000015ec <__udivmodhi4>:
    15ec:	aa 1b       	sub	r26, r26
    15ee:	bb 1b       	sub	r27, r27
    15f0:	51 e1       	ldi	r21, 0x11	; 17
    15f2:	07 c0       	rjmp	.+14     	; 0x1602 <__udivmodhi4_ep>

000015f4 <__udivmodhi4_loop>:
    15f4:	aa 1f       	adc	r26, r26
    15f6:	bb 1f       	adc	r27, r27
    15f8:	a6 17       	cp	r26, r22
    15fa:	b7 07       	cpc	r27, r23
    15fc:	10 f0       	brcs	.+4      	; 0x1602 <__udivmodhi4_ep>
    15fe:	a6 1b       	sub	r26, r22
    1600:	b7 0b       	sbc	r27, r23

00001602 <__udivmodhi4_ep>:
    1602:	88 1f       	adc	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	5a 95       	dec	r21
    1608:	a9 f7       	brne	.-22     	; 0x15f4 <__udivmodhi4_loop>
    160a:	80 95       	com	r24
    160c:	90 95       	com	r25
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	08 95       	ret

00001614 <__udivmodsi4>:
    1614:	a1 e2       	ldi	r26, 0x21	; 33
    1616:	1a 2e       	mov	r1, r26
    1618:	aa 1b       	sub	r26, r26
    161a:	bb 1b       	sub	r27, r27
    161c:	fd 01       	movw	r30, r26
    161e:	0d c0       	rjmp	.+26     	; 0x163a <__udivmodsi4_ep>

00001620 <__udivmodsi4_loop>:
    1620:	aa 1f       	adc	r26, r26
    1622:	bb 1f       	adc	r27, r27
    1624:	ee 1f       	adc	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	a2 17       	cp	r26, r18
    162a:	b3 07       	cpc	r27, r19
    162c:	e4 07       	cpc	r30, r20
    162e:	f5 07       	cpc	r31, r21
    1630:	20 f0       	brcs	.+8      	; 0x163a <__udivmodsi4_ep>
    1632:	a2 1b       	sub	r26, r18
    1634:	b3 0b       	sbc	r27, r19
    1636:	e4 0b       	sbc	r30, r20
    1638:	f5 0b       	sbc	r31, r21

0000163a <__udivmodsi4_ep>:
    163a:	66 1f       	adc	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	88 1f       	adc	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	1a 94       	dec	r1
    1644:	69 f7       	brne	.-38     	; 0x1620 <__udivmodsi4_loop>
    1646:	60 95       	com	r22
    1648:	70 95       	com	r23
    164a:	80 95       	com	r24
    164c:	90 95       	com	r25
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	bd 01       	movw	r22, r26
    1654:	cf 01       	movw	r24, r30
    1656:	08 95       	ret

00001658 <_exit>:
    1658:	f8 94       	cli

0000165a <__stop_program>:
    165a:	ff cf       	rjmp	.-2      	; 0x165a <__stop_program>
