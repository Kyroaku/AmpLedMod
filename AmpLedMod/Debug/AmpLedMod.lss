
AmpLedMod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00002720  000027b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000294  00800158  00800158  0000280c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000159b  00000000  00000000  000029c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000759  00000000  00000000  00003f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e1  00000000  00000000  000046bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00004fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  00005560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000198f  00000000  00000000  00005b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000074ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	bd 01       	movw	r22, r26
      6a:	c1 01       	movw	r24, r2
      6c:	e4 01       	movw	r28, r8
      6e:	f0 01       	movw	r30, r0
      70:	e8 01       	movw	r28, r16
      72:	ec 01       	movw	r28, r24
      74:	f4 01       	movw	r30, r8
      76:	05 a8       	ldd	r0, Z+53	; 0x35
      78:	4c cd       	rjmp	.-1384   	; 0xfffffb12 <__eeprom_end+0xff7efb12>
      7a:	b2 d4       	rcall	.+2404   	; 0x9e0 <seqDoublePingPongFunc+0xdc>
      7c:	4e b9       	out	0x0e, r20	; 14
      7e:	38 36       	cpi	r19, 0x68	; 104
      80:	a9 02       	muls	r26, r25
      82:	0c 50       	subi	r16, 0x0C	; 12
      84:	b9 91       	ld	r27, Y+
      86:	86 88       	ldd	r8, Z+22	; 0x16
      88:	08 3c       	cpi	r16, 0xC8	; 200
      8a:	a6 aa       	std	Z+54, r10	; 0x36
      8c:	aa 2a       	or	r10, r26
      8e:	be 00       	.word	0x00be	; ????
      90:	00 00       	nop
      92:	80 3f       	cpi	r24, 0xF0	; 240

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e0 e2       	ldi	r30, 0x20	; 32
      a8:	f7 e2       	ldi	r31, 0x27	; 39
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a8 35       	cpi	r26, 0x58	; 88
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	23 e0       	ldi	r18, 0x03	; 3
      b8:	a8 e5       	ldi	r26, 0x58	; 88
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	ac 3e       	cpi	r26, 0xEC	; 236
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
      ca:	0c 94 8e 13 	jmp	0x271c	; 0x271c <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <bluetoothGetFrame>:
static volatile uint8_t ringBufferTmp = 0;

// ----------------------------------------------------------------------- Definitions

int8_t bluetoothGetFrame(void *frame, uint8_t max_len)
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	dc 01       	movw	r26, r24
	uint8_t *data = frame;
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
      d8:	40 91 59 01 	lds	r20, 0x0159
      dc:	80 91 5a 01 	lds	r24, 0x015A
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	48 1b       	sub	r20, r24
      e4:	51 09       	sbc	r21, r1
	if(len < 0) {
      e6:	0a f0       	brmi	.+2      	; 0xea <bluetoothGetFrame+0x18>
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <bluetoothGetFrame+0x188>
		len += RING_BUFFER_SIZE;
      ea:	40 58       	subi	r20, 0x80	; 128
      ec:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	if(len < 2) {
      ee:	42 30       	cpi	r20, 0x02	; 2
      f0:	51 05       	cpc	r21, r1
      f2:	0c f4       	brge	.+2      	; 0xf6 <bluetoothGetFrame+0x24>
      f4:	ac c0       	rjmp	.+344    	; 0x24e <bluetoothGetFrame+0x17c>
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
	{
		/* Look for start byte. */
		if(RING_BUF_AT(ringBufferReadPos) == 0xFF) {
      f6:	e0 91 5a 01 	lds	r30, 0x015A
      fa:	ef 77       	andi	r30, 0x7F	; 127
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	e5 5a       	subi	r30, 0xA5	; 165
     100:	fe 4f       	sbci	r31, 0xFE	; 254
     102:	80 81       	ld	r24, Z
     104:	8f 3f       	cpi	r24, 0xFF	; 255
     106:	c1 f4       	brne	.+48     	; 0x138 <bluetoothGetFrame+0x66>
     108:	09 c0       	rjmp	.+18     	; 0x11c <bluetoothGetFrame+0x4a>
     10a:	e0 91 5a 01 	lds	r30, 0x015A
     10e:	ef 77       	andi	r30, 0x7F	; 127
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	e5 5a       	subi	r30, 0xA5	; 165
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	90 81       	ld	r25, Z
     118:	9f 3f       	cpi	r25, 0xFF	; 255
     11a:	71 f4       	brne	.+28     	; 0x138 <bluetoothGetFrame+0x66>
			/* Check if whole frame is in ring buffer. */
			if(len-2 >= RING_BUF_AT(ringBufferReadPos+1)) {
     11c:	e0 91 5a 01 	lds	r30, 0x015A
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	e4 5a       	subi	r30, 0xA4	; 164
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	80 81       	ld	r24, Z
     128:	42 50       	subi	r20, 0x02	; 2
     12a:	51 09       	sbc	r21, r1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	48 17       	cp	r20, r24
     130:	59 07       	cpc	r21, r25
     132:	c4 f4       	brge	.+48     	; 0x164 <bluetoothGetFrame+0x92>
				break;
			} else {
				/* Frame is not received yet. */
				return 0;
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	96 c0       	rjmp	.+300    	; 0x264 <bluetoothGetFrame+0x192>
			}
		} else {
			RING_BUF_INC(ringBufferReadPos);
     138:	20 91 5a 01 	lds	r18, 0x015A
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	2f 5f       	subi	r18, 0xFF	; 255
     140:	3f 4f       	sbci	r19, 0xFF	; 255
     142:	2f 77       	andi	r18, 0x7F	; 127
     144:	30 78       	andi	r19, 0x80	; 128
     146:	33 23       	and	r19, r19
     148:	34 f4       	brge	.+12     	; 0x156 <bluetoothGetFrame+0x84>
     14a:	21 50       	subi	r18, 0x01	; 1
     14c:	31 09       	sbc	r19, r1
     14e:	20 68       	ori	r18, 0x80	; 128
     150:	3f 6f       	ori	r19, 0xFF	; 255
     152:	2f 5f       	subi	r18, 0xFF	; 255
     154:	3f 4f       	sbci	r19, 0xFF	; 255
     156:	20 93 5a 01 	sts	0x015A, r18
			len--;
     15a:	41 50       	subi	r20, 0x01	; 1
     15c:	51 09       	sbc	r21, r1
	if(len < 2) {
		return 0;
	}
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
     15e:	42 30       	cpi	r20, 0x02	; 2
     160:	51 05       	cpc	r21, r1
     162:	9c f6       	brge	.-90     	; 0x10a <bluetoothGetFrame+0x38>
			RING_BUF_INC(ringBufferReadPos);
			len--;
		}
	}
	
	len = RING_BUF_AT(ringBufferReadPos+1);
     164:	e0 91 5a 01 	lds	r30, 0x015A
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	e4 5a       	subi	r30, 0xA4	; 164
     16c:	fe 4f       	sbci	r31, 0xFE	; 254
     16e:	40 81       	ld	r20, Z
     170:	24 2f       	mov	r18, r20
     172:	30 e0       	ldi	r19, 0x00	; 0
	RING_BUF_INC(ringBufferReadPos);
     174:	80 91 5a 01 	lds	r24, 0x015A
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	8f 77       	andi	r24, 0x7F	; 127
     17e:	90 78       	andi	r25, 0x80	; 128
     180:	99 23       	and	r25, r25
     182:	24 f4       	brge	.+8      	; 0x18c <bluetoothGetFrame+0xba>
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	80 68       	ori	r24, 0x80	; 128
     188:	9f 6f       	ori	r25, 0xFF	; 255
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	80 93 5a 01 	sts	0x015A, r24
	RING_BUF_INC(ringBufferReadPos);
     190:	80 91 5a 01 	lds	r24, 0x015A
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	8f 77       	andi	r24, 0x7F	; 127
     19a:	90 78       	andi	r25, 0x80	; 128
     19c:	99 23       	and	r25, r25
     19e:	24 f4       	brge	.+8      	; 0x1a8 <bluetoothGetFrame+0xd6>
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	80 68       	ori	r24, 0x80	; 128
     1a4:	9f 6f       	ori	r25, 0xFF	; 255
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	80 93 5a 01 	sts	0x015A, r24
	if(len > max_len)
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	62 17       	cp	r22, r18
     1b0:	73 07       	cpc	r23, r19
     1b2:	0c f4       	brge	.+2      	; 0x1b6 <bluetoothGetFrame+0xe4>
     1b4:	4e c0       	rjmp	.+156    	; 0x252 <bluetoothGetFrame+0x180>
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
     1b6:	12 16       	cp	r1, r18
     1b8:	13 06       	cpc	r1, r19
     1ba:	04 f5       	brge	.+64     	; 0x1fc <bluetoothGetFrame+0x12a>
     1bc:	ed 01       	movw	r28, r26
     1be:	a4 0f       	add	r26, r20
     1c0:	b1 1d       	adc	r27, r1
	{
		tmp = RING_BUF_AT(ringBufferReadPos);
     1c2:	e0 91 5a 01 	lds	r30, 0x015A
     1c6:	ef 77       	andi	r30, 0x7F	; 127
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	e5 5a       	subi	r30, 0xA5	; 165
     1cc:	fe 4f       	sbci	r31, 0xFE	; 254
     1ce:	90 81       	ld	r25, Z
		checksum += tmp;
     1d0:	49 0f       	add	r20, r25
		data[i] = tmp;
     1d2:	99 93       	st	Y+, r25
		RING_BUF_INC(ringBufferReadPos);
     1d4:	20 91 5a 01 	lds	r18, 0x015A
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	2f 5f       	subi	r18, 0xFF	; 255
     1dc:	3f 4f       	sbci	r19, 0xFF	; 255
     1de:	2f 77       	andi	r18, 0x7F	; 127
     1e0:	30 78       	andi	r19, 0x80	; 128
     1e2:	33 23       	and	r19, r19
     1e4:	34 f4       	brge	.+12     	; 0x1f2 <bluetoothGetFrame+0x120>
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	31 09       	sbc	r19, r1
     1ea:	20 68       	ori	r18, 0x80	; 128
     1ec:	3f 6f       	ori	r19, 0xFF	; 255
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	20 93 5a 01 	sts	0x015A, r18
	if(len > max_len)
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
     1f6:	ca 17       	cp	r28, r26
     1f8:	db 07       	cpc	r29, r27
     1fa:	19 f7       	brne	.-58     	; 0x1c2 <bluetoothGetFrame+0xf0>
		tmp = RING_BUF_AT(ringBufferReadPos);
		checksum += tmp;
		data[i] = tmp;
		RING_BUF_INC(ringBufferReadPos);
	}
	if(checksum == RING_BUF_AT(ringBufferReadPos)) {
     1fc:	e0 91 5a 01 	lds	r30, 0x015A
     200:	ef 77       	andi	r30, 0x7F	; 127
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	e5 5a       	subi	r30, 0xA5	; 165
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	80 81       	ld	r24, Z
     20a:	84 13       	cpse	r24, r20
     20c:	10 c0       	rjmp	.+32     	; 0x22e <bluetoothGetFrame+0x15c>
		RING_BUF_INC(ringBufferReadPos);
     20e:	80 91 5a 01 	lds	r24, 0x015A
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	8f 77       	andi	r24, 0x7F	; 127
     218:	90 78       	andi	r25, 0x80	; 128
     21a:	99 23       	and	r25, r25
     21c:	24 f4       	brge	.+8      	; 0x226 <bluetoothGetFrame+0x154>
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	80 68       	ori	r24, 0x80	; 128
     222:	9f 6f       	ori	r25, 0xFF	; 255
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	80 93 5a 01 	sts	0x015A, r24
		return 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	1b c0       	rjmp	.+54     	; 0x264 <bluetoothGetFrame+0x192>
	} else {
		RING_BUF_INC(ringBufferReadPos);
     22e:	80 91 5a 01 	lds	r24, 0x015A
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	8f 77       	andi	r24, 0x7F	; 127
     238:	90 78       	andi	r25, 0x80	; 128
     23a:	99 23       	and	r25, r25
     23c:	24 f4       	brge	.+8      	; 0x246 <bluetoothGetFrame+0x174>
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	80 68       	ori	r24, 0x80	; 128
     242:	9f 6f       	ori	r25, 0xFF	; 255
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	80 93 5a 01 	sts	0x015A, r24
		return 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0b c0       	rjmp	.+22     	; 0x264 <bluetoothGetFrame+0x192>
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
		return 0;
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	09 c0       	rjmp	.+18     	; 0x264 <bluetoothGetFrame+0x192>
	
	len = RING_BUF_AT(ringBufferReadPos+1);
	RING_BUF_INC(ringBufferReadPos);
	RING_BUF_INC(ringBufferReadPos);
	if(len > max_len)
		return 0;
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	07 c0       	rjmp	.+14     	; 0x264 <bluetoothGetFrame+0x192>
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
		return 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	05 c0       	rjmp	.+10     	; 0x264 <bluetoothGetFrame+0x192>
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
     25a:	42 30       	cpi	r20, 0x02	; 2
     25c:	51 05       	cpc	r21, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <bluetoothGetFrame+0x190>
     260:	4a cf       	rjmp	.-364    	; 0xf6 <bluetoothGetFrame+0x24>
     262:	f9 cf       	rjmp	.-14     	; 0x256 <bluetoothGetFrame+0x184>
		return 1;
	} else {
		RING_BUF_INC(ringBufferReadPos);
		return 0;
	}
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <__vector_18>:

ISR(USART_RX_vect)
{
     26a:	1f 92       	push	r1
     26c:	0f 92       	push	r0
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	0f 92       	push	r0
     272:	11 24       	eor	r1, r1
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	ef 93       	push	r30
     27a:	ff 93       	push	r31
	ringBufferTmp = (ringBufferWritePos+1)%RING_BUFFER_SIZE;
     27c:	80 91 59 01 	lds	r24, 0x0159
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	8f 77       	andi	r24, 0x7F	; 127
     286:	90 78       	andi	r25, 0x80	; 128
     288:	99 23       	and	r25, r25
     28a:	24 f4       	brge	.+8      	; 0x294 <__vector_18+0x2a>
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	80 68       	ori	r24, 0x80	; 128
     290:	9f 6f       	ori	r25, 0xFF	; 255
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	80 93 58 01 	sts	0x0158, r24
	if(ringBufferTmp != ringBufferReadPos)
     298:	90 91 58 01 	lds	r25, 0x0158
     29c:	80 91 5a 01 	lds	r24, 0x015A
     2a0:	98 17       	cp	r25, r24
     2a2:	61 f0       	breq	.+24     	; 0x2bc <__vector_18+0x52>
	{
		ringBuffer[ringBufferWritePos] = UDR0;
     2a4:	e0 91 59 01 	lds	r30, 0x0159
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 91 c6 00 	lds	r24, 0x00C6
     2ae:	e5 5a       	subi	r30, 0xA5	; 165
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	80 83       	st	Z, r24
		ringBufferWritePos = ringBufferTmp;
     2b4:	80 91 58 01 	lds	r24, 0x0158
     2b8:	80 93 59 01 	sts	0x0159, r24
	}
}
     2bc:	ff 91       	pop	r31
     2be:	ef 91       	pop	r30
     2c0:	9f 91       	pop	r25
     2c2:	8f 91       	pop	r24
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <bluetoothInit>:

void bluetoothInit(unsigned int baudrate)
{
	/* Set baudrate. */
	unsigned int ubrr = (F_CPU / 16 / baudrate - 1);
     2ce:	9c 01       	movw	r18, r24
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	60 e2       	ldi	r22, 0x20	; 32
     2d6:	71 ea       	ldi	r23, 0xA1	; 161
     2d8:	87 e0       	ldi	r24, 0x07	; 7
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 33 13 	call	0x2666	; 0x2666 <__divmodsi4>
     2e0:	21 50       	subi	r18, 0x01	; 1
     2e2:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
     2e4:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)(ubrr);
     2e8:	20 93 c4 00 	sts	0x00C4, r18
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); /* Enable USART RX, TX, interrupt for RX. */
     2ec:	88 e9       	ldi	r24, 0x98	; 152
     2ee:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); /* Set USART 8bit size data. */
     2f2:	86 e0       	ldi	r24, 0x06	; 6
     2f4:	80 93 c2 00 	sts	0x00C2, r24
	
	sei();
     2f8:	78 94       	sei
     2fa:	08 95       	ret

000002fc <main>:
static void handleFrame(frame_t *frame);

// ----------------------------------------------------------------------- Definitions

int main(void)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	e2 97       	sbiw	r28, 0x32	; 50
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	eb ed       	ldi	r30, 0xDB	; 219
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	8b eb       	ldi	r24, 0xBB	; 187
     316:	93 e0       	ldi	r25, 0x03	; 3
	/* Buffer for frame received from controller. */
	frame_t frame;
	
	/* Reset leds colors. */
	for(int i = 0; i < MAX_LEDS; i++)
	leds[i].val = 0;
     318:	11 92       	st	Z+, r1
     31a:	11 92       	st	Z+, r1
     31c:	11 92       	st	Z+, r1
     31e:	11 92       	st	Z+, r1
{
	/* Buffer for frame received from controller. */
	frame_t frame;
	
	/* Reset leds colors. */
	for(int i = 0; i < MAX_LEDS; i++)
     320:	e8 17       	cp	r30, r24
     322:	f9 07       	cpc	r31, r25
     324:	c9 f7       	brne	.-14     	; 0x318 <main+0x1c>
	leds[i].val = 0;
	
	/* Init USART for bluetooth driver with 38400 baudrate. */
	bluetoothInit(38400);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	96 e9       	ldi	r25, 0x96	; 150
     32a:	0e 94 67 01 	call	0x2ce	; 0x2ce <bluetoothInit>
	
	/* Init ws2812b driver. */
	wsInit();
     32e:	0e 94 10 10 	call	0x2020	; 0x2020 <wsInit>
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		seqSetColorCount(frame->data[0]);
		for(int i = 0; i < frame->data[0]; i++)
     332:	c1 2c       	mov	r12, r1
     334:	d1 2c       	mov	r13, r1
	wsInit();
	
	while (1)
	{
		/* Send colors to ws2812b leds. */
		wsSend(leds, numLeds);
     336:	60 91 00 01 	lds	r22, 0x0100
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	8b ed       	ldi	r24, 0xDB	; 219
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 12 10 	call	0x2024	; 0x2024 <wsSend>
		
		/* Update color array (animate). */
		seqUpdate(leds, numLeds);
     344:	60 91 00 01 	lds	r22, 0x0100
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	8b ed       	ldi	r24, 0xDB	; 219
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <seqUpdate>
		
		/* Handle command, if new frame has been received. */
		if(bluetoothGetFrame(&frame, sizeof(frame))) {
     352:	62 e3       	ldi	r22, 0x32	; 50
     354:	ce 01       	movw	r24, r28
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	0e 94 69 00 	call	0xd2	; 0xd2 <bluetoothGetFrame>
     35c:	88 23       	and	r24, r24
     35e:	09 f4       	brne	.+2      	; 0x362 <main+0x66>
     360:	4f c0       	rjmp	.+158    	; 0x400 <main+0x104>

// ----------------------------------------------------------------------- Static declarations

static void handleFrame(frame_t *frame)
{
	switch(frame->command)
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	8e 2f       	mov	r24, r30
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	87 30       	cpi	r24, 0x07	; 7
     36a:	91 05       	cpc	r25, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <main+0x74>
     36e:	48 c0       	rjmp	.+144    	; 0x400 <main+0x104>
     370:	fc 01       	movw	r30, r24
     372:	ec 5c       	subi	r30, 0xCC	; 204
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__tablejump2__>
	{
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <seqSetFunction>
     380:	3f c0       	rjmp	.+126    	; 0x400 <main+0x104>
		break;
		
		case eSetAnimationColors:
		seqSetColorCount(frame->data[0]);
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	0e 94 0b 10 	call	0x2016	; 0x2016 <seqSetColorCount>
		for(int i = 0; i < frame->data[0]; i++)
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	88 23       	and	r24, r24
     38c:	c9 f1       	breq	.+114    	; 0x400 <main+0x104>
     38e:	8e 01       	movw	r16, r28
     390:	0b 5f       	subi	r16, 0xFB	; 251
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	ec 2c       	mov	r14, r12
     396:	fd 2c       	mov	r15, r13
		{
			seqSetColorRGB(i, frame->data[i*3+1], frame->data[i*3+2], frame->data[i*3+3]);
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	e8 1a       	sub	r14, r24
     39c:	f8 0a       	sbc	r15, r24
     39e:	d8 01       	movw	r26, r16
     3a0:	11 97       	sbiw	r26, 0x01	; 1
     3a2:	c8 01       	movw	r24, r16
     3a4:	02 97       	sbiw	r24, 0x02	; 2
     3a6:	f8 01       	movw	r30, r16
     3a8:	20 81       	ld	r18, Z
     3aa:	4c 91       	ld	r20, X
     3ac:	fc 01       	movw	r30, r24
     3ae:	60 81       	ld	r22, Z
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	8e 0d       	add	r24, r14
     3b4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <seqSetColorRGB>
     3b8:	0d 5f       	subi	r16, 0xFD	; 253
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		seqSetColorCount(frame->data[0]);
		for(int i = 0; i < frame->data[0]; i++)
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	e8 16       	cp	r14, r24
     3c2:	f9 06       	cpc	r15, r25
     3c4:	4c f3       	brlt	.-46     	; 0x398 <main+0x9c>
     3c6:	1c c0       	rjmp	.+56     	; 0x400 <main+0x104>
			seqSetColorRGB(i, frame->data[i*3+1], frame->data[i*3+2], frame->data[i*3+3]);
		}
		break;
		
		case eSetAnimationSpeed:
		seqSetSpeed(frame->data[0]);
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <seqSetSpeed>
     3ce:	18 c0       	rjmp	.+48     	; 0x400 <main+0x104>
		break;
		
		case eSetAnimationSoftness:
		seqSetSoftness(frame->data[0]);
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <seqSetSoftness>
     3d6:	14 c0       	rjmp	.+40     	; 0x400 <main+0x104>
		break;
		
		case eSetAnimationSize:
		seqSetSize(frame->data[0]);
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <seqSetSize>
     3de:	10 c0       	rjmp	.+32     	; 0x400 <main+0x104>
		break;
		
		case eSetLedsCount:
		numLeds = frame->data[0];
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	80 93 00 01 	sts	0x0100, r24
     3e6:	0c c0       	rjmp	.+24     	; 0x400 <main+0x104>
		break;
		
		case eSetAll:
		seqSetFunction(frame->data[0]);
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <seqSetFunction>
		seqSetSpeed(frame->data[1]);
     3ee:	8b 81       	ldd	r24, Y+3	; 0x03
     3f0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <seqSetSpeed>
		seqSetSoftness(frame->data[2]);
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <seqSetSoftness>
		seqSetSize(frame->data[3]);
     3fa:	8d 81       	ldd	r24, Y+5	; 0x05
     3fc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <seqSetSize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	8f e9       	ldi	r24, 0x9F	; 159
     402:	9f e0       	ldi	r25, 0x0F	; 15
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <main+0x108>
     408:	00 c0       	rjmp	.+0      	; 0x40a <main+0x10e>
     40a:	00 00       	nop
     40c:	94 cf       	rjmp	.-216    	; 0x336 <main+0x3a>

0000040e <seqPingPongFunc>:
}

// ----------------------------------------------------------------------- Static definitions

static void seqPingPongFunc(color_t *leds, int num_leds)
{
     40e:	2f 92       	push	r2
     410:	3f 92       	push	r3
     412:	4f 92       	push	r4
     414:	5f 92       	push	r5
     416:	6f 92       	push	r6
     418:	7f 92       	push	r7
     41a:	8f 92       	push	r8
     41c:	9f 92       	push	r9
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	aa 97       	sbiw	r28, 0x2a	; 42
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	4c 01       	movw	r8, r24
     444:	7e 83       	std	Y+6, r23	; 0x06
     446:	6d 83       	std	Y+5, r22	; 0x05
	static float pos = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	
	uint8_t softness = seqSoftness;
     448:	80 91 44 01 	lds	r24, 0x0144
     44c:	8c a3       	std	Y+36, r24	; 0x24
	float speed = seqSpeed / 100.0f;
     44e:	60 91 45 01 	lds	r22, 0x0145
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	48 ec       	ldi	r20, 0xC8	; 200
     462:	52 e4       	ldi	r21, 0x42	; 66
     464:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
     468:	6d a3       	std	Y+37, r22	; 0x25
     46a:	7e a3       	std	Y+38, r23	; 0x26
     46c:	8f a3       	std	Y+39, r24	; 0x27
     46e:	98 a7       	std	Y+40, r25	; 0x28
	
	for(int i = 0; i < num_leds; i++)
     470:	ad 81       	ldd	r26, Y+5	; 0x05
     472:	be 81       	ldd	r27, Y+6	; 0x06
     474:	1a 16       	cp	r1, r26
     476:	1b 06       	cpc	r1, r27
     478:	0c f0       	brlt	.+2      	; 0x47c <seqPingPongFunc+0x6e>
     47a:	95 c1       	rjmp	.+810    	; 0x7a6 <__stack+0x2a7>
	{
		float k;
		if(!led_dir) {
     47c:	b0 91 c0 03 	lds	r27, 0x03C0
     480:	bf 83       	std	Y+7, r27	; 0x07
			if(i < pos) k = 1.0f;
     482:	80 91 bc 03 	lds	r24, 0x03BC
     486:	90 91 bd 03 	lds	r25, 0x03BD
     48a:	a0 91 be 03 	lds	r26, 0x03BE
     48e:	b0 91 bf 03 	lds	r27, 0x03BF
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	ab 83       	std	Y+3, r26	; 0x03
     498:	bc 83       	std	Y+4, r27	; 0x04
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
			else k = 0.0f;
		}
		
		//k=k*k;
		leds[i].rgb.r = k*((colors[(color_i+1)%numColors]>>0)&0xFF) + (1.0f-k)*((colors[color_i]>>0)&0xFF);
     49a:	00 91 bb 03 	lds	r16, 0x03BB
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	c8 01       	movw	r24, r16
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	60 91 42 01 	lds	r22, 0x0142
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
     4ae:	fc 01       	movw	r30, r24
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	ee 5f       	subi	r30, 0xFE	; 254
     4ba:	fe 4f       	sbci	r31, 0xFE	; 254
     4bc:	c0 80       	ld	r12, Z
     4be:	d1 80       	ldd	r13, Z+1	; 0x01
     4c0:	e2 80       	ldd	r14, Z+2	; 0x02
     4c2:	f3 80       	ldd	r15, Z+3	; 0x03
     4c4:	c7 01       	movw	r24, r14
     4c6:	b6 01       	movw	r22, r12
     4c8:	77 27       	eor	r23, r23
     4ca:	88 27       	eor	r24, r24
     4cc:	99 27       	eor	r25, r25
     4ce:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     4d2:	68 87       	std	Y+8, r22	; 0x08
     4d4:	79 87       	std	Y+9, r23	; 0x09
     4d6:	8a 87       	std	Y+10, r24	; 0x0a
     4d8:	9b 87       	std	Y+11, r25	; 0x0b
     4da:	00 0f       	add	r16, r16
     4dc:	11 1f       	adc	r17, r17
     4de:	00 0f       	add	r16, r16
     4e0:	11 1f       	adc	r17, r17
     4e2:	f8 01       	movw	r30, r16
     4e4:	ee 5f       	subi	r30, 0xFE	; 254
     4e6:	fe 4f       	sbci	r31, 0xFE	; 254
     4e8:	40 80       	ld	r4, Z
     4ea:	51 80       	ldd	r5, Z+1	; 0x01
     4ec:	62 80       	ldd	r6, Z+2	; 0x02
     4ee:	73 80       	ldd	r7, Z+3	; 0x03
     4f0:	c3 01       	movw	r24, r6
     4f2:	b2 01       	movw	r22, r4
     4f4:	77 27       	eor	r23, r23
     4f6:	88 27       	eor	r24, r24
     4f8:	99 27       	eor	r25, r25
     4fa:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     4fe:	6c 87       	std	Y+12, r22	; 0x0c
     500:	7d 87       	std	Y+13, r23	; 0x0d
     502:	8e 87       	std	Y+14, r24	; 0x0e
     504:	9f 87       	std	Y+15, r25	; 0x0f
		leds[i].rgb.g = k*((colors[(color_i+1)%numColors]>>8)&0xFF) + (1.0f-k)*((colors[color_i]>>8)&0xFF);
     506:	6d 2d       	mov	r22, r13
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     512:	68 8b       	std	Y+16, r22	; 0x10
     514:	79 8b       	std	Y+17, r23	; 0x11
     516:	8a 8b       	std	Y+18, r24	; 0x12
     518:	9b 8b       	std	Y+19, r25	; 0x13
     51a:	65 2d       	mov	r22, r5
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     526:	6c 8b       	std	Y+20, r22	; 0x14
     528:	7d 8b       	std	Y+21, r23	; 0x15
     52a:	8e 8b       	std	Y+22, r24	; 0x16
     52c:	9f 8b       	std	Y+23, r25	; 0x17
		leds[i].rgb.b = k*((colors[(color_i+1)%numColors]>>16)&0xFF) + (1.0f-k)*((colors[color_i]>>16)&0xFF);
     52e:	6e 2d       	mov	r22, r14
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     53a:	68 8f       	std	Y+24, r22	; 0x18
     53c:	79 8f       	std	Y+25, r23	; 0x19
     53e:	8a 8f       	std	Y+26, r24	; 0x1a
     540:	9b 8f       	std	Y+27, r25	; 0x1b
     542:	66 2d       	mov	r22, r6
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     54e:	6c 8f       	std	Y+28, r22	; 0x1c
     550:	7d 8f       	std	Y+29, r23	; 0x1d
     552:	8e 8f       	std	Y+30, r24	; 0x1e
     554:	9f 8f       	std	Y+31, r25	; 0x1f
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	89 0e       	add	r8, r25
     55a:	91 1c       	adc	r9, r1
     55c:	21 2c       	mov	r2, r1
     55e:	31 2c       	mov	r3, r1
			else if(i < pos + softness) k = 1.0f - (i-pos) / (softness);
			else k = 0.0f;
		}
		else {
			if(i >= pos) k = 1.0f;
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
     560:	9c a1       	ldd	r25, Y+36	; 0x24
     562:	89 2f       	mov	r24, r25
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	a0 e0       	ldi	r26, 0x00	; 0
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	88 a3       	std	Y+32, r24	; 0x20
     56c:	99 a3       	std	Y+33, r25	; 0x21
     56e:	aa a3       	std	Y+34, r26	; 0x22
     570:	bb a3       	std	Y+35, r27	; 0x23
	float speed = seqSpeed / 100.0f;
	
	for(int i = 0; i < num_leds; i++)
	{
		float k;
		if(!led_dir) {
     572:	af 81       	ldd	r26, Y+7	; 0x07
     574:	a1 11       	cpse	r26, r1
     576:	44 c0       	rjmp	.+136    	; 0x600 <__stack+0x101>
			if(i < pos) k = 1.0f;
     578:	b1 01       	movw	r22, r2
     57a:	03 2c       	mov	r0, r3
     57c:	00 0c       	add	r0, r0
     57e:	88 0b       	sbc	r24, r24
     580:	99 0b       	sbc	r25, r25
     582:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     586:	6b 01       	movw	r12, r22
     588:	7c 01       	movw	r14, r24
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	3a 81       	ldd	r19, Y+2	; 0x02
     58e:	4b 81       	ldd	r20, Y+3	; 0x03
     590:	5c 81       	ldd	r21, Y+4	; 0x04
     592:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     596:	88 23       	and	r24, r24
     598:	0c f4       	brge	.+2      	; 0x59c <__stack+0x9d>
     59a:	76 c0       	rjmp	.+236    	; 0x688 <__stack+0x189>
			else if(i < pos + softness) k = 1.0f - (i-pos) / (softness);
     59c:	68 a1       	ldd	r22, Y+32	; 0x20
     59e:	79 a1       	ldd	r23, Y+33	; 0x21
     5a0:	8a a1       	ldd	r24, Y+34	; 0x22
     5a2:	9b a1       	ldd	r25, Y+35	; 0x23
     5a4:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     5a8:	2b 01       	movw	r4, r22
     5aa:	3c 01       	movw	r6, r24
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	69 81       	ldd	r22, Y+1	; 0x01
     5b2:	7a 81       	ldd	r23, Y+2	; 0x02
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     5bc:	9b 01       	movw	r18, r22
     5be:	ac 01       	movw	r20, r24
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     5c8:	88 23       	and	r24, r24
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <__stack+0xcf>
     5cc:	62 c0       	rjmp	.+196    	; 0x692 <__stack+0x193>
     5ce:	29 81       	ldd	r18, Y+1	; 0x01
     5d0:	3a 81       	ldd	r19, Y+2	; 0x02
     5d2:	4b 81       	ldd	r20, Y+3	; 0x03
     5d4:	5c 81       	ldd	r21, Y+4	; 0x04
     5d6:	c7 01       	movw	r24, r14
     5d8:	b6 01       	movw	r22, r12
     5da:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     5de:	a3 01       	movw	r20, r6
     5e0:	92 01       	movw	r18, r4
     5e2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e8       	ldi	r24, 0x80	; 128
     5f0:	9f e3       	ldi	r25, 0x3F	; 63
     5f2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     5f6:	a6 2e       	mov	r10, r22
     5f8:	b7 2e       	mov	r11, r23
     5fa:	08 2f       	mov	r16, r24
     5fc:	19 2f       	mov	r17, r25
     5fe:	57 c0       	rjmp	.+174    	; 0x6ae <__stack+0x1af>
			else k = 0.0f;
		}
		else {
			if(i >= pos) k = 1.0f;
     600:	b1 01       	movw	r22, r2
     602:	03 2c       	mov	r0, r3
     604:	00 0c       	add	r0, r0
     606:	88 0b       	sbc	r24, r24
     608:	99 0b       	sbc	r25, r25
     60a:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	9b 01       	movw	r18, r22
     614:	ac 01       	movw	r20, r24
     616:	69 81       	ldd	r22, Y+1	; 0x01
     618:	7a 81       	ldd	r23, Y+2	; 0x02
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	9c 81       	ldd	r25, Y+4	; 0x04
     61e:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     622:	18 16       	cp	r1, r24
     624:	dc f5       	brge	.+118    	; 0x69c <__stack+0x19d>
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
     626:	68 a1       	ldd	r22, Y+32	; 0x20
     628:	79 a1       	ldd	r23, Y+33	; 0x21
     62a:	8a a1       	ldd	r24, Y+34	; 0x22
     62c:	9b a1       	ldd	r25, Y+35	; 0x23
     62e:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     632:	2b 01       	movw	r4, r22
     634:	3c 01       	movw	r6, r24
     636:	9b 01       	movw	r18, r22
     638:	ac 01       	movw	r20, r24
     63a:	69 81       	ldd	r22, Y+1	; 0x01
     63c:	7a 81       	ldd	r23, Y+2	; 0x02
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     646:	9b 01       	movw	r18, r22
     648:	ac 01       	movw	r20, r24
     64a:	c7 01       	movw	r24, r14
     64c:	b6 01       	movw	r22, r12
     64e:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
     652:	88 23       	and	r24, r24
     654:	44 f1       	brlt	.+80     	; 0x6a6 <__stack+0x1a7>
     656:	a7 01       	movw	r20, r14
     658:	96 01       	movw	r18, r12
     65a:	69 81       	ldd	r22, Y+1	; 0x01
     65c:	7a 81       	ldd	r23, Y+2	; 0x02
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	9c 81       	ldd	r25, Y+4	; 0x04
     662:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     666:	a3 01       	movw	r20, r6
     668:	92 01       	movw	r18, r4
     66a:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
     66e:	9b 01       	movw	r18, r22
     670:	ac 01       	movw	r20, r24
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	80 e8       	ldi	r24, 0x80	; 128
     678:	9f e3       	ldi	r25, 0x3F	; 63
     67a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     67e:	a6 2e       	mov	r10, r22
     680:	b7 2e       	mov	r11, r23
     682:	08 2f       	mov	r16, r24
     684:	19 2f       	mov	r17, r25
     686:	13 c0       	rjmp	.+38     	; 0x6ae <__stack+0x1af>
	
	for(int i = 0; i < num_leds; i++)
	{
		float k;
		if(!led_dir) {
			if(i < pos) k = 1.0f;
     688:	a1 2c       	mov	r10, r1
     68a:	b1 2c       	mov	r11, r1
     68c:	00 e8       	ldi	r16, 0x80	; 128
     68e:	1f e3       	ldi	r17, 0x3F	; 63
     690:	0e c0       	rjmp	.+28     	; 0x6ae <__stack+0x1af>
			else if(i < pos + softness) k = 1.0f - (i-pos) / (softness);
			else k = 0.0f;
     692:	a1 2c       	mov	r10, r1
     694:	b1 2c       	mov	r11, r1
     696:	00 e0       	ldi	r16, 0x00	; 0
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	09 c0       	rjmp	.+18     	; 0x6ae <__stack+0x1af>
		}
		else {
			if(i >= pos) k = 1.0f;
     69c:	a1 2c       	mov	r10, r1
     69e:	b1 2c       	mov	r11, r1
     6a0:	00 e8       	ldi	r16, 0x80	; 128
     6a2:	1f e3       	ldi	r17, 0x3F	; 63
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__stack+0x1af>
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
			else k = 0.0f;
     6a6:	a1 2c       	mov	r10, r1
     6a8:	b1 2c       	mov	r11, r1
     6aa:	00 e0       	ldi	r16, 0x00	; 0
     6ac:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		//k=k*k;
		leds[i].rgb.r = k*((colors[(color_i+1)%numColors]>>0)&0xFF) + (1.0f-k)*((colors[color_i]>>0)&0xFF);
     6ae:	2a 2d       	mov	r18, r10
     6b0:	3b 2d       	mov	r19, r11
     6b2:	40 2f       	mov	r20, r16
     6b4:	51 2f       	mov	r21, r17
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e8       	ldi	r24, 0x80	; 128
     6bc:	9f e3       	ldi	r25, 0x3F	; 63
     6be:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     6c2:	6b 01       	movw	r12, r22
     6c4:	7c 01       	movw	r14, r24
     6c6:	f4 01       	movw	r30, r8
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	fa a7       	std	Y+42, r31	; 0x2a
     6cc:	e9 a7       	std	Y+41, r30	; 0x29
     6ce:	2a 2d       	mov	r18, r10
     6d0:	3b 2d       	mov	r19, r11
     6d2:	40 2f       	mov	r20, r16
     6d4:	51 2f       	mov	r21, r17
     6d6:	68 85       	ldd	r22, Y+8	; 0x08
     6d8:	79 85       	ldd	r23, Y+9	; 0x09
     6da:	8a 85       	ldd	r24, Y+10	; 0x0a
     6dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     6de:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     6e2:	2b 01       	movw	r4, r22
     6e4:	3c 01       	movw	r6, r24
     6e6:	2c 85       	ldd	r18, Y+12	; 0x0c
     6e8:	3d 85       	ldd	r19, Y+13	; 0x0d
     6ea:	4e 85       	ldd	r20, Y+14	; 0x0e
     6ec:	5f 85       	ldd	r21, Y+15	; 0x0f
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     6f6:	9b 01       	movw	r18, r22
     6f8:	ac 01       	movw	r20, r24
     6fa:	c3 01       	movw	r24, r6
     6fc:	b2 01       	movw	r22, r4
     6fe:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     702:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     706:	a9 a5       	ldd	r26, Y+41	; 0x29
     708:	ba a5       	ldd	r27, Y+42	; 0x2a
     70a:	6c 93       	st	X, r22
		leds[i].rgb.g = k*((colors[(color_i+1)%numColors]>>8)&0xFF) + (1.0f-k)*((colors[color_i]>>8)&0xFF);
     70c:	2a 2d       	mov	r18, r10
     70e:	3b 2d       	mov	r19, r11
     710:	40 2f       	mov	r20, r16
     712:	51 2f       	mov	r21, r17
     714:	68 89       	ldd	r22, Y+16	; 0x10
     716:	79 89       	ldd	r23, Y+17	; 0x11
     718:	8a 89       	ldd	r24, Y+18	; 0x12
     71a:	9b 89       	ldd	r25, Y+19	; 0x13
     71c:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     720:	2b 01       	movw	r4, r22
     722:	3c 01       	movw	r6, r24
     724:	2c 89       	ldd	r18, Y+20	; 0x14
     726:	3d 89       	ldd	r19, Y+21	; 0x15
     728:	4e 89       	ldd	r20, Y+22	; 0x16
     72a:	5f 89       	ldd	r21, Y+23	; 0x17
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     734:	9b 01       	movw	r18, r22
     736:	ac 01       	movw	r20, r24
     738:	c3 01       	movw	r24, r6
     73a:	b2 01       	movw	r22, r4
     73c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     740:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     744:	f4 01       	movw	r30, r8
     746:	60 83       	st	Z, r22
     748:	c4 01       	movw	r24, r8
     74a:	02 97       	sbiw	r24, 0x02	; 2
     74c:	9a a7       	std	Y+42, r25	; 0x2a
     74e:	89 a7       	std	Y+41, r24	; 0x29
		leds[i].rgb.b = k*((colors[(color_i+1)%numColors]>>16)&0xFF) + (1.0f-k)*((colors[color_i]>>16)&0xFF);
     750:	2a 2d       	mov	r18, r10
     752:	3b 2d       	mov	r19, r11
     754:	40 2f       	mov	r20, r16
     756:	51 2f       	mov	r21, r17
     758:	68 8d       	ldd	r22, Y+24	; 0x18
     75a:	79 8d       	ldd	r23, Y+25	; 0x19
     75c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     75e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     760:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     764:	2b 01       	movw	r4, r22
     766:	3c 01       	movw	r6, r24
     768:	2c 8d       	ldd	r18, Y+28	; 0x1c
     76a:	3d 8d       	ldd	r19, Y+29	; 0x1d
     76c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     76e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	c3 01       	movw	r24, r6
     77e:	b2 01       	movw	r22, r4
     780:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     784:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     788:	a9 a5       	ldd	r26, Y+41	; 0x29
     78a:	ba a5       	ldd	r27, Y+42	; 0x2a
     78c:	6c 93       	st	X, r22
	static uint8_t color_i = 0;
	
	uint8_t softness = seqSoftness;
	float speed = seqSpeed / 100.0f;
	
	for(int i = 0; i < num_leds; i++)
     78e:	bf ef       	ldi	r27, 0xFF	; 255
     790:	2b 1a       	sub	r2, r27
     792:	3b 0a       	sbc	r3, r27
     794:	e4 e0       	ldi	r30, 0x04	; 4
     796:	8e 0e       	add	r8, r30
     798:	91 1c       	adc	r9, r1
     79a:	8d 81       	ldd	r24, Y+5	; 0x05
     79c:	9e 81       	ldd	r25, Y+6	; 0x06
     79e:	28 16       	cp	r2, r24
     7a0:	39 06       	cpc	r3, r25
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <__stack+0x2a7>
     7a4:	e6 ce       	rjmp	.-564    	; 0x572 <__stack+0x73>
		leds[i].rgb.r = k*((colors[(color_i+1)%numColors]>>0)&0xFF) + (1.0f-k)*((colors[color_i]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[(color_i+1)%numColors]>>8)&0xFF) + (1.0f-k)*((colors[color_i]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[(color_i+1)%numColors]>>16)&0xFF) + (1.0f-k)*((colors[color_i]>>16)&0xFF);
	}
	
	if(!led_dir) pos += speed;
     7a6:	f0 90 c0 03 	lds	r15, 0x03C0
     7aa:	f1 10       	cpse	r15, r1
     7ac:	17 c0       	rjmp	.+46     	; 0x7dc <__stack+0x2dd>
     7ae:	2d a1       	ldd	r18, Y+37	; 0x25
     7b0:	3e a1       	ldd	r19, Y+38	; 0x26
     7b2:	4f a1       	ldd	r20, Y+39	; 0x27
     7b4:	58 a5       	ldd	r21, Y+40	; 0x28
     7b6:	60 91 bc 03 	lds	r22, 0x03BC
     7ba:	70 91 bd 03 	lds	r23, 0x03BD
     7be:	80 91 be 03 	lds	r24, 0x03BE
     7c2:	90 91 bf 03 	lds	r25, 0x03BF
     7c6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     7ca:	60 93 bc 03 	sts	0x03BC, r22
     7ce:	70 93 bd 03 	sts	0x03BD, r23
     7d2:	80 93 be 03 	sts	0x03BE, r24
     7d6:	90 93 bf 03 	sts	0x03BF, r25
     7da:	16 c0       	rjmp	.+44     	; 0x808 <__stack+0x309>
	else pos -= speed;
     7dc:	2d a1       	ldd	r18, Y+37	; 0x25
     7de:	3e a1       	ldd	r19, Y+38	; 0x26
     7e0:	4f a1       	ldd	r20, Y+39	; 0x27
     7e2:	58 a5       	ldd	r21, Y+40	; 0x28
     7e4:	60 91 bc 03 	lds	r22, 0x03BC
     7e8:	70 91 bd 03 	lds	r23, 0x03BD
     7ec:	80 91 be 03 	lds	r24, 0x03BE
     7f0:	90 91 bf 03 	lds	r25, 0x03BF
     7f4:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     7f8:	60 93 bc 03 	sts	0x03BC, r22
     7fc:	70 93 bd 03 	sts	0x03BD, r23
     800:	80 93 be 03 	sts	0x03BE, r24
     804:	90 93 bf 03 	sts	0x03BF, r25
	if(pos >= num_leds + softness || pos < -softness) {
     808:	9c a1       	ldd	r25, Y+36	; 0x24
     80a:	09 2f       	mov	r16, r25
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	cd 80       	ldd	r12, Y+5	; 0x05
     810:	de 80       	ldd	r13, Y+6	; 0x06
     812:	c0 0e       	add	r12, r16
     814:	d1 1e       	adc	r13, r17
     816:	80 90 bc 03 	lds	r8, 0x03BC
     81a:	90 90 bd 03 	lds	r9, 0x03BD
     81e:	a0 90 be 03 	lds	r10, 0x03BE
     822:	b0 90 bf 03 	lds	r11, 0x03BF
     826:	b6 01       	movw	r22, r12
     828:	0d 2c       	mov	r0, r13
     82a:	00 0c       	add	r0, r0
     82c:	88 0b       	sbc	r24, r24
     82e:	99 0b       	sbc	r25, r25
     830:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     834:	a5 01       	movw	r20, r10
     836:	94 01       	movw	r18, r8
     838:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     83c:	18 16       	cp	r1, r24
     83e:	94 f4       	brge	.+36     	; 0x864 <__stack+0x365>
     840:	66 27       	eor	r22, r22
     842:	77 27       	eor	r23, r23
     844:	60 1b       	sub	r22, r16
     846:	71 0b       	sbc	r23, r17
     848:	07 2e       	mov	r0, r23
     84a:	00 0c       	add	r0, r0
     84c:	88 0b       	sbc	r24, r24
     84e:	99 0b       	sbc	r25, r25
     850:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	c5 01       	movw	r24, r10
     85a:	b4 01       	movw	r22, r8
     85c:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     860:	88 23       	and	r24, r24
     862:	bc f5       	brge	.+110    	; 0x8d2 <__stack+0x3d3>
		color_i = (color_i+1)%numColors;
     864:	80 91 bb 03 	lds	r24, 0x03BB
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	60 91 42 01 	lds	r22, 0x0142
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
     876:	80 93 bb 03 	sts	0x03BB, r24
		led_dir = led_dir == 1 ? 0 : 1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	f8 12       	cpse	r15, r24
     87e:	01 c0       	rjmp	.+2      	; 0x882 <__stack+0x383>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	80 93 c0 03 	sts	0x03C0, r24
		if(!led_dir) pos = -softness;
     886:	81 11       	cpse	r24, r1
     888:	13 c0       	rjmp	.+38     	; 0x8b0 <__stack+0x3b1>
     88a:	66 27       	eor	r22, r22
     88c:	77 27       	eor	r23, r23
     88e:	60 1b       	sub	r22, r16
     890:	71 0b       	sbc	r23, r17
     892:	07 2e       	mov	r0, r23
     894:	00 0c       	add	r0, r0
     896:	88 0b       	sbc	r24, r24
     898:	99 0b       	sbc	r25, r25
     89a:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     89e:	60 93 bc 03 	sts	0x03BC, r22
     8a2:	70 93 bd 03 	sts	0x03BD, r23
     8a6:	80 93 be 03 	sts	0x03BE, r24
     8aa:	90 93 bf 03 	sts	0x03BF, r25
     8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <__stack+0x3d3>
		else pos = num_leds + softness - 1;
     8b0:	b6 01       	movw	r22, r12
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	71 09       	sbc	r23, r1
     8b6:	07 2e       	mov	r0, r23
     8b8:	00 0c       	add	r0, r0
     8ba:	88 0b       	sbc	r24, r24
     8bc:	99 0b       	sbc	r25, r25
     8be:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     8c2:	60 93 bc 03 	sts	0x03BC, r22
     8c6:	70 93 bd 03 	sts	0x03BD, r23
     8ca:	80 93 be 03 	sts	0x03BE, r24
     8ce:	90 93 bf 03 	sts	0x03BF, r25
	}
}
     8d2:	aa 96       	adiw	r28, 0x2a	; 42
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	7f 90       	pop	r7
     8f8:	6f 90       	pop	r6
     8fa:	5f 90       	pop	r5
     8fc:	4f 90       	pop	r4
     8fe:	3f 90       	pop	r3
     900:	2f 90       	pop	r2
     902:	08 95       	ret

00000904 <seqDoublePingPongFunc>:

static void seqDoublePingPongFunc(color_t *leds, int num_leds)
{
     904:	2f 92       	push	r2
     906:	3f 92       	push	r3
     908:	4f 92       	push	r4
     90a:	5f 92       	push	r5
     90c:	6f 92       	push	r6
     90e:	7f 92       	push	r7
     910:	8f 92       	push	r8
     912:	9f 92       	push	r9
     914:	af 92       	push	r10
     916:	bf 92       	push	r11
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	ac 97       	sbiw	r28, 0x2c	; 44
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	8c 01       	movw	r16, r24
     93a:	1b 01       	movw	r2, r22
	static float pos = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	
	uint8_t softness = seqSoftness;
     93c:	20 91 44 01 	lds	r18, 0x0144
     940:	28 a7       	std	Y+40, r18	; 0x28
	float speed = seqSpeed / 100.0f;
     942:	60 91 45 01 	lds	r22, 0x0145
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	48 ec       	ldi	r20, 0xC8	; 200
     956:	52 e4       	ldi	r21, 0x42	; 66
     958:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
     95c:	69 a7       	std	Y+41, r22	; 0x29
     95e:	7a a7       	std	Y+42, r23	; 0x2a
     960:	8b a7       	std	Y+43, r24	; 0x2b
     962:	9c a7       	std	Y+44, r25	; 0x2c
	
	for(int i = 0; i < num_leds / 2 + 1; i++)
     964:	c1 01       	movw	r24, r2
     966:	33 20       	and	r3, r3
     968:	0c f4       	brge	.+2      	; 0x96c <seqDoublePingPongFunc+0x68>
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	95 95       	asr	r25
     96e:	87 95       	ror	r24
     970:	dc 01       	movw	r26, r24
     972:	11 96       	adiw	r26, 0x01	; 1
     974:	ba 87       	std	Y+10, r27	; 0x0a
     976:	a9 87       	std	Y+9, r26	; 0x09
     978:	1a 16       	cp	r1, r26
     97a:	1b 06       	cpc	r1, r27
     97c:	0c f0       	brlt	.+2      	; 0x980 <seqDoublePingPongFunc+0x7c>
     97e:	b8 c1       	rjmp	.+880    	; 0xcf0 <seqDoublePingPongFunc+0x3ec>
	{
		float k;
		if(!led_dir) {
     980:	a0 90 c6 03 	lds	r10, 0x03C6
			if(i < pos) k = 1.0f;
     984:	80 91 c2 03 	lds	r24, 0x03C2
     988:	90 91 c3 03 	lds	r25, 0x03C3
     98c:	a0 91 c4 03 	lds	r26, 0x03C4
     990:	b0 91 c5 03 	lds	r27, 0x03C5
     994:	8d 83       	std	Y+5, r24	; 0x05
     996:	9e 83       	std	Y+6, r25	; 0x06
     998:	af 83       	std	Y+7, r26	; 0x07
     99a:	b8 87       	std	Y+8, r27	; 0x08
			if(i >= pos) k = 1.0f;
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
			else k = 0.0f;
		}
		
		leds[i].rgb.r = k*((colors[(color_i+1)%numColors]>>0)&0xFF) + (1.0f-k)*((colors[color_i]>>0)&0xFF);
     99c:	80 90 c1 03 	lds	r8, 0x03C1
     9a0:	91 2c       	mov	r9, r1
     9a2:	c4 01       	movw	r24, r8
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	60 91 42 01 	lds	r22, 0x0142
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
     9b0:	fc 01       	movw	r30, r24
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	ee 0f       	add	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	ee 5f       	subi	r30, 0xFE	; 254
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	c0 80       	ld	r12, Z
     9c0:	d1 80       	ldd	r13, Z+1	; 0x01
     9c2:	e2 80       	ldd	r14, Z+2	; 0x02
     9c4:	f3 80       	ldd	r15, Z+3	; 0x03
     9c6:	c7 01       	movw	r24, r14
     9c8:	b6 01       	movw	r22, r12
     9ca:	77 27       	eor	r23, r23
     9cc:	88 27       	eor	r24, r24
     9ce:	99 27       	eor	r25, r25
     9d0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     9d4:	6b 87       	std	Y+11, r22	; 0x0b
     9d6:	7c 87       	std	Y+12, r23	; 0x0c
     9d8:	8d 87       	std	Y+13, r24	; 0x0d
     9da:	9e 87       	std	Y+14, r25	; 0x0e
     9dc:	c4 01       	movw	r24, r8
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	8e 5f       	subi	r24, 0xFE	; 254
     9e8:	9e 4f       	sbci	r25, 0xFE	; 254
     9ea:	dc 01       	movw	r26, r24
     9ec:	4d 90       	ld	r4, X+
     9ee:	5d 90       	ld	r5, X+
     9f0:	6d 90       	ld	r6, X+
     9f2:	7c 90       	ld	r7, X
     9f4:	c3 01       	movw	r24, r6
     9f6:	b2 01       	movw	r22, r4
     9f8:	77 27       	eor	r23, r23
     9fa:	88 27       	eor	r24, r24
     9fc:	99 27       	eor	r25, r25
     9fe:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     a02:	6f 87       	std	Y+15, r22	; 0x0f
     a04:	78 8b       	std	Y+16, r23	; 0x10
     a06:	89 8b       	std	Y+17, r24	; 0x11
     a08:	9a 8b       	std	Y+18, r25	; 0x12
		leds[i].rgb.g = k*((colors[(color_i+1)%numColors]>>8)&0xFF) + (1.0f-k)*((colors[color_i]>>8)&0xFF);
     a0a:	6d 2d       	mov	r22, r13
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     a16:	6b 8b       	std	Y+19, r22	; 0x13
     a18:	7c 8b       	std	Y+20, r23	; 0x14
     a1a:	8d 8b       	std	Y+21, r24	; 0x15
     a1c:	9e 8b       	std	Y+22, r25	; 0x16
     a1e:	65 2d       	mov	r22, r5
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     a2a:	6f 8b       	std	Y+23, r22	; 0x17
     a2c:	78 8f       	std	Y+24, r23	; 0x18
     a2e:	89 8f       	std	Y+25, r24	; 0x19
     a30:	9a 8f       	std	Y+26, r25	; 0x1a
		leds[i].rgb.b = k*((colors[(color_i+1)%numColors]>>16)&0xFF) + (1.0f-k)*((colors[color_i]>>16)&0xFF);
     a32:	6e 2d       	mov	r22, r14
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     a3e:	6b 8f       	std	Y+27, r22	; 0x1b
     a40:	7c 8f       	std	Y+28, r23	; 0x1c
     a42:	8d 8f       	std	Y+29, r24	; 0x1d
     a44:	9e 8f       	std	Y+30, r25	; 0x1e
     a46:	66 2d       	mov	r22, r6
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     a52:	6f 8f       	std	Y+31, r22	; 0x1f
     a54:	78 a3       	std	Y+32, r23	; 0x20
     a56:	89 a3       	std	Y+33, r24	; 0x21
     a58:	9a a3       	std	Y+34, r25	; 0x22
     a5a:	48 01       	movw	r8, r16
     a5c:	b2 e0       	ldi	r27, 0x02	; 2
     a5e:	8b 0e       	add	r8, r27
     a60:	91 1c       	adc	r9, r1
     a62:	22 0c       	add	r2, r2
     a64:	33 1c       	adc	r3, r3
     a66:	22 0c       	add	r2, r2
     a68:	33 1c       	adc	r3, r3
     a6a:	e2 e0       	ldi	r30, 0x02	; 2
     a6c:	2e 1a       	sub	r2, r30
     a6e:	31 08       	sbc	r3, r1
     a70:	20 0e       	add	r2, r16
     a72:	31 1e       	adc	r3, r17
     a74:	41 2c       	mov	r4, r1
     a76:	51 2c       	mov	r5, r1
			else if(i < pos + softness) k = 1.0f - (i-pos) / (softness);
			else k = 0.0f;
		}
		else {
			if(i >= pos) k = 1.0f;
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
     a78:	98 a5       	ldd	r25, Y+40	; 0x28
     a7a:	89 2f       	mov	r24, r25
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	8c a3       	std	Y+36, r24	; 0x24
     a84:	9d a3       	std	Y+37, r25	; 0x25
     a86:	ae a3       	std	Y+38, r26	; 0x26
     a88:	bf a3       	std	Y+39, r27	; 0x27
			else k = 0.0f;
     a8a:	ab a2       	std	Y+35, r10	; 0x23
     a8c:	72 01       	movw	r14, r4
	float speed = seqSpeed / 100.0f;
	
	for(int i = 0; i < num_leds / 2 + 1; i++)
	{
		float k;
		if(!led_dir) {
     a8e:	ab a1       	ldd	r26, Y+35	; 0x23
     a90:	a1 11       	cpse	r26, r1
     a92:	44 c0       	rjmp	.+136    	; 0xb1c <seqDoublePingPongFunc+0x218>
			if(i < pos) k = 1.0f;
     a94:	b7 01       	movw	r22, r14
     a96:	0f 2c       	mov	r0, r15
     a98:	00 0c       	add	r0, r0
     a9a:	88 0b       	sbc	r24, r24
     a9c:	99 0b       	sbc	r25, r25
     a9e:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     aa2:	2b 01       	movw	r4, r22
     aa4:	3c 01       	movw	r6, r24
     aa6:	2d 81       	ldd	r18, Y+5	; 0x05
     aa8:	3e 81       	ldd	r19, Y+6	; 0x06
     aaa:	4f 81       	ldd	r20, Y+7	; 0x07
     aac:	58 85       	ldd	r21, Y+8	; 0x08
     aae:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     ab2:	88 23       	and	r24, r24
     ab4:	0c f4       	brge	.+2      	; 0xab8 <seqDoublePingPongFunc+0x1b4>
     ab6:	77 c0       	rjmp	.+238    	; 0xba6 <seqDoublePingPongFunc+0x2a2>
			else if(i < pos + softness) k = 1.0f - (i-pos) / (softness);
     ab8:	6c a1       	ldd	r22, Y+36	; 0x24
     aba:	7d a1       	ldd	r23, Y+37	; 0x25
     abc:	8e a1       	ldd	r24, Y+38	; 0x26
     abe:	9f a1       	ldd	r25, Y+39	; 0x27
     ac0:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     ac4:	5b 01       	movw	r10, r22
     ac6:	6c 01       	movw	r12, r24
     ac8:	9b 01       	movw	r18, r22
     aca:	ac 01       	movw	r20, r24
     acc:	6d 81       	ldd	r22, Y+5	; 0x05
     ace:	7e 81       	ldd	r23, Y+6	; 0x06
     ad0:	8f 81       	ldd	r24, Y+7	; 0x07
     ad2:	98 85       	ldd	r25, Y+8	; 0x08
     ad4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	c3 01       	movw	r24, r6
     ade:	b2 01       	movw	r22, r4
     ae0:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	0c f0       	brlt	.+2      	; 0xaea <seqDoublePingPongFunc+0x1e6>
     ae8:	68 c0       	rjmp	.+208    	; 0xbba <seqDoublePingPongFunc+0x2b6>
     aea:	2d 81       	ldd	r18, Y+5	; 0x05
     aec:	3e 81       	ldd	r19, Y+6	; 0x06
     aee:	4f 81       	ldd	r20, Y+7	; 0x07
     af0:	58 85       	ldd	r21, Y+8	; 0x08
     af2:	c3 01       	movw	r24, r6
     af4:	b2 01       	movw	r22, r4
     af6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     afa:	a6 01       	movw	r20, r12
     afc:	95 01       	movw	r18, r10
     afe:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e8       	ldi	r24, 0x80	; 128
     b0c:	9f e3       	ldi	r25, 0x3F	; 63
     b0e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     b12:	06 2f       	mov	r16, r22
     b14:	17 2f       	mov	r17, r23
     b16:	c8 2e       	mov	r12, r24
     b18:	d9 2e       	mov	r13, r25
     b1a:	62 c0       	rjmp	.+196    	; 0xbe0 <seqDoublePingPongFunc+0x2dc>
			else k = 0.0f;
		}
		else {
			if(i >= pos) k = 1.0f;
     b1c:	b7 01       	movw	r22, r14
     b1e:	0f 2c       	mov	r0, r15
     b20:	00 0c       	add	r0, r0
     b22:	88 0b       	sbc	r24, r24
     b24:	99 0b       	sbc	r25, r25
     b26:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     b2a:	2b 01       	movw	r4, r22
     b2c:	3c 01       	movw	r6, r24
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	6d 81       	ldd	r22, Y+5	; 0x05
     b34:	7e 81       	ldd	r23, Y+6	; 0x06
     b36:	8f 81       	ldd	r24, Y+7	; 0x07
     b38:	98 85       	ldd	r25, Y+8	; 0x08
     b3a:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     b3e:	18 16       	cp	r1, r24
     b40:	0c f0       	brlt	.+2      	; 0xb44 <seqDoublePingPongFunc+0x240>
     b42:	40 c0       	rjmp	.+128    	; 0xbc4 <seqDoublePingPongFunc+0x2c0>
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
     b44:	6c a1       	ldd	r22, Y+36	; 0x24
     b46:	7d a1       	ldd	r23, Y+37	; 0x25
     b48:	8e a1       	ldd	r24, Y+38	; 0x26
     b4a:	9f a1       	ldd	r25, Y+39	; 0x27
     b4c:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     b50:	5b 01       	movw	r10, r22
     b52:	6c 01       	movw	r12, r24
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
     b58:	6d 81       	ldd	r22, Y+5	; 0x05
     b5a:	7e 81       	ldd	r23, Y+6	; 0x06
     b5c:	8f 81       	ldd	r24, Y+7	; 0x07
     b5e:	98 85       	ldd	r25, Y+8	; 0x08
     b60:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	c3 01       	movw	r24, r6
     b6a:	b2 01       	movw	r22, r4
     b6c:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
     b70:	88 23       	and	r24, r24
     b72:	94 f1       	brlt	.+100    	; 0xbd8 <seqDoublePingPongFunc+0x2d4>
     b74:	a3 01       	movw	r20, r6
     b76:	92 01       	movw	r18, r4
     b78:	6d 81       	ldd	r22, Y+5	; 0x05
     b7a:	7e 81       	ldd	r23, Y+6	; 0x06
     b7c:	8f 81       	ldd	r24, Y+7	; 0x07
     b7e:	98 85       	ldd	r25, Y+8	; 0x08
     b80:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     b84:	a6 01       	movw	r20, r12
     b86:	95 01       	movw	r18, r10
     b88:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
     b8c:	9b 01       	movw	r18, r22
     b8e:	ac 01       	movw	r20, r24
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 e8       	ldi	r24, 0x80	; 128
     b96:	9f e3       	ldi	r25, 0x3F	; 63
     b98:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     b9c:	06 2f       	mov	r16, r22
     b9e:	17 2f       	mov	r17, r23
     ba0:	c8 2e       	mov	r12, r24
     ba2:	d9 2e       	mov	r13, r25
     ba4:	1d c0       	rjmp	.+58     	; 0xbe0 <seqDoublePingPongFunc+0x2dc>
	
	for(int i = 0; i < num_leds / 2 + 1; i++)
	{
		float k;
		if(!led_dir) {
			if(i < pos) k = 1.0f;
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	68 94       	set
     bac:	cc 24       	eor	r12, r12
     bae:	c7 f8       	bld	r12, 7
     bb0:	0f 2e       	mov	r0, r31
     bb2:	ff e3       	ldi	r31, 0x3F	; 63
     bb4:	df 2e       	mov	r13, r31
     bb6:	f0 2d       	mov	r31, r0
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <seqDoublePingPongFunc+0x2dc>
			else if(i < pos + softness) k = 1.0f - (i-pos) / (softness);
			else k = 0.0f;
     bba:	00 e0       	ldi	r16, 0x00	; 0
     bbc:	10 e0       	ldi	r17, 0x00	; 0
     bbe:	c1 2c       	mov	r12, r1
     bc0:	d1 2c       	mov	r13, r1
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <seqDoublePingPongFunc+0x2dc>
		}
		else {
			if(i >= pos) k = 1.0f;
     bc4:	00 e0       	ldi	r16, 0x00	; 0
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	68 94       	set
     bca:	cc 24       	eor	r12, r12
     bcc:	c7 f8       	bld	r12, 7
     bce:	0f 2e       	mov	r0, r31
     bd0:	ff e3       	ldi	r31, 0x3F	; 63
     bd2:	df 2e       	mov	r13, r31
     bd4:	f0 2d       	mov	r31, r0
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <seqDoublePingPongFunc+0x2dc>
			else if(i >= pos - softness) k = 1.0f - (pos-i) / (softness);
			else k = 0.0f;
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	c1 2c       	mov	r12, r1
     bde:	d1 2c       	mov	r13, r1
		}
		
		leds[i].rgb.r = k*((colors[(color_i+1)%numColors]>>0)&0xFF) + (1.0f-k)*((colors[color_i]>>0)&0xFF);
     be0:	20 2f       	mov	r18, r16
     be2:	31 2f       	mov	r19, r17
     be4:	4c 2d       	mov	r20, r12
     be6:	5d 2d       	mov	r21, r13
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e8       	ldi	r24, 0x80	; 128
     bee:	9f e3       	ldi	r25, 0x3F	; 63
     bf0:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     bf4:	69 83       	std	Y+1, r22	; 0x01
     bf6:	7a 83       	std	Y+2, r23	; 0x02
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	9c 83       	std	Y+4, r25	; 0x04
     bfc:	20 2f       	mov	r18, r16
     bfe:	31 2f       	mov	r19, r17
     c00:	4c 2d       	mov	r20, r12
     c02:	5d 2d       	mov	r21, r13
     c04:	6b 85       	ldd	r22, Y+11	; 0x0b
     c06:	7c 85       	ldd	r23, Y+12	; 0x0c
     c08:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0c:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     c10:	2b 01       	movw	r4, r22
     c12:	3c 01       	movw	r6, r24
     c14:	2f 85       	ldd	r18, Y+15	; 0x0f
     c16:	38 89       	ldd	r19, Y+16	; 0x10
     c18:	49 89       	ldd	r20, Y+17	; 0x11
     c1a:	5a 89       	ldd	r21, Y+18	; 0x12
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	7a 81       	ldd	r23, Y+2	; 0x02
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     c28:	9b 01       	movw	r18, r22
     c2a:	ac 01       	movw	r20, r24
     c2c:	c3 01       	movw	r24, r6
     c2e:	b2 01       	movw	r22, r4
     c30:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     c34:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     c38:	b6 2e       	mov	r11, r22
     c3a:	f4 01       	movw	r30, r8
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	60 83       	st	Z, r22
		leds[i].rgb.g = k*((colors[(color_i+1)%numColors]>>8)&0xFF) + (1.0f-k)*((colors[color_i]>>8)&0xFF);
     c40:	20 2f       	mov	r18, r16
     c42:	31 2f       	mov	r19, r17
     c44:	4c 2d       	mov	r20, r12
     c46:	5d 2d       	mov	r21, r13
     c48:	6b 89       	ldd	r22, Y+19	; 0x13
     c4a:	7c 89       	ldd	r23, Y+20	; 0x14
     c4c:	8d 89       	ldd	r24, Y+21	; 0x15
     c4e:	9e 89       	ldd	r25, Y+22	; 0x16
     c50:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     c54:	2b 01       	movw	r4, r22
     c56:	3c 01       	movw	r6, r24
     c58:	2f 89       	ldd	r18, Y+23	; 0x17
     c5a:	38 8d       	ldd	r19, Y+24	; 0x18
     c5c:	49 8d       	ldd	r20, Y+25	; 0x19
     c5e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     c60:	69 81       	ldd	r22, Y+1	; 0x01
     c62:	7a 81       	ldd	r23, Y+2	; 0x02
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	c3 01       	movw	r24, r6
     c72:	b2 01       	movw	r22, r4
     c74:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     c78:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     c7c:	a6 2e       	mov	r10, r22
     c7e:	f4 01       	movw	r30, r8
     c80:	60 83       	st	Z, r22
		leds[i].rgb.b = k*((colors[(color_i+1)%numColors]>>16)&0xFF) + (1.0f-k)*((colors[color_i]>>16)&0xFF);
     c82:	20 2f       	mov	r18, r16
     c84:	31 2f       	mov	r19, r17
     c86:	4c 2d       	mov	r20, r12
     c88:	5d 2d       	mov	r21, r13
     c8a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     c8c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c92:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     c96:	2b 01       	movw	r4, r22
     c98:	3c 01       	movw	r6, r24
     c9a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     c9c:	38 a1       	ldd	r19, Y+32	; 0x20
     c9e:	49 a1       	ldd	r20, Y+33	; 0x21
     ca0:	5a a1       	ldd	r21, Y+34	; 0x22
     ca2:	69 81       	ldd	r22, Y+1	; 0x01
     ca4:	7a 81       	ldd	r23, Y+2	; 0x02
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	9c 81       	ldd	r25, Y+4	; 0x04
     caa:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     cae:	9b 01       	movw	r18, r22
     cb0:	ac 01       	movw	r20, r24
     cb2:	c3 01       	movw	r24, r6
     cb4:	b2 01       	movw	r22, r4
     cb6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     cba:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     cbe:	f4 01       	movw	r30, r8
     cc0:	32 97       	sbiw	r30, 0x02	; 2
     cc2:	60 83       	st	Z, r22
     cc4:	f1 01       	movw	r30, r2
     cc6:	31 97       	sbiw	r30, 0x01	; 1
		
		leds[num_leds-i-1].rgb.r = k*((colors[(color_i+1)%numColors]>>0)&0xFF) + (1.0f-k)*((colors[color_i]>>0)&0xFF);
     cc8:	b0 82       	st	Z, r11
		leds[num_leds-i-1].rgb.g = k*((colors[(color_i+1)%numColors]>>8)&0xFF) + (1.0f-k)*((colors[color_i]>>8)&0xFF);
     cca:	d1 01       	movw	r26, r2
     ccc:	ac 92       	st	X, r10
     cce:	31 97       	sbiw	r30, 0x01	; 1
		leds[num_leds-i-1].rgb.b = k*((colors[(color_i+1)%numColors]>>16)&0xFF) + (1.0f-k)*((colors[color_i]>>16)&0xFF);
     cd0:	60 83       	st	Z, r22
	static uint8_t color_i = 0;
	
	uint8_t softness = seqSoftness;
	float speed = seqSpeed / 100.0f;
	
	for(int i = 0; i < num_leds / 2 + 1; i++)
     cd2:	bf ef       	ldi	r27, 0xFF	; 255
     cd4:	eb 1a       	sub	r14, r27
     cd6:	fb 0a       	sbc	r15, r27
     cd8:	e4 e0       	ldi	r30, 0x04	; 4
     cda:	8e 0e       	add	r8, r30
     cdc:	91 1c       	adc	r9, r1
     cde:	f4 e0       	ldi	r31, 0x04	; 4
     ce0:	2f 1a       	sub	r2, r31
     ce2:	31 08       	sbc	r3, r1
     ce4:	29 85       	ldd	r18, Y+9	; 0x09
     ce6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce8:	e2 16       	cp	r14, r18
     cea:	f3 06       	cpc	r15, r19
     cec:	0c f4       	brge	.+2      	; 0xcf0 <seqDoublePingPongFunc+0x3ec>
     cee:	cf ce       	rjmp	.-610    	; 0xa8e <seqDoublePingPongFunc+0x18a>
		leds[num_leds-i-1].rgb.r = k*((colors[(color_i+1)%numColors]>>0)&0xFF) + (1.0f-k)*((colors[color_i]>>0)&0xFF);
		leds[num_leds-i-1].rgb.g = k*((colors[(color_i+1)%numColors]>>8)&0xFF) + (1.0f-k)*((colors[color_i]>>8)&0xFF);
		leds[num_leds-i-1].rgb.b = k*((colors[(color_i+1)%numColors]>>16)&0xFF) + (1.0f-k)*((colors[color_i]>>16)&0xFF);
	}
	
	if(!led_dir) pos += speed;
     cf0:	f0 90 c6 03 	lds	r15, 0x03C6
     cf4:	f1 10       	cpse	r15, r1
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <seqDoublePingPongFunc+0x422>
     cf8:	29 a5       	ldd	r18, Y+41	; 0x29
     cfa:	3a a5       	ldd	r19, Y+42	; 0x2a
     cfc:	4b a5       	ldd	r20, Y+43	; 0x2b
     cfe:	5c a5       	ldd	r21, Y+44	; 0x2c
     d00:	60 91 c2 03 	lds	r22, 0x03C2
     d04:	70 91 c3 03 	lds	r23, 0x03C3
     d08:	80 91 c4 03 	lds	r24, 0x03C4
     d0c:	90 91 c5 03 	lds	r25, 0x03C5
     d10:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     d14:	60 93 c2 03 	sts	0x03C2, r22
     d18:	70 93 c3 03 	sts	0x03C3, r23
     d1c:	80 93 c4 03 	sts	0x03C4, r24
     d20:	90 93 c5 03 	sts	0x03C5, r25
     d24:	16 c0       	rjmp	.+44     	; 0xd52 <seqDoublePingPongFunc+0x44e>
	else pos -= speed;
     d26:	29 a5       	ldd	r18, Y+41	; 0x29
     d28:	3a a5       	ldd	r19, Y+42	; 0x2a
     d2a:	4b a5       	ldd	r20, Y+43	; 0x2b
     d2c:	5c a5       	ldd	r21, Y+44	; 0x2c
     d2e:	60 91 c2 03 	lds	r22, 0x03C2
     d32:	70 91 c3 03 	lds	r23, 0x03C3
     d36:	80 91 c4 03 	lds	r24, 0x03C4
     d3a:	90 91 c5 03 	lds	r25, 0x03C5
     d3e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     d42:	60 93 c2 03 	sts	0x03C2, r22
     d46:	70 93 c3 03 	sts	0x03C3, r23
     d4a:	80 93 c4 03 	sts	0x03C4, r24
     d4e:	90 93 c5 03 	sts	0x03C5, r25
	if(pos >= (num_leds/2+1) + softness || pos < -softness) {
     d52:	38 a5       	ldd	r19, Y+40	; 0x28
     d54:	03 2f       	mov	r16, r19
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	c9 84       	ldd	r12, Y+9	; 0x09
     d5a:	da 84       	ldd	r13, Y+10	; 0x0a
     d5c:	c0 0e       	add	r12, r16
     d5e:	d1 1e       	adc	r13, r17
     d60:	80 90 c2 03 	lds	r8, 0x03C2
     d64:	90 90 c3 03 	lds	r9, 0x03C3
     d68:	a0 90 c4 03 	lds	r10, 0x03C4
     d6c:	b0 90 c5 03 	lds	r11, 0x03C5
     d70:	b6 01       	movw	r22, r12
     d72:	0d 2c       	mov	r0, r13
     d74:	00 0c       	add	r0, r0
     d76:	88 0b       	sbc	r24, r24
     d78:	99 0b       	sbc	r25, r25
     d7a:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     d7e:	a5 01       	movw	r20, r10
     d80:	94 01       	movw	r18, r8
     d82:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     d86:	18 16       	cp	r1, r24
     d88:	94 f4       	brge	.+36     	; 0xdae <seqDoublePingPongFunc+0x4aa>
     d8a:	66 27       	eor	r22, r22
     d8c:	77 27       	eor	r23, r23
     d8e:	60 1b       	sub	r22, r16
     d90:	71 0b       	sbc	r23, r17
     d92:	07 2e       	mov	r0, r23
     d94:	00 0c       	add	r0, r0
     d96:	88 0b       	sbc	r24, r24
     d98:	99 0b       	sbc	r25, r25
     d9a:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	c5 01       	movw	r24, r10
     da4:	b4 01       	movw	r22, r8
     da6:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     daa:	88 23       	and	r24, r24
     dac:	bc f5       	brge	.+110    	; 0xe1c <seqDoublePingPongFunc+0x518>
		color_i = (color_i+1)%numColors;
     dae:	80 91 c1 03 	lds	r24, 0x03C1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	60 91 42 01 	lds	r22, 0x0142
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
     dc0:	80 93 c1 03 	sts	0x03C1, r24
		led_dir = led_dir == 1 ? 0 : 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	f8 12       	cpse	r15, r24
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <seqDoublePingPongFunc+0x4c8>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	80 93 c6 03 	sts	0x03C6, r24
		if(!led_dir) pos = -softness;
     dd0:	81 11       	cpse	r24, r1
     dd2:	13 c0       	rjmp	.+38     	; 0xdfa <seqDoublePingPongFunc+0x4f6>
     dd4:	66 27       	eor	r22, r22
     dd6:	77 27       	eor	r23, r23
     dd8:	60 1b       	sub	r22, r16
     dda:	71 0b       	sbc	r23, r17
     ddc:	07 2e       	mov	r0, r23
     dde:	00 0c       	add	r0, r0
     de0:	88 0b       	sbc	r24, r24
     de2:	99 0b       	sbc	r25, r25
     de4:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     de8:	60 93 c2 03 	sts	0x03C2, r22
     dec:	70 93 c3 03 	sts	0x03C3, r23
     df0:	80 93 c4 03 	sts	0x03C4, r24
     df4:	90 93 c5 03 	sts	0x03C5, r25
     df8:	11 c0       	rjmp	.+34     	; 0xe1c <seqDoublePingPongFunc+0x518>
		else pos = (num_leds/2+1) + softness - 1;
     dfa:	b6 01       	movw	r22, r12
     dfc:	61 50       	subi	r22, 0x01	; 1
     dfe:	71 09       	sbc	r23, r1
     e00:	07 2e       	mov	r0, r23
     e02:	00 0c       	add	r0, r0
     e04:	88 0b       	sbc	r24, r24
     e06:	99 0b       	sbc	r25, r25
     e08:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     e0c:	60 93 c2 03 	sts	0x03C2, r22
     e10:	70 93 c3 03 	sts	0x03C3, r23
     e14:	80 93 c4 03 	sts	0x03C4, r24
     e18:	90 93 c5 03 	sts	0x03C5, r25
	}
}
     e1c:	ac 96       	adiw	r28, 0x2c	; 44
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	4f 90       	pop	r4
     e48:	3f 90       	pop	r3
     e4a:	2f 90       	pop	r2
     e4c:	08 95       	ret

00000e4e <seqFadeFunc>:

static void seqFadeFunc(color_t *leds, int num_leds)
{
     e4e:	2f 92       	push	r2
     e50:	3f 92       	push	r3
     e52:	4f 92       	push	r4
     e54:	5f 92       	push	r5
     e56:	6f 92       	push	r6
     e58:	7f 92       	push	r7
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	8c 01       	movw	r16, r24
     e74:	eb 01       	movw	r28, r22
	static uint8_t color_i = 0;
	static int8_t led_dir = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
     e76:	60 91 45 01 	lds	r22, 0x0145
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e4       	ldi	r19, 0x40	; 64
     e88:	4c e9       	ldi	r20, 0x9C	; 156
     e8a:	55 e4       	ldi	r21, 0x45	; 69
     e8c:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
     e90:	2b 01       	movw	r4, r22
     e92:	3c 01       	movw	r6, r24
	
	for(int i = 0; i < num_leds; i++)
     e94:	1c 16       	cp	r1, r28
     e96:	1d 06       	cpc	r1, r29
     e98:	0c f0       	brlt	.+2      	; 0xe9c <seqFadeFunc+0x4e>
     e9a:	53 c0       	rjmp	.+166    	; 0xf42 <seqFadeFunc+0xf4>
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     e9c:	e0 91 cc 03 	lds	r30, 0x03CC
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	ee 5f       	subi	r30, 0xFE	; 254
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	80 80       	ld	r8, Z
     eb0:	91 80       	ldd	r9, Z+1	; 0x01
     eb2:	a2 80       	ldd	r10, Z+2	; 0x02
     eb4:	b3 80       	ldd	r11, Z+3	; 0x03
     eb6:	c0 90 c8 03 	lds	r12, 0x03C8
     eba:	d0 90 c9 03 	lds	r13, 0x03C9
     ebe:	e0 90 ca 03 	lds	r14, 0x03CA
     ec2:	f0 90 cb 03 	lds	r15, 0x03CB
     ec6:	c5 01       	movw	r24, r10
     ec8:	b4 01       	movw	r22, r8
     eca:	77 27       	eor	r23, r23
     ecc:	88 27       	eor	r24, r24
     ece:	99 27       	eor	r25, r25
     ed0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     ed4:	a7 01       	movw	r20, r14
     ed6:	96 01       	movw	r18, r12
     ed8:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     edc:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     ee0:	26 2e       	mov	r2, r22
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     ee2:	69 2d       	mov	r22, r9
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     efa:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     efe:	36 2e       	mov	r3, r22
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     f00:	6a 2d       	mov	r22, r10
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
     f0c:	9b 01       	movw	r18, r22
     f0e:	ac 01       	movw	r20, r24
     f10:	c7 01       	movw	r24, r14
     f12:	b6 01       	movw	r22, r12
     f14:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
     f18:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
     f1c:	f8 01       	movw	r30, r16
     f1e:	32 96       	adiw	r30, 0x02	; 2
     f20:	cc 0f       	add	r28, r28
     f22:	dd 1f       	adc	r29, r29
     f24:	cc 0f       	add	r28, r28
     f26:	dd 1f       	adc	r29, r29
     f28:	22 96       	adiw	r28, 0x02	; 2
     f2a:	0c 0f       	add	r16, r28
     f2c:	1d 1f       	adc	r17, r29
     f2e:	df 01       	movw	r26, r30
     f30:	11 97       	sbiw	r26, 0x01	; 1
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     f32:	2c 92       	st	X, r2
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     f34:	30 82       	st	Z, r3
     f36:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     f38:	6c 93       	st	X, r22
     f3a:	34 96       	adiw	r30, 0x04	; 4
	static int8_t led_dir = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
     f3c:	e0 17       	cp	r30, r16
     f3e:	f1 07       	cpc	r31, r17
     f40:	b1 f7       	brne	.-20     	; 0xf2e <seqFadeFunc+0xe0>
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
	}
	
	if(!led_dir) k+=speed;
     f42:	80 91 c7 03 	lds	r24, 0x03C7
     f46:	81 11       	cpse	r24, r1
     f48:	15 c0       	rjmp	.+42     	; 0xf74 <seqFadeFunc+0x126>
     f4a:	a3 01       	movw	r20, r6
     f4c:	92 01       	movw	r18, r4
     f4e:	60 91 c8 03 	lds	r22, 0x03C8
     f52:	70 91 c9 03 	lds	r23, 0x03C9
     f56:	80 91 ca 03 	lds	r24, 0x03CA
     f5a:	90 91 cb 03 	lds	r25, 0x03CB
     f5e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
     f62:	60 93 c8 03 	sts	0x03C8, r22
     f66:	70 93 c9 03 	sts	0x03C9, r23
     f6a:	80 93 ca 03 	sts	0x03CA, r24
     f6e:	90 93 cb 03 	sts	0x03CB, r25
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <seqFadeFunc+0x14e>
	else k-=speed;
     f74:	a3 01       	movw	r20, r6
     f76:	92 01       	movw	r18, r4
     f78:	60 91 c8 03 	lds	r22, 0x03C8
     f7c:	70 91 c9 03 	lds	r23, 0x03C9
     f80:	80 91 ca 03 	lds	r24, 0x03CA
     f84:	90 91 cb 03 	lds	r25, 0x03CB
     f88:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
     f8c:	60 93 c8 03 	sts	0x03C8, r22
     f90:	70 93 c9 03 	sts	0x03C9, r23
     f94:	80 93 ca 03 	sts	0x03CA, r24
     f98:	90 93 cb 03 	sts	0x03CB, r25
	if(k >= 1.0f) {
     f9c:	c0 90 c8 03 	lds	r12, 0x03C8
     fa0:	d0 90 c9 03 	lds	r13, 0x03C9
     fa4:	e0 90 ca 03 	lds	r14, 0x03CA
     fa8:	f0 90 cb 03 	lds	r15, 0x03CB
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e8       	ldi	r20, 0x80	; 128
     fb2:	5f e3       	ldi	r21, 0x3F	; 63
     fb4:	c7 01       	movw	r24, r14
     fb6:	b6 01       	movw	r22, r12
     fb8:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
     fbc:	88 23       	and	r24, r24
     fbe:	84 f0       	brlt	.+32     	; 0xfe0 <seqFadeFunc+0x192>
		led_dir = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	80 93 c7 03 	sts	0x03C7, r24
		k = 1.0f;
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 e8       	ldi	r26, 0x80	; 128
     fcc:	bf e3       	ldi	r27, 0x3F	; 63
     fce:	80 93 c8 03 	sts	0x03C8, r24
     fd2:	90 93 c9 03 	sts	0x03C9, r25
     fd6:	a0 93 ca 03 	sts	0x03CA, r26
     fda:	b0 93 cb 03 	sts	0x03CB, r27
     fde:	22 c0       	rjmp	.+68     	; 0x1024 <seqFadeFunc+0x1d6>
	}
	if(k <= 0.0f && led_dir) {
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	c7 01       	movw	r24, r14
     fe8:	b6 01       	movw	r22, r12
     fea:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	cc f0       	brlt	.+50     	; 0x1024 <seqFadeFunc+0x1d6>
     ff2:	80 91 c7 03 	lds	r24, 0x03C7
     ff6:	88 23       	and	r24, r24
     ff8:	a9 f0       	breq	.+42     	; 0x1024 <seqFadeFunc+0x1d6>
		color_i = (color_i+1)%numColors;
     ffa:	80 91 cc 03 	lds	r24, 0x03CC
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	60 91 42 01 	lds	r22, 0x0142
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    100c:	80 93 cc 03 	sts	0x03CC, r24
		led_dir = 0;
    1010:	10 92 c7 03 	sts	0x03C7, r1
		k = 0.0f;
    1014:	10 92 c8 03 	sts	0x03C8, r1
    1018:	10 92 c9 03 	sts	0x03C9, r1
    101c:	10 92 ca 03 	sts	0x03CA, r1
    1020:	10 92 cb 03 	sts	0x03CB, r1
	}
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	9f 90       	pop	r9
    103a:	8f 90       	pop	r8
    103c:	7f 90       	pop	r7
    103e:	6f 90       	pop	r6
    1040:	5f 90       	pop	r5
    1042:	4f 90       	pop	r4
    1044:	3f 90       	pop	r3
    1046:	2f 90       	pop	r2
    1048:	08 95       	ret

0000104a <seqSoftSwitchFunc>:

static void seqSoftSwitchFunc(color_t *leds, int num_leds)
{
    104a:	2f 92       	push	r2
    104c:	3f 92       	push	r3
    104e:	4f 92       	push	r4
    1050:	5f 92       	push	r5
    1052:	6f 92       	push	r6
    1054:	7f 92       	push	r7
    1056:	8f 92       	push	r8
    1058:	9f 92       	push	r9
    105a:	af 92       	push	r10
    105c:	bf 92       	push	r11
    105e:	cf 92       	push	r12
    1060:	df 92       	push	r13
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	2d 97       	sbiw	r28, 0x0d	; 13
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	1c 01       	movw	r2, r24
    1080:	8b 01       	movw	r16, r22
	static uint8_t color_i = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
    1082:	60 91 45 01 	lds	r22, 0x0145
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e4       	ldi	r19, 0x40	; 64
    1094:	4c e9       	ldi	r20, 0x9C	; 156
    1096:	55 e4       	ldi	r21, 0x45	; 69
    1098:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    109c:	69 87       	std	Y+9, r22	; 0x09
    109e:	7a 87       	std	Y+10, r23	; 0x0a
    10a0:	8b 87       	std	Y+11, r24	; 0x0b
    10a2:	9c 87       	std	Y+12, r25	; 0x0c
	
	for(int i = 0; i < num_leds; i++)
    10a4:	10 16       	cp	r1, r16
    10a6:	11 06       	cpc	r1, r17
    10a8:	0c f0       	brlt	.+2      	; 0x10ac <seqSoftSwitchFunc+0x62>
    10aa:	c2 c0       	rjmp	.+388    	; 0x1230 <seqSoftSwitchFunc+0x1e6>
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
    10ac:	80 91 ce 03 	lds	r24, 0x03CE
    10b0:	90 91 cf 03 	lds	r25, 0x03CF
    10b4:	a0 91 d0 03 	lds	r26, 0x03D0
    10b8:	b0 91 d1 03 	lds	r27, 0x03D1
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	ab 83       	std	Y+3, r26	; 0x03
    10c2:	bc 83       	std	Y+4, r27	; 0x04
    10c4:	9c 01       	movw	r18, r24
    10c6:	ad 01       	movw	r20, r26
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e8       	ldi	r24, 0x80	; 128
    10ce:	9f e3       	ldi	r25, 0x3F	; 63
    10d0:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
    10d4:	6d 83       	std	Y+5, r22	; 0x05
    10d6:	7e 83       	std	Y+6, r23	; 0x06
    10d8:	8f 83       	std	Y+7, r24	; 0x07
    10da:	98 87       	std	Y+8, r25	; 0x08
    10dc:	80 91 cd 03 	lds	r24, 0x03CD
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	fc 01       	movw	r30, r24
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	ee 5f       	subi	r30, 0xFE	; 254
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	80 80       	ld	r8, Z
    10f2:	91 80       	ldd	r9, Z+1	; 0x01
    10f4:	a2 80       	ldd	r10, Z+2	; 0x02
    10f6:	b3 80       	ldd	r11, Z+3	; 0x03
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	60 91 42 01 	lds	r22, 0x0142
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    1104:	fc 01       	movw	r30, r24
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	ee 5f       	subi	r30, 0xFE	; 254
    1110:	fe 4f       	sbci	r31, 0xFE	; 254
    1112:	c0 80       	ld	r12, Z
    1114:	d1 80       	ldd	r13, Z+1	; 0x01
    1116:	e2 80       	ldd	r14, Z+2	; 0x02
    1118:	f3 80       	ldd	r15, Z+3	; 0x03
    111a:	c5 01       	movw	r24, r10
    111c:	b4 01       	movw	r22, r8
    111e:	77 27       	eor	r23, r23
    1120:	88 27       	eor	r24, r24
    1122:	99 27       	eor	r25, r25
    1124:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	6d 81       	ldd	r22, Y+5	; 0x05
    112e:	7e 81       	ldd	r23, Y+6	; 0x06
    1130:	8f 81       	ldd	r24, Y+7	; 0x07
    1132:	98 85       	ldd	r25, Y+8	; 0x08
    1134:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1138:	2b 01       	movw	r4, r22
    113a:	3c 01       	movw	r6, r24
    113c:	c7 01       	movw	r24, r14
    113e:	b6 01       	movw	r22, r12
    1140:	77 27       	eor	r23, r23
    1142:	88 27       	eor	r24, r24
    1144:	99 27       	eor	r25, r25
    1146:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	69 81       	ldd	r22, Y+1	; 0x01
    1150:	7a 81       	ldd	r23, Y+2	; 0x02
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    115a:	9b 01       	movw	r18, r22
    115c:	ac 01       	movw	r20, r24
    115e:	c3 01       	movw	r24, r6
    1160:	b2 01       	movw	r22, r4
    1162:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1166:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    116a:	6d 87       	std	Y+13, r22	; 0x0d
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
    116c:	69 2d       	mov	r22, r9
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	6d 81       	ldd	r22, Y+5	; 0x05
    117e:	7e 81       	ldd	r23, Y+6	; 0x06
    1180:	8f 81       	ldd	r24, Y+7	; 0x07
    1182:	98 85       	ldd	r25, Y+8	; 0x08
    1184:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1188:	2b 01       	movw	r4, r22
    118a:	3c 01       	movw	r6, r24
    118c:	6d 2d       	mov	r22, r13
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	69 81       	ldd	r22, Y+1	; 0x01
    119e:	7a 81       	ldd	r23, Y+2	; 0x02
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    11a8:	9b 01       	movw	r18, r22
    11aa:	ac 01       	movw	r20, r24
    11ac:	c3 01       	movw	r24, r6
    11ae:	b2 01       	movw	r22, r4
    11b0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    11b4:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    11b8:	76 2e       	mov	r7, r22
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
    11ba:	6a 2d       	mov	r22, r10
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    11c6:	9b 01       	movw	r18, r22
    11c8:	ac 01       	movw	r20, r24
    11ca:	6d 81       	ldd	r22, Y+5	; 0x05
    11cc:	7e 81       	ldd	r23, Y+6	; 0x06
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	98 85       	ldd	r25, Y+8	; 0x08
    11d2:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    11d6:	4b 01       	movw	r8, r22
    11d8:	5c 01       	movw	r10, r24
    11da:	6e 2d       	mov	r22, r14
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    11e6:	9b 01       	movw	r18, r22
    11e8:	ac 01       	movw	r20, r24
    11ea:	69 81       	ldd	r22, Y+1	; 0x01
    11ec:	7a 81       	ldd	r23, Y+2	; 0x02
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	c5 01       	movw	r24, r10
    11fc:	b4 01       	movw	r22, r8
    11fe:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1202:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1206:	f1 01       	movw	r30, r2
    1208:	32 96       	adiw	r30, 0x02	; 2
    120a:	00 0f       	add	r16, r16
    120c:	11 1f       	adc	r17, r17
    120e:	00 0f       	add	r16, r16
    1210:	11 1f       	adc	r17, r17
    1212:	0e 5f       	subi	r16, 0xFE	; 254
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	20 0e       	add	r2, r16
    1218:	31 1e       	adc	r3, r17
    121a:	8d 85       	ldd	r24, Y+13	; 0x0d
    121c:	df 01       	movw	r26, r30
    121e:	11 97       	sbiw	r26, 0x01	; 1
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
    1220:	8c 93       	st	X, r24
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
    1222:	70 82       	st	Z, r7
    1224:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
    1226:	6c 93       	st	X, r22
    1228:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t color_i = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
    122a:	e2 15       	cp	r30, r2
    122c:	f3 05       	cpc	r31, r3
    122e:	b1 f7       	brne	.-20     	; 0x121c <seqSoftSwitchFunc+0x1d2>
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
	}
	
	k += speed;
    1230:	20 91 ce 03 	lds	r18, 0x03CE
    1234:	30 91 cf 03 	lds	r19, 0x03CF
    1238:	40 91 d0 03 	lds	r20, 0x03D0
    123c:	50 91 d1 03 	lds	r21, 0x03D1
    1240:	69 85       	ldd	r22, Y+9	; 0x09
    1242:	7a 85       	ldd	r23, Y+10	; 0x0a
    1244:	8b 85       	ldd	r24, Y+11	; 0x0b
    1246:	9c 85       	ldd	r25, Y+12	; 0x0c
    1248:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    124c:	60 93 ce 03 	sts	0x03CE, r22
    1250:	70 93 cf 03 	sts	0x03CF, r23
    1254:	80 93 d0 03 	sts	0x03D0, r24
    1258:	90 93 d1 03 	sts	0x03D1, r25
	if(k >= 1.0f) {
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
    1268:	88 23       	and	r24, r24
    126a:	9c f0       	brlt	.+38     	; 0x1292 <seqSoftSwitchFunc+0x248>
		color_i = (color_i+1)%numColors;
    126c:	80 91 cd 03 	lds	r24, 0x03CD
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	60 91 42 01 	lds	r22, 0x0142
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    127e:	80 93 cd 03 	sts	0x03CD, r24
		k = 0;
    1282:	10 92 ce 03 	sts	0x03CE, r1
    1286:	10 92 cf 03 	sts	0x03CF, r1
    128a:	10 92 d0 03 	sts	0x03D0, r1
    128e:	10 92 d1 03 	sts	0x03D1, r1
	}
}
    1292:	2d 96       	adiw	r28, 0x0d	; 13
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	9f 90       	pop	r9
    12b4:	8f 90       	pop	r8
    12b6:	7f 90       	pop	r7
    12b8:	6f 90       	pop	r6
    12ba:	5f 90       	pop	r5
    12bc:	4f 90       	pop	r4
    12be:	3f 90       	pop	r3
    12c0:	2f 90       	pop	r2
    12c2:	08 95       	ret

000012c4 <seqStaticColor>:

static void seqStaticColor(color_t *leds, int num_leds)
{
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
	for(int i = 0; i < num_leds; i++)
    12c8:	16 16       	cp	r1, r22
    12ca:	17 06       	cpc	r1, r23
    12cc:	b4 f4       	brge	.+44     	; 0x12fa <seqStaticColor+0x36>
	leds[i].val = colors[0];
    12ce:	00 91 02 01 	lds	r16, 0x0102
    12d2:	10 91 03 01 	lds	r17, 0x0103
    12d6:	20 91 04 01 	lds	r18, 0x0104
    12da:	30 91 05 01 	lds	r19, 0x0105
    12de:	fc 01       	movw	r30, r24
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	86 0f       	add	r24, r22
    12ea:	97 1f       	adc	r25, r23
    12ec:	01 93       	st	Z+, r16
    12ee:	11 93       	st	Z+, r17
    12f0:	21 93       	st	Z+, r18
    12f2:	31 93       	st	Z+, r19
	}
}

static void seqStaticColor(color_t *leds, int num_leds)
{
	for(int i = 0; i < num_leds; i++)
    12f4:	e8 17       	cp	r30, r24
    12f6:	f9 07       	cpc	r31, r25
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <seqStaticColor+0x28>
	leds[i].val = colors[0];
}
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <seqParticles>:
	if(pos > 2*M_PI)
	pos -= 2*M_PI;
}

static void seqParticles(color_t *leds, int num_leds)
{
    1300:	2f 92       	push	r2
    1302:	3f 92       	push	r3
    1304:	4f 92       	push	r4
    1306:	5f 92       	push	r5
    1308:	6f 92       	push	r6
    130a:	7f 92       	push	r7
    130c:	8f 92       	push	r8
    130e:	9f 92       	push	r9
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	a6 97       	sbiw	r28, 0x26	; 38
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	9e 8f       	std	Y+30, r25	; 0x1e
    1336:	8d 8f       	std	Y+29, r24	; 0x1d
    1338:	7a a3       	std	Y+34, r23	; 0x22
    133a:	69 a3       	std	Y+33, r22	; 0x21
	static float pos = 0;
	static int length = 0;
	static int color_id = 0;
	static uint8_t decremented = 0;
	
	float speed = seqSpeed / 50.0f;
    133c:	60 91 45 01 	lds	r22, 0x0145
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	48 e4       	ldi	r20, 0x48	; 72
    1350:	52 e4       	ldi	r21, 0x42	; 66
    1352:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    1356:	6b a3       	std	Y+35, r22	; 0x23
    1358:	7c a3       	std	Y+36, r23	; 0x24
    135a:	8d a3       	std	Y+37, r24	; 0x25
    135c:	9e a3       	std	Y+38, r25	; 0x26
	float size = seqSize;
    135e:	60 91 43 01 	lds	r22, 0x0143
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    136c:	69 8b       	std	Y+17, r22	; 0x11
    136e:	7a 8b       	std	Y+18, r23	; 0x12
    1370:	8b 8b       	std	Y+19, r24	; 0x13
    1372:	9c 8b       	std	Y+20, r25	; 0x14
	
	if(length <= 0) {
    1374:	80 91 dd 03 	lds	r24, 0x03DD
    1378:	90 91 de 03 	lds	r25, 0x03DE
    137c:	18 16       	cp	r1, r24
    137e:	19 06       	cpc	r1, r25
    1380:	d4 f0       	brlt	.+52     	; 0x13b6 <seqParticles+0xb6>
		length = num_leds;
    1382:	29 a1       	ldd	r18, Y+33	; 0x21
    1384:	3a a1       	ldd	r19, Y+34	; 0x22
    1386:	30 93 de 03 	sts	0x03DE, r19
    138a:	20 93 dd 03 	sts	0x03DD, r18
		color_id = (color_id+1) % numColors;
    138e:	80 91 db 03 	lds	r24, 0x03DB
    1392:	90 91 dc 03 	lds	r25, 0x03DC
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	60 91 42 01 	lds	r22, 0x0142
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    13a2:	90 93 dc 03 	sts	0x03DC, r25
    13a6:	80 93 db 03 	sts	0x03DB, r24
	}
	
	for(int i = 0; i < length; i++) {
    13aa:	38 a3       	std	Y+32, r19	; 0x20
    13ac:	2f 8f       	std	Y+31, r18	; 0x1f
    13ae:	12 16       	cp	r1, r18
    13b0:	13 06       	cpc	r1, r19
    13b2:	0c f0       	brlt	.+2      	; 0x13b6 <seqParticles+0xb6>
    13b4:	36 c1       	rjmp	.+620    	; 0x1622 <seqParticles+0x322>
		float dist = pos-i;
    13b6:	60 91 d7 03 	lds	r22, 0x03D7
    13ba:	70 91 d8 03 	lds	r23, 0x03D8
    13be:	80 91 d9 03 	lds	r24, 0x03D9
    13c2:	90 91 da 03 	lds	r25, 0x03DA
    13c6:	6d 8b       	std	Y+21, r22	; 0x15
    13c8:	7e 8b       	std	Y+22, r23	; 0x16
    13ca:	8f 8b       	std	Y+23, r24	; 0x17
    13cc:	98 8f       	std	Y+24, r25	; 0x18
		dist = dist < 0 ? -dist : dist;
		if(dist < size) {
			float k = dist / size;
			leds[i].rgb.r = k*((colors[color_id]>>0)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    13ce:	80 91 db 03 	lds	r24, 0x03DB
    13d2:	90 91 dc 03 	lds	r25, 0x03DC
    13d6:	dc 01       	movw	r26, r24
    13d8:	11 96       	adiw	r26, 0x01	; 1
    13da:	ba 8f       	std	Y+26, r27	; 0x1a
    13dc:	a9 8f       	std	Y+25, r26	; 0x19
    13de:	20 91 42 01 	lds	r18, 0x0142
    13e2:	e2 2f       	mov	r30, r18
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	fc 8f       	std	Y+28, r31	; 0x1c
    13e8:	eb 8f       	std	Y+27, r30	; 0x1b
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    13ea:	20 91 dd 03 	lds	r18, 0x03DD
    13ee:	30 91 de 03 	lds	r19, 0x03DE
    13f2:	38 a3       	std	Y+32, r19	; 0x20
    13f4:	2f 8f       	std	Y+31, r18	; 0x1f
    13f6:	2d 8c       	ldd	r2, Y+29	; 0x1d
    13f8:	3e 8c       	ldd	r3, Y+30	; 0x1e
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	23 1a       	sub	r2, r19
    13fe:	33 0a       	sbc	r3, r19
    1400:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1402:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1404:	32 01       	movw	r6, r4
    1406:	42 e0       	ldi	r20, 0x02	; 2
    1408:	64 0e       	add	r6, r20
    140a:	71 1c       	adc	r7, r1
    140c:	00 e0       	ldi	r16, 0x00	; 0
    140e:	10 e0       	ldi	r17, 0x00	; 0
			float k = dist / size;
			leds[i].rgb.r = k*((colors[color_id]>>0)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
			leds[i].rgb.g = k*((colors[color_id]>>8)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>8)&0xFF);
			leds[i].rgb.b = k*((colors[color_id]>>16)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>16)&0xFF);
			} else {
			leds[i].rgb.r = ((colors[color_id]>>0)&0xFF);
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	bc 01       	movw	r22, r24
    141a:	6e 5f       	subi	r22, 0xFE	; 254
    141c:	7e 4f       	sbci	r23, 0xFE	; 254
    141e:	af 8c       	ldd	r10, Y+31	; 0x1f
    1420:	b8 a0       	ldd	r11, Y+32	; 0x20
    1422:	41 01       	movw	r8, r2
    1424:	13 01       	movw	r2, r6
    1426:	32 01       	movw	r6, r4
    1428:	2b 01       	movw	r4, r22
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
		float dist = pos-i;
    142a:	b8 01       	movw	r22, r16
    142c:	01 2e       	mov	r0, r17
    142e:	00 0c       	add	r0, r0
    1430:	88 0b       	sbc	r24, r24
    1432:	99 0b       	sbc	r25, r25
    1434:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	6d 89       	ldd	r22, Y+21	; 0x15
    143e:	7e 89       	ldd	r23, Y+22	; 0x16
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	98 8d       	ldd	r25, Y+24	; 0x18
    1444:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
    1448:	6b 01       	movw	r12, r22
    144a:	7c 01       	movw	r14, r24
		dist = dist < 0 ? -dist : dist;
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
    1456:	88 23       	and	r24, r24
    1458:	24 f4       	brge	.+8      	; 0x1462 <seqParticles+0x162>
    145a:	f7 fa       	bst	r15, 7
    145c:	f0 94       	com	r15
    145e:	f7 f8       	bld	r15, 7
    1460:	f0 94       	com	r15
		if(dist < size) {
    1462:	29 89       	ldd	r18, Y+17	; 0x11
    1464:	3a 89       	ldd	r19, Y+18	; 0x12
    1466:	4b 89       	ldd	r20, Y+19	; 0x13
    1468:	5c 89       	ldd	r21, Y+20	; 0x14
    146a:	c7 01       	movw	r24, r14
    146c:	b6 01       	movw	r22, r12
    146e:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
    1472:	88 23       	and	r24, r24
    1474:	0c f0       	brlt	.+2      	; 0x1478 <seqParticles+0x178>
    1476:	bc c0       	rjmp	.+376    	; 0x15f0 <seqParticles+0x2f0>
			float k = dist / size;
    1478:	29 89       	ldd	r18, Y+17	; 0x11
    147a:	3a 89       	ldd	r19, Y+18	; 0x12
    147c:	4b 89       	ldd	r20, Y+19	; 0x13
    147e:	5c 89       	ldd	r21, Y+20	; 0x14
    1480:	c7 01       	movw	r24, r14
    1482:	b6 01       	movw	r22, r12
    1484:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    1488:	69 83       	std	Y+1, r22	; 0x01
    148a:	7a 83       	std	Y+2, r23	; 0x02
    148c:	8b 83       	std	Y+3, r24	; 0x03
    148e:	9c 83       	std	Y+4, r25	; 0x04
			leds[i].rgb.r = k*((colors[color_id]>>0)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    1490:	d2 01       	movw	r26, r4
    1492:	8d 91       	ld	r24, X+
    1494:	9d 91       	ld	r25, X+
    1496:	0d 90       	ld	r0, X+
    1498:	bc 91       	ld	r27, X
    149a:	a0 2d       	mov	r26, r0
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	af 83       	std	Y+7, r26	; 0x07
    14a2:	b8 87       	std	Y+8, r27	; 0x08
    14a4:	29 81       	ldd	r18, Y+1	; 0x01
    14a6:	3a 81       	ldd	r19, Y+2	; 0x02
    14a8:	4b 81       	ldd	r20, Y+3	; 0x03
    14aa:	5c 81       	ldd	r21, Y+4	; 0x04
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	80 e8       	ldi	r24, 0x80	; 128
    14b2:	9f e3       	ldi	r25, 0x3F	; 63
    14b4:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
    14b8:	69 87       	std	Y+9, r22	; 0x09
    14ba:	7a 87       	std	Y+10, r23	; 0x0a
    14bc:	8b 87       	std	Y+11, r24	; 0x0b
    14be:	9c 87       	std	Y+12, r25	; 0x0c
    14c0:	89 8d       	ldd	r24, Y+25	; 0x19
    14c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14c4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    14c6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    14c8:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    14cc:	7c 01       	movw	r14, r24
    14ce:	6d 81       	ldd	r22, Y+5	; 0x05
    14d0:	7e 81       	ldd	r23, Y+6	; 0x06
    14d2:	8f 81       	ldd	r24, Y+7	; 0x07
    14d4:	98 85       	ldd	r25, Y+8	; 0x08
    14d6:	77 27       	eor	r23, r23
    14d8:	88 27       	eor	r24, r24
    14da:	99 27       	eor	r25, r25
    14dc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    14e0:	29 81       	ldd	r18, Y+1	; 0x01
    14e2:	3a 81       	ldd	r19, Y+2	; 0x02
    14e4:	4b 81       	ldd	r20, Y+3	; 0x03
    14e6:	5c 81       	ldd	r21, Y+4	; 0x04
    14e8:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    14ec:	6d 87       	std	Y+13, r22	; 0x0d
    14ee:	7e 87       	std	Y+14, r23	; 0x0e
    14f0:	8f 87       	std	Y+15, r24	; 0x0f
    14f2:	98 8b       	std	Y+16, r25	; 0x10
    14f4:	c7 01       	movw	r24, r14
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	8e 5f       	subi	r24, 0xFE	; 254
    1500:	9e 4f       	sbci	r25, 0xFE	; 254
    1502:	fc 01       	movw	r30, r24
    1504:	c0 80       	ld	r12, Z
    1506:	d1 80       	ldd	r13, Z+1	; 0x01
    1508:	e2 80       	ldd	r14, Z+2	; 0x02
    150a:	f3 80       	ldd	r15, Z+3	; 0x03
    150c:	c7 01       	movw	r24, r14
    150e:	b6 01       	movw	r22, r12
    1510:	77 27       	eor	r23, r23
    1512:	88 27       	eor	r24, r24
    1514:	99 27       	eor	r25, r25
    1516:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	69 85       	ldd	r22, Y+9	; 0x09
    1520:	7a 85       	ldd	r23, Y+10	; 0x0a
    1522:	8b 85       	ldd	r24, Y+11	; 0x0b
    1524:	9c 85       	ldd	r25, Y+12	; 0x0c
    1526:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    152a:	9b 01       	movw	r18, r22
    152c:	ac 01       	movw	r20, r24
    152e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1530:	7e 85       	ldd	r23, Y+14	; 0x0e
    1532:	8f 85       	ldd	r24, Y+15	; 0x0f
    1534:	98 89       	ldd	r25, Y+16	; 0x10
    1536:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    153a:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    153e:	d4 01       	movw	r26, r8
    1540:	6c 93       	st	X, r22
			leds[i].rgb.g = k*((colors[color_id]>>8)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>8)&0xFF);
    1542:	be 81       	ldd	r27, Y+6	; 0x06
    1544:	6b 2f       	mov	r22, r27
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1550:	29 81       	ldd	r18, Y+1	; 0x01
    1552:	3a 81       	ldd	r19, Y+2	; 0x02
    1554:	4b 81       	ldd	r20, Y+3	; 0x03
    1556:	5c 81       	ldd	r21, Y+4	; 0x04
    1558:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    155c:	6d 87       	std	Y+13, r22	; 0x0d
    155e:	7e 87       	std	Y+14, r23	; 0x0e
    1560:	8f 87       	std	Y+15, r24	; 0x0f
    1562:	98 8b       	std	Y+16, r25	; 0x10
    1564:	6d 2d       	mov	r22, r13
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1570:	9b 01       	movw	r18, r22
    1572:	ac 01       	movw	r20, r24
    1574:	69 85       	ldd	r22, Y+9	; 0x09
    1576:	7a 85       	ldd	r23, Y+10	; 0x0a
    1578:	8b 85       	ldd	r24, Y+11	; 0x0b
    157a:	9c 85       	ldd	r25, Y+12	; 0x0c
    157c:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	6d 85       	ldd	r22, Y+13	; 0x0d
    1586:	7e 85       	ldd	r23, Y+14	; 0x0e
    1588:	8f 85       	ldd	r24, Y+15	; 0x0f
    158a:	98 89       	ldd	r25, Y+16	; 0x10
    158c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1590:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1594:	f1 01       	movw	r30, r2
    1596:	60 83       	st	Z, r22
			leds[i].rgb.b = k*((colors[color_id]>>16)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>16)&0xFF);
    1598:	ff 81       	ldd	r31, Y+7	; 0x07
    159a:	6f 2f       	mov	r22, r31
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    15a6:	29 81       	ldd	r18, Y+1	; 0x01
    15a8:	3a 81       	ldd	r19, Y+2	; 0x02
    15aa:	4b 81       	ldd	r20, Y+3	; 0x03
    15ac:	5c 81       	ldd	r21, Y+4	; 0x04
    15ae:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    15b2:	69 83       	std	Y+1, r22	; 0x01
    15b4:	7a 83       	std	Y+2, r23	; 0x02
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	6e 2d       	mov	r22, r14
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	69 85       	ldd	r22, Y+9	; 0x09
    15cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d2:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    15d6:	9b 01       	movw	r18, r22
    15d8:	ac 01       	movw	r20, r24
    15da:	69 81       	ldd	r22, Y+1	; 0x01
    15dc:	7a 81       	ldd	r23, Y+2	; 0x02
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    15e6:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    15ea:	d3 01       	movw	r26, r6
    15ec:	6c 93       	st	X, r22
    15ee:	0a c0       	rjmp	.+20     	; 0x1604 <seqParticles+0x304>
			} else {
			leds[i].rgb.r = ((colors[color_id]>>0)&0xFF);
    15f0:	f2 01       	movw	r30, r4
    15f2:	20 81       	ld	r18, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	d4 01       	movw	r26, r8
    15fa:	2c 93       	st	X, r18
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
    15fc:	f1 01       	movw	r30, r2
    15fe:	90 83       	st	Z, r25
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
    1600:	d3 01       	movw	r26, r6
    1602:	8c 93       	st	X, r24
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    1604:	0f 5f       	subi	r16, 0xFF	; 255
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	b4 e0       	ldi	r27, 0x04	; 4
    160a:	8b 0e       	add	r8, r27
    160c:	91 1c       	adc	r9, r1
    160e:	e4 e0       	ldi	r30, 0x04	; 4
    1610:	6e 0e       	add	r6, r30
    1612:	71 1c       	adc	r7, r1
    1614:	f4 e0       	ldi	r31, 0x04	; 4
    1616:	2f 0e       	add	r2, r31
    1618:	31 1c       	adc	r3, r1
    161a:	0a 15       	cp	r16, r10
    161c:	1b 05       	cpc	r17, r11
    161e:	0c f4       	brge	.+2      	; 0x1622 <seqParticles+0x322>
    1620:	04 cf       	rjmp	.-504    	; 0x142a <seqParticles+0x12a>
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    1622:	29 a1       	ldd	r18, Y+33	; 0x21
    1624:	3a a1       	ldd	r19, Y+34	; 0x22
    1626:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1628:	58 a1       	ldd	r21, Y+32	; 0x20
    162a:	42 17       	cp	r20, r18
    162c:	53 07       	cpc	r21, r19
    162e:	94 f5       	brge	.+100    	; 0x1694 <seqParticles+0x394>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
    1630:	80 91 db 03 	lds	r24, 0x03DB
    1634:	90 91 dc 03 	lds	r25, 0x03DC
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	60 91 42 01 	lds	r22, 0x0142
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    1644:	fc 01       	movw	r30, r24
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	ee 5f       	subi	r30, 0xFE	; 254
    1650:	fe 4f       	sbci	r31, 0xFE	; 254
    1652:	40 81       	ld	r20, Z
    1654:	31 81       	ldd	r19, Z+1	; 0x01
    1656:	22 81       	ldd	r18, Z+2	; 0x02
    1658:	ef 8d       	ldd	r30, Y+31	; 0x1f
    165a:	f8 a1       	ldd	r31, Y+32	; 0x20
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	32 96       	adiw	r30, 0x02	; 2
    1666:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1668:	7e 8d       	ldd	r23, Y+30	; 0x1e
    166a:	e6 0f       	add	r30, r22
    166c:	f7 1f       	adc	r31, r23
    166e:	89 a1       	ldd	r24, Y+33	; 0x21
    1670:	9a a1       	ldd	r25, Y+34	; 0x22
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	02 96       	adiw	r24, 0x02	; 2
    167c:	86 0f       	add	r24, r22
    167e:	97 1f       	adc	r25, r23
    1680:	df 01       	movw	r26, r30
    1682:	11 97       	sbiw	r26, 0x01	; 1
    1684:	4c 93       	st	X, r20
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
    1686:	30 83       	st	Z, r19
    1688:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
    168a:	2c 93       	st	X, r18
    168c:	34 96       	adiw	r30, 0x04	; 4
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    168e:	e8 17       	cp	r30, r24
    1690:	f9 07       	cpc	r31, r25
    1692:	b1 f7       	brne	.-20     	; 0x1680 <seqParticles+0x380>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
	}
	
	pos += speed;
    1694:	20 91 d7 03 	lds	r18, 0x03D7
    1698:	30 91 d8 03 	lds	r19, 0x03D8
    169c:	40 91 d9 03 	lds	r20, 0x03D9
    16a0:	50 91 da 03 	lds	r21, 0x03DA
    16a4:	6b a1       	ldd	r22, Y+35	; 0x23
    16a6:	7c a1       	ldd	r23, Y+36	; 0x24
    16a8:	8d a1       	ldd	r24, Y+37	; 0x25
    16aa:	9e a1       	ldd	r25, Y+38	; 0x26
    16ac:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    16b0:	6b 01       	movw	r12, r22
    16b2:	7c 01       	movw	r14, r24
    16b4:	60 93 d7 03 	sts	0x03D7, r22
    16b8:	70 93 d8 03 	sts	0x03D8, r23
    16bc:	80 93 d9 03 	sts	0x03D9, r24
    16c0:	90 93 da 03 	sts	0x03DA, r25
	if(pos >= length) {
    16c4:	af 8d       	ldd	r26, Y+31	; 0x1f
    16c6:	b8 a1       	ldd	r27, Y+32	; 0x20
    16c8:	bd 01       	movw	r22, r26
    16ca:	bb 0f       	add	r27, r27
    16cc:	88 0b       	sbc	r24, r24
    16ce:	99 0b       	sbc	r25, r25
    16d0:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	c7 01       	movw	r24, r14
    16da:	b6 01       	movw	r22, r12
    16dc:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
    16e0:	88 23       	and	r24, r24
    16e2:	ac f1       	brlt	.+106    	; 0x174e <seqParticles+0x44e>
		if(!decremented) {
    16e4:	80 91 d6 03 	lds	r24, 0x03D6
    16e8:	81 11       	cpse	r24, r1
    16ea:	0a c0       	rjmp	.+20     	; 0x1700 <seqParticles+0x400>
			length--;
    16ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16ee:	98 a1       	ldd	r25, Y+32	; 0x20
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	90 93 de 03 	sts	0x03DE, r25
    16f6:	80 93 dd 03 	sts	0x03DD, r24
			decremented = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	80 93 d6 03 	sts	0x03D6, r24
		}
		if(pos >= length+size) {
    1700:	60 91 dd 03 	lds	r22, 0x03DD
    1704:	70 91 de 03 	lds	r23, 0x03DE
    1708:	07 2e       	mov	r0, r23
    170a:	00 0c       	add	r0, r0
    170c:	88 0b       	sbc	r24, r24
    170e:	99 0b       	sbc	r25, r25
    1710:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1714:	29 89       	ldd	r18, Y+17	; 0x11
    1716:	3a 89       	ldd	r19, Y+18	; 0x12
    1718:	4b 89       	ldd	r20, Y+19	; 0x13
    171a:	5c 89       	ldd	r21, Y+20	; 0x14
    171c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1720:	9b 01       	movw	r18, r22
    1722:	ac 01       	movw	r20, r24
    1724:	c7 01       	movw	r24, r14
    1726:	b6 01       	movw	r22, r12
    1728:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
    172c:	88 23       	and	r24, r24
    172e:	7c f0       	brlt	.+30     	; 0x174e <seqParticles+0x44e>
			pos = -size;
    1730:	89 89       	ldd	r24, Y+17	; 0x11
    1732:	9a 89       	ldd	r25, Y+18	; 0x12
    1734:	ab 89       	ldd	r26, Y+19	; 0x13
    1736:	bc 89       	ldd	r27, Y+20	; 0x14
    1738:	b0 58       	subi	r27, 0x80	; 128
    173a:	80 93 d7 03 	sts	0x03D7, r24
    173e:	90 93 d8 03 	sts	0x03D8, r25
    1742:	a0 93 d9 03 	sts	0x03D9, r26
    1746:	b0 93 da 03 	sts	0x03DA, r27
			decremented = 0;
    174a:	10 92 d6 03 	sts	0x03D6, r1
		}
	}
}
    174e:	a6 96       	adiw	r28, 0x26	; 38
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	8f 90       	pop	r8
    1772:	7f 90       	pop	r7
    1774:	6f 90       	pop	r6
    1776:	5f 90       	pop	r5
    1778:	4f 90       	pop	r4
    177a:	3f 90       	pop	r3
    177c:	2f 90       	pop	r2
    177e:	08 95       	ret

00001780 <seqParticlesDark>:

static void seqParticlesDark(color_t *leds, int num_leds)
{
    1780:	2f 92       	push	r2
    1782:	3f 92       	push	r3
    1784:	4f 92       	push	r4
    1786:	5f 92       	push	r5
    1788:	6f 92       	push	r6
    178a:	7f 92       	push	r7
    178c:	8f 92       	push	r8
    178e:	9f 92       	push	r9
    1790:	af 92       	push	r10
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	66 97       	sbiw	r28, 0x16	; 22
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	9e 87       	std	Y+14, r25	; 0x0e
    17b6:	8d 87       	std	Y+13, r24	; 0x0d
    17b8:	78 8b       	std	Y+16, r23	; 0x10
    17ba:	6f 87       	std	Y+15, r22	; 0x0f
	static float pos = 0;
	static int length = 0;
	static int color_id = 0;
	static uint8_t decremented = 0;
	
	float speed = seqSpeed / 50.0f;
    17bc:	60 91 45 01 	lds	r22, 0x0145
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	48 e4       	ldi	r20, 0x48	; 72
    17d0:	52 e4       	ldi	r21, 0x42	; 66
    17d2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    17d6:	69 8b       	std	Y+17, r22	; 0x11
    17d8:	7a 8b       	std	Y+18, r23	; 0x12
    17da:	8b 8b       	std	Y+19, r24	; 0x13
    17dc:	9c 8b       	std	Y+20, r25	; 0x14
	float size = seqSize;
    17de:	60 91 43 01 	lds	r22, 0x0143
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    17ec:	69 83       	std	Y+1, r22	; 0x01
    17ee:	7a 83       	std	Y+2, r23	; 0x02
    17f0:	8b 83       	std	Y+3, r24	; 0x03
    17f2:	9c 83       	std	Y+4, r25	; 0x04
	
	if(length <= 0) {
    17f4:	80 91 e6 03 	lds	r24, 0x03E6
    17f8:	90 91 e7 03 	lds	r25, 0x03E7
    17fc:	18 16       	cp	r1, r24
    17fe:	19 06       	cpc	r1, r25
    1800:	cc f0       	brlt	.+50     	; 0x1834 <seqParticlesDark+0xb4>
		length = num_leds;
    1802:	2f 85       	ldd	r18, Y+15	; 0x0f
    1804:	38 89       	ldd	r19, Y+16	; 0x10
    1806:	30 93 e7 03 	sts	0x03E7, r19
    180a:	20 93 e6 03 	sts	0x03E6, r18
		color_id = (color_id+1) % numColors;
    180e:	80 91 e4 03 	lds	r24, 0x03E4
    1812:	90 91 e5 03 	lds	r25, 0x03E5
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	60 91 42 01 	lds	r22, 0x0142
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    1822:	90 93 e5 03 	sts	0x03E5, r25
    1826:	80 93 e4 03 	sts	0x03E4, r24
	}
	
	for(int i = 0; i < length; i++) {
    182a:	39 01       	movw	r6, r18
    182c:	12 16       	cp	r1, r18
    182e:	13 06       	cpc	r1, r19
    1830:	0c f0       	brlt	.+2      	; 0x1834 <seqParticlesDark+0xb4>
    1832:	c3 c0       	rjmp	.+390    	; 0x19ba <seqParticlesDark+0x23a>
		float dist = pos-i;
    1834:	60 91 e0 03 	lds	r22, 0x03E0
    1838:	70 91 e1 03 	lds	r23, 0x03E1
    183c:	80 91 e2 03 	lds	r24, 0x03E2
    1840:	90 91 e3 03 	lds	r25, 0x03E3
    1844:	6d 83       	std	Y+5, r22	; 0x05
    1846:	7e 83       	std	Y+6, r23	; 0x06
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	98 87       	std	Y+8, r25	; 0x08
		dist = dist < 0 ? -dist : dist;
		if(dist < size) {
			float k = dist / size;
			leds[i].rgb.r = (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    184c:	80 91 e4 03 	lds	r24, 0x03E4
    1850:	90 91 e5 03 	lds	r25, 0x03E5
    1854:	dc 01       	movw	r26, r24
    1856:	11 96       	adiw	r26, 0x01	; 1
    1858:	ba 87       	std	Y+10, r27	; 0x0a
    185a:	a9 87       	std	Y+9, r26	; 0x09
    185c:	80 91 42 01 	lds	r24, 0x0142
    1860:	e8 2f       	mov	r30, r24
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	fc 87       	std	Y+12, r31	; 0x0c
    1866:	eb 87       	std	Y+11, r30	; 0x0b
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    1868:	60 90 e6 03 	lds	r6, 0x03E6
    186c:	70 90 e7 03 	lds	r7, 0x03E7
    1870:	0d 85       	ldd	r16, Y+13	; 0x0d
    1872:	1e 85       	ldd	r17, Y+14	; 0x0e
    1874:	0f 5f       	subi	r16, 0xFF	; 255
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	4d 84       	ldd	r4, Y+13	; 0x0d
    187a:	5e 84       	ldd	r5, Y+14	; 0x0e
    187c:	12 01       	movw	r2, r4
    187e:	f2 e0       	ldi	r31, 0x02	; 2
    1880:	2f 0e       	add	r2, r31
    1882:	31 1c       	adc	r3, r1
    1884:	e1 2c       	mov	r14, r1
    1886:	f1 2c       	mov	r15, r1
    1888:	fe 8a       	std	Y+22, r15	; 0x16
    188a:	ed 8a       	std	Y+21, r14	; 0x15
		float dist = pos-i;
    188c:	2d 89       	ldd	r18, Y+21	; 0x15
    188e:	3e 89       	ldd	r19, Y+22	; 0x16
    1890:	b9 01       	movw	r22, r18
    1892:	33 0f       	add	r19, r19
    1894:	88 0b       	sbc	r24, r24
    1896:	99 0b       	sbc	r25, r25
    1898:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	6d 81       	ldd	r22, Y+5	; 0x05
    18a2:	7e 81       	ldd	r23, Y+6	; 0x06
    18a4:	8f 81       	ldd	r24, Y+7	; 0x07
    18a6:	98 85       	ldd	r25, Y+8	; 0x08
    18a8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
    18ac:	6b 01       	movw	r12, r22
    18ae:	7c 01       	movw	r14, r24
		dist = dist < 0 ? -dist : dist;
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
    18ba:	88 23       	and	r24, r24
    18bc:	24 f4       	brge	.+8      	; 0x18c6 <seqParticlesDark+0x146>
    18be:	f7 fa       	bst	r15, 7
    18c0:	f0 94       	com	r15
    18c2:	f7 f8       	bld	r15, 7
    18c4:	f0 94       	com	r15
		if(dist < size) {
    18c6:	29 81       	ldd	r18, Y+1	; 0x01
    18c8:	3a 81       	ldd	r19, Y+2	; 0x02
    18ca:	4b 81       	ldd	r20, Y+3	; 0x03
    18cc:	5c 81       	ldd	r21, Y+4	; 0x04
    18ce:	c7 01       	movw	r24, r14
    18d0:	b6 01       	movw	r22, r12
    18d2:	0e 94 be 10 	call	0x217c	; 0x217c <__cmpsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	0c f0       	brlt	.+2      	; 0x18dc <seqParticlesDark+0x15c>
    18da:	55 c0       	rjmp	.+170    	; 0x1986 <seqParticlesDark+0x206>
			float k = dist / size;
    18dc:	29 81       	ldd	r18, Y+1	; 0x01
    18de:	3a 81       	ldd	r19, Y+2	; 0x02
    18e0:	4b 81       	ldd	r20, Y+3	; 0x03
    18e2:	5c 81       	ldd	r21, Y+4	; 0x04
    18e4:	c7 01       	movw	r24, r14
    18e6:	b6 01       	movw	r22, r12
    18e8:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    18ec:	9b 01       	movw	r18, r22
    18ee:	ac 01       	movw	r20, r24
			leds[i].rgb.r = (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	80 e8       	ldi	r24, 0x80	; 128
    18f6:	9f e3       	ldi	r25, 0x3F	; 63
    18f8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
    18fc:	6b 01       	movw	r12, r22
    18fe:	7c 01       	movw	r14, r24
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    190c:	fc 01       	movw	r30, r24
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	ee 0f       	add	r30, r30
    1914:	ff 1f       	adc	r31, r31
    1916:	ee 5f       	subi	r30, 0xFE	; 254
    1918:	fe 4f       	sbci	r31, 0xFE	; 254
    191a:	80 80       	ld	r8, Z
    191c:	91 80       	ldd	r9, Z+1	; 0x01
    191e:	a2 80       	ldd	r10, Z+2	; 0x02
    1920:	b3 80       	ldd	r11, Z+3	; 0x03
    1922:	c5 01       	movw	r24, r10
    1924:	b4 01       	movw	r22, r8
    1926:	77 27       	eor	r23, r23
    1928:	88 27       	eor	r24, r24
    192a:	99 27       	eor	r25, r25
    192c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	c7 01       	movw	r24, r14
    1936:	b6 01       	movw	r22, r12
    1938:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    193c:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1940:	d8 01       	movw	r26, r16
    1942:	6c 93       	st	X, r22
			leds[i].rgb.g = (1.0f-k)*((colors[(color_id+1)%numColors]>>8)&0xFF);
    1944:	69 2d       	mov	r22, r9
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1950:	9b 01       	movw	r18, r22
    1952:	ac 01       	movw	r20, r24
    1954:	c7 01       	movw	r24, r14
    1956:	b6 01       	movw	r22, r12
    1958:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    195c:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1960:	f1 01       	movw	r30, r2
    1962:	60 83       	st	Z, r22
			leds[i].rgb.b = (1.0f-k)*((colors[(color_id+1)%numColors]>>16)&0xFF);
    1964:	6a 2d       	mov	r22, r10
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1970:	9b 01       	movw	r18, r22
    1972:	ac 01       	movw	r20, r24
    1974:	c7 01       	movw	r24, r14
    1976:	b6 01       	movw	r22, r12
    1978:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    197c:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1980:	d2 01       	movw	r26, r4
    1982:	6c 93       	st	X, r22
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <seqParticlesDark+0x212>
		}
		else {
			leds[i].rgb.r = 0;
    1986:	f8 01       	movw	r30, r16
    1988:	10 82       	st	Z, r1
			leds[i].rgb.g = 0;
    198a:	d1 01       	movw	r26, r2
    198c:	1c 92       	st	X, r1
			leds[i].rgb.b = 0;
    198e:	f2 01       	movw	r30, r4
    1990:	10 82       	st	Z, r1
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    1992:	2d 89       	ldd	r18, Y+21	; 0x15
    1994:	3e 89       	ldd	r19, Y+22	; 0x16
    1996:	2f 5f       	subi	r18, 0xFF	; 255
    1998:	3f 4f       	sbci	r19, 0xFF	; 255
    199a:	3e 8b       	std	Y+22, r19	; 0x16
    199c:	2d 8b       	std	Y+21, r18	; 0x15
    199e:	0c 5f       	subi	r16, 0xFC	; 252
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	34 e0       	ldi	r19, 0x04	; 4
    19a4:	43 0e       	add	r4, r19
    19a6:	51 1c       	adc	r5, r1
    19a8:	64 e0       	ldi	r22, 0x04	; 4
    19aa:	26 0e       	add	r2, r22
    19ac:	31 1c       	adc	r3, r1
    19ae:	8d 89       	ldd	r24, Y+21	; 0x15
    19b0:	9e 89       	ldd	r25, Y+22	; 0x16
    19b2:	86 15       	cp	r24, r6
    19b4:	97 05       	cpc	r25, r7
    19b6:	0c f4       	brge	.+2      	; 0x19ba <seqParticlesDark+0x23a>
    19b8:	69 cf       	rjmp	.-302    	; 0x188c <seqParticlesDark+0x10c>
			leds[i].rgb.g = 0;
			leds[i].rgb.b = 0;
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    19ba:	af 85       	ldd	r26, Y+15	; 0x0f
    19bc:	b8 89       	ldd	r27, Y+16	; 0x10
    19be:	6a 16       	cp	r6, r26
    19c0:	7b 06       	cpc	r7, r27
    19c2:	8c f5       	brge	.+98     	; 0x1a26 <seqParticlesDark+0x2a6>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
    19c4:	80 91 e4 03 	lds	r24, 0x03E4
    19c8:	90 91 e5 03 	lds	r25, 0x03E5
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	60 91 42 01 	lds	r22, 0x0142
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
    19d8:	fc 01       	movw	r30, r24
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	ee 5f       	subi	r30, 0xFE	; 254
    19e4:	fe 4f       	sbci	r31, 0xFE	; 254
    19e6:	40 81       	ld	r20, Z
    19e8:	31 81       	ldd	r19, Z+1	; 0x01
    19ea:	22 81       	ldd	r18, Z+2	; 0x02
    19ec:	f3 01       	movw	r30, r6
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	32 96       	adiw	r30, 0x02	; 2
    19f8:	6d 85       	ldd	r22, Y+13	; 0x0d
    19fa:	7e 85       	ldd	r23, Y+14	; 0x0e
    19fc:	e6 0f       	add	r30, r22
    19fe:	f7 1f       	adc	r31, r23
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	98 89       	ldd	r25, Y+16	; 0x10
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	02 96       	adiw	r24, 0x02	; 2
    1a0e:	86 0f       	add	r24, r22
    1a10:	97 1f       	adc	r25, r23
    1a12:	df 01       	movw	r26, r30
    1a14:	11 97       	sbiw	r26, 0x01	; 1
    1a16:	4c 93       	st	X, r20
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
    1a18:	30 83       	st	Z, r19
    1a1a:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
    1a1c:	2c 93       	st	X, r18
    1a1e:	34 96       	adiw	r30, 0x04	; 4
			leds[i].rgb.g = 0;
			leds[i].rgb.b = 0;
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    1a20:	e8 17       	cp	r30, r24
    1a22:	f9 07       	cpc	r31, r25
    1a24:	b1 f7       	brne	.-20     	; 0x1a12 <seqParticlesDark+0x292>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
	}
	
	pos += speed;
    1a26:	20 91 e0 03 	lds	r18, 0x03E0
    1a2a:	30 91 e1 03 	lds	r19, 0x03E1
    1a2e:	40 91 e2 03 	lds	r20, 0x03E2
    1a32:	50 91 e3 03 	lds	r21, 0x03E3
    1a36:	69 89       	ldd	r22, Y+17	; 0x11
    1a38:	7a 89       	ldd	r23, Y+18	; 0x12
    1a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1a42:	6b 01       	movw	r12, r22
    1a44:	7c 01       	movw	r14, r24
    1a46:	60 93 e0 03 	sts	0x03E0, r22
    1a4a:	70 93 e1 03 	sts	0x03E1, r23
    1a4e:	80 93 e2 03 	sts	0x03E2, r24
    1a52:	90 93 e3 03 	sts	0x03E3, r25
	if(pos >= length) {
    1a56:	b3 01       	movw	r22, r6
    1a58:	07 2c       	mov	r0, r7
    1a5a:	00 0c       	add	r0, r0
    1a5c:	88 0b       	sbc	r24, r24
    1a5e:	99 0b       	sbc	r25, r25
    1a60:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1a64:	9b 01       	movw	r18, r22
    1a66:	ac 01       	movw	r20, r24
    1a68:	c7 01       	movw	r24, r14
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
    1a70:	88 23       	and	r24, r24
    1a72:	a4 f1       	brlt	.+104    	; 0x1adc <seqParticlesDark+0x35c>
		if(!decremented) {
    1a74:	80 91 df 03 	lds	r24, 0x03DF
    1a78:	81 11       	cpse	r24, r1
    1a7a:	09 c0       	rjmp	.+18     	; 0x1a8e <seqParticlesDark+0x30e>
			length--;
    1a7c:	c3 01       	movw	r24, r6
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	90 93 e7 03 	sts	0x03E7, r25
    1a84:	80 93 e6 03 	sts	0x03E6, r24
			decremented = 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 93 df 03 	sts	0x03DF, r24
		}
		if(pos >= length+size) {
    1a8e:	60 91 e6 03 	lds	r22, 0x03E6
    1a92:	70 91 e7 03 	lds	r23, 0x03E7
    1a96:	07 2e       	mov	r0, r23
    1a98:	00 0c       	add	r0, r0
    1a9a:	88 0b       	sbc	r24, r24
    1a9c:	99 0b       	sbc	r25, r25
    1a9e:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1aa2:	29 81       	ldd	r18, Y+1	; 0x01
    1aa4:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa6:	4b 81       	ldd	r20, Y+3	; 0x03
    1aa8:	5c 81       	ldd	r21, Y+4	; 0x04
    1aaa:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1aae:	9b 01       	movw	r18, r22
    1ab0:	ac 01       	movw	r20, r24
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	b6 01       	movw	r22, r12
    1ab6:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
    1aba:	88 23       	and	r24, r24
    1abc:	7c f0       	brlt	.+30     	; 0x1adc <seqParticlesDark+0x35c>
			pos = -size;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac6:	b0 58       	subi	r27, 0x80	; 128
    1ac8:	80 93 e0 03 	sts	0x03E0, r24
    1acc:	90 93 e1 03 	sts	0x03E1, r25
    1ad0:	a0 93 e2 03 	sts	0x03E2, r26
    1ad4:	b0 93 e3 03 	sts	0x03E3, r27
			decremented = 0;
    1ad8:	10 92 df 03 	sts	0x03DF, r1
		}
	}
}
    1adc:	66 96       	adiw	r28, 0x16	; 22
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	df 90       	pop	r13
    1af6:	cf 90       	pop	r12
    1af8:	bf 90       	pop	r11
    1afa:	af 90       	pop	r10
    1afc:	9f 90       	pop	r9
    1afe:	8f 90       	pop	r8
    1b00:	7f 90       	pop	r7
    1b02:	6f 90       	pop	r6
    1b04:	5f 90       	pop	r5
    1b06:	4f 90       	pop	r4
    1b08:	3f 90       	pop	r3
    1b0a:	2f 90       	pop	r2
    1b0c:	08 95       	ret

00001b0e <seqRunningParticle>:

static void seqRunningParticle(color_t *leds, int num_leds)
{
    1b0e:	2f 92       	push	r2
    1b10:	3f 92       	push	r3
    1b12:	4f 92       	push	r4
    1b14:	5f 92       	push	r5
    1b16:	6f 92       	push	r6
    1b18:	7f 92       	push	r7
    1b1a:	8f 92       	push	r8
    1b1c:	9f 92       	push	r9
    1b1e:	af 92       	push	r10
    1b20:	bf 92       	push	r11
    1b22:	cf 92       	push	r12
    1b24:	df 92       	push	r13
    1b26:	ef 92       	push	r14
    1b28:	ff 92       	push	r15
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <seqRunningParticle+0x26>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <seqRunningParticle+0x28>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	2c 01       	movw	r4, r24
    1b3c:	7b 01       	movw	r14, r22
	static float pos = 0;
	static uint8_t color_id = 0;
	
	float speed = seqSpeed / 1000.0f;
    1b3e:	60 91 45 01 	lds	r22, 0x0145
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a e7       	ldi	r20, 0x7A	; 122
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    1b58:	69 83       	std	Y+1, r22	; 0x01
    1b5a:	7a 83       	std	Y+2, r23	; 0x02
    1b5c:	8b 83       	std	Y+3, r24	; 0x03
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t size = seqSize;
    1b60:	60 91 43 01 	lds	r22, 0x0143
	uint8_t softness = seqSoftness;
	
	for(int i = 0; i < num_leds; i++)
    1b64:	1e 14       	cp	r1, r14
    1b66:	1f 04       	cpc	r1, r15
    1b68:	0c f0       	brlt	.+2      	; 0x1b6c <seqRunningParticle+0x5e>
    1b6a:	4d c0       	rjmp	.+154    	; 0x1c06 <seqRunningParticle+0xf8>
	{
		int p = (int)(pos+size) % num_leds;
    1b6c:	80 90 e8 03 	lds	r8, 0x03E8
    1b70:	90 90 e9 03 	lds	r9, 0x03E9
    1b74:	a0 90 ea 03 	lds	r10, 0x03EA
    1b78:	b0 90 eb 03 	lds	r11, 0x03EB
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1b86:	a5 01       	movw	r20, r10
    1b88:	94 01       	movw	r18, r8
    1b8a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1b8e:	0e 94 35 11 	call	0x226a	; 0x226a <__fixsfsi>
    1b92:	6b 01       	movw	r12, r22
		if((i >= (int)pos && i < (int)(pos+size)) ||
    1b94:	c5 01       	movw	r24, r10
    1b96:	b4 01       	movw	r22, r8
    1b98:	0e 94 35 11 	call	0x226a	; 0x226a <__fixsfsi>
    1b9c:	3b 01       	movw	r6, r22
			((int)(pos+size) > num_leds && i < p))
		{
			leds[i].rgb.r = ((colors[color_id]>>0)&0xFF);
    1b9e:	20 90 02 01 	lds	r2, 0x0102
    1ba2:	30 90 03 01 	lds	r3, 0x0103
    1ba6:	40 91 04 01 	lds	r20, 0x0104
    1baa:	82 01       	movw	r16, r4
    1bac:	0f 5f       	subi	r16, 0xFF	; 255
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	52 01       	movw	r10, r4
    1bb2:	f2 01       	movw	r30, r4
    1bb4:	32 96       	adiw	r30, 0x02	; 2
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t softness = seqSoftness;
	
	for(int i = 0; i < num_leds; i++)
	{
		int p = (int)(pos+size) % num_leds;
		if((i >= (int)pos && i < (int)(pos+size)) ||
    1bba:	26 15       	cp	r18, r6
    1bbc:	37 05       	cpc	r19, r7
    1bbe:	1c f0       	brlt	.+6      	; 0x1bc6 <seqRunningParticle+0xb8>
    1bc0:	2c 15       	cp	r18, r12
    1bc2:	3d 05       	cpc	r19, r13
    1bc4:	54 f0       	brlt	.+20     	; 0x1bda <seqRunningParticle+0xcc>
    1bc6:	ec 14       	cp	r14, r12
    1bc8:	fd 04       	cpc	r15, r13
    1bca:	6c f4       	brge	.+26     	; 0x1be6 <seqRunningParticle+0xd8>
	uint8_t size = seqSize;
	uint8_t softness = seqSoftness;
	
	for(int i = 0; i < num_leds; i++)
	{
		int p = (int)(pos+size) % num_leds;
    1bcc:	c6 01       	movw	r24, r12
    1bce:	b7 01       	movw	r22, r14
    1bd0:	0e 94 1f 13 	call	0x263e	; 0x263e <__divmodhi4>
		if((i >= (int)pos && i < (int)(pos+size)) ||
			((int)(pos+size) > num_leds && i < p))
    1bd4:	28 17       	cp	r18, r24
    1bd6:	39 07       	cpc	r19, r25
    1bd8:	34 f4       	brge	.+12     	; 0x1be6 <seqRunningParticle+0xd8>
		{
			leds[i].rgb.r = ((colors[color_id]>>0)&0xFF);
    1bda:	d8 01       	movw	r26, r16
    1bdc:	2c 92       	st	X, r2
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
    1bde:	30 82       	st	Z, r3
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
    1be0:	d5 01       	movw	r26, r10
    1be2:	4c 93       	st	X, r20
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <seqRunningParticle+0xe2>
		}
		else
		{
			leds[i].rgb.r = 0;
    1be6:	d8 01       	movw	r26, r16
    1be8:	1c 92       	st	X, r1
			leds[i].rgb.g = 0;
    1bea:	10 82       	st	Z, r1
			leds[i].rgb.b = 0;
    1bec:	d5 01       	movw	r26, r10
    1bee:	1c 92       	st	X, r1
	
	float speed = seqSpeed / 1000.0f;
	uint8_t size = seqSize;
	uint8_t softness = seqSoftness;
	
	for(int i = 0; i < num_leds; i++)
    1bf0:	2f 5f       	subi	r18, 0xFF	; 255
    1bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf4:	0c 5f       	subi	r16, 0xFC	; 252
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	b4 e0       	ldi	r27, 0x04	; 4
    1bfa:	ab 0e       	add	r10, r27
    1bfc:	b1 1c       	adc	r11, r1
    1bfe:	34 96       	adiw	r30, 0x04	; 4
    1c00:	2e 15       	cp	r18, r14
    1c02:	3f 05       	cpc	r19, r15
    1c04:	d1 f6       	brne	.-76     	; 0x1bba <seqRunningParticle+0xac>
			leds[i].rgb.g = 0;
			leds[i].rgb.b = 0;
		}
	}
	
	pos += speed;
    1c06:	20 91 e8 03 	lds	r18, 0x03E8
    1c0a:	30 91 e9 03 	lds	r19, 0x03E9
    1c0e:	40 91 ea 03 	lds	r20, 0x03EA
    1c12:	50 91 eb 03 	lds	r21, 0x03EB
    1c16:	69 81       	ldd	r22, Y+1	; 0x01
    1c18:	7a 81       	ldd	r23, Y+2	; 0x02
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1c22:	4b 01       	movw	r8, r22
    1c24:	5c 01       	movw	r10, r24
	if(pos >= num_leds)
    1c26:	b7 01       	movw	r22, r14
    1c28:	ff 0c       	add	r15, r15
    1c2a:	88 0b       	sbc	r24, r24
    1c2c:	99 0b       	sbc	r25, r25
    1c2e:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1c32:	9b 01       	movw	r18, r22
    1c34:	ac 01       	movw	r20, r24
    1c36:	c5 01       	movw	r24, r10
    1c38:	b4 01       	movw	r22, r8
    1c3a:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
    1c3e:	88 23       	and	r24, r24
    1c40:	4c f4       	brge	.+18     	; 0x1c54 <seqRunningParticle+0x146>
			leds[i].rgb.g = 0;
			leds[i].rgb.b = 0;
		}
	}
	
	pos += speed;
    1c42:	80 92 e8 03 	sts	0x03E8, r8
    1c46:	90 92 e9 03 	sts	0x03E9, r9
    1c4a:	a0 92 ea 03 	sts	0x03EA, r10
    1c4e:	b0 92 eb 03 	sts	0x03EB, r11
    1c52:	08 c0       	rjmp	.+16     	; 0x1c64 <seqRunningParticle+0x156>
	if(pos >= num_leds)
		pos = 0;
    1c54:	10 92 e8 03 	sts	0x03E8, r1
    1c58:	10 92 e9 03 	sts	0x03E9, r1
    1c5c:	10 92 ea 03 	sts	0x03EA, r1
    1c60:	10 92 eb 03 	sts	0x03EB, r1
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	9f 90       	pop	r9
    1c82:	8f 90       	pop	r8
    1c84:	7f 90       	pop	r7
    1c86:	6f 90       	pop	r6
    1c88:	5f 90       	pop	r5
    1c8a:	4f 90       	pop	r4
    1c8c:	3f 90       	pop	r3
    1c8e:	2f 90       	pop	r2
    1c90:	08 95       	ret

00001c92 <seqRunning2>:
	for(int i = 0; i < num_leds; i++)
	leds[i].val = colors[0];
}

static void seqRunning2(color_t *leds, int num_leds)
{
    1c92:	2f 92       	push	r2
    1c94:	3f 92       	push	r3
    1c96:	4f 92       	push	r4
    1c98:	5f 92       	push	r5
    1c9a:	6f 92       	push	r6
    1c9c:	7f 92       	push	r7
    1c9e:	8f 92       	push	r8
    1ca0:	9f 92       	push	r9
    1ca2:	af 92       	push	r10
    1ca4:	bf 92       	push	r11
    1ca6:	cf 92       	push	r12
    1ca8:	df 92       	push	r13
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	a8 97       	sbiw	r28, 0x28	; 40
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	8c 01       	movw	r16, r24
    1cc8:	3b 01       	movw	r6, r22
	static float pos = 0;
	
	float speed = seqSpeed / 500.0f;
    1cca:	60 91 45 01 	lds	r22, 0x0145
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a ef       	ldi	r20, 0xFA	; 250
    1cde:	53 e4       	ldi	r21, 0x43	; 67
    1ce0:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    1ce4:	6d a3       	std	Y+37, r22	; 0x25
    1ce6:	7e a3       	std	Y+38, r23	; 0x26
    1ce8:	8f a3       	std	Y+39, r24	; 0x27
    1cea:	98 a7       	std	Y+40, r25	; 0x28
	float size = seqSize;
    1cec:	60 91 43 01 	lds	r22, 0x0143
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
	
	for(int i = 0; i < num_leds; i++)
    1cfa:	16 14       	cp	r1, r6
    1cfc:	17 04       	cpc	r1, r7
    1cfe:	0c f0       	brlt	.+2      	; 0x1d02 <seqRunning2+0x70>
    1d00:	05 c1       	rjmp	.+522    	; 0x1f0c <seqRunning2+0x27a>
	{
		float a = i*(1.0f/size)+pos;
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	80 e8       	ldi	r24, 0x80	; 128
    1d0c:	9f e3       	ldi	r25, 0x3F	; 63
    1d0e:	0e 94 c3 10 	call	0x2186	; 0x2186 <__divsf3>
    1d12:	6d 83       	std	Y+5, r22	; 0x05
    1d14:	7e 83       	std	Y+6, r23	; 0x06
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	98 87       	std	Y+8, r25	; 0x08
    1d1a:	80 91 d2 03 	lds	r24, 0x03D2
    1d1e:	90 91 d3 03 	lds	r25, 0x03D3
    1d22:	a0 91 d4 03 	lds	r26, 0x03D4
    1d26:	b0 91 d5 03 	lds	r27, 0x03D5
    1d2a:	89 87       	std	Y+9, r24	; 0x09
    1d2c:	9a 87       	std	Y+10, r25	; 0x0a
    1d2e:	ab 87       	std	Y+11, r26	; 0x0b
    1d30:	bc 87       	std	Y+12, r27	; 0x0c
		float k = (sin(a)+1.0f) * 0.5f;
		
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
    1d32:	0f 2e       	mov	r0, r31
    1d34:	f2 e0       	ldi	r31, 0x02	; 2
    1d36:	af 2e       	mov	r10, r31
    1d38:	f1 e0       	ldi	r31, 0x01	; 1
    1d3a:	bf 2e       	mov	r11, r31
    1d3c:	f0 2d       	mov	r31, r0
    1d3e:	d5 01       	movw	r26, r10
    1d40:	cd 90       	ld	r12, X+
    1d42:	dd 90       	ld	r13, X+
    1d44:	ed 90       	ld	r14, X+
    1d46:	fc 90       	ld	r15, X
    1d48:	c7 01       	movw	r24, r14
    1d4a:	b6 01       	movw	r22, r12
    1d4c:	77 27       	eor	r23, r23
    1d4e:	88 27       	eor	r24, r24
    1d50:	99 27       	eor	r25, r25
    1d52:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1d56:	6d 87       	std	Y+13, r22	; 0x0d
    1d58:	7e 87       	std	Y+14, r23	; 0x0e
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f
    1d5c:	98 8b       	std	Y+16, r25	; 0x10
    1d5e:	f5 01       	movw	r30, r10
    1d60:	84 80       	ldd	r8, Z+4	; 0x04
    1d62:	95 80       	ldd	r9, Z+5	; 0x05
    1d64:	a6 80       	ldd	r10, Z+6	; 0x06
    1d66:	b7 80       	ldd	r11, Z+7	; 0x07
    1d68:	c5 01       	movw	r24, r10
    1d6a:	b4 01       	movw	r22, r8
    1d6c:	77 27       	eor	r23, r23
    1d6e:	88 27       	eor	r24, r24
    1d70:	99 27       	eor	r25, r25
    1d72:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1d76:	69 8b       	std	Y+17, r22	; 0x11
    1d78:	7a 8b       	std	Y+18, r23	; 0x12
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
    1d7c:	9c 8b       	std	Y+20, r25	; 0x14
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
    1d7e:	6d 2d       	mov	r22, r13
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1d8a:	6d 8b       	std	Y+21, r22	; 0x15
    1d8c:	7e 8b       	std	Y+22, r23	; 0x16
    1d8e:	8f 8b       	std	Y+23, r24	; 0x17
    1d90:	98 8f       	std	Y+24, r25	; 0x18
    1d92:	69 2d       	mov	r22, r9
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1d9e:	69 8f       	std	Y+25, r22	; 0x19
    1da0:	7a 8f       	std	Y+26, r23	; 0x1a
    1da2:	8b 8f       	std	Y+27, r24	; 0x1b
    1da4:	9c 8f       	std	Y+28, r25	; 0x1c
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
    1da6:	6e 2d       	mov	r22, r14
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1db2:	6d 8f       	std	Y+29, r22	; 0x1d
    1db4:	7e 8f       	std	Y+30, r23	; 0x1e
    1db6:	8f 8f       	std	Y+31, r24	; 0x1f
    1db8:	98 a3       	std	Y+32, r25	; 0x20
    1dba:	6a 2d       	mov	r22, r10
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatunsisf>
    1dc6:	69 a3       	std	Y+33, r22	; 0x21
    1dc8:	7a a3       	std	Y+34, r23	; 0x22
    1dca:	8b a3       	std	Y+35, r24	; 0x23
    1dcc:	9c a3       	std	Y+36, r25	; 0x24
    1dce:	0e 5f       	subi	r16, 0xFE	; 254
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	21 2c       	mov	r2, r1
    1dd4:	31 2c       	mov	r3, r1
    1dd6:	53 01       	movw	r10, r6
	float speed = seqSpeed / 500.0f;
	float size = seqSize;
	
	for(int i = 0; i < num_leds; i++)
	{
		float a = i*(1.0f/size)+pos;
    1dd8:	b1 01       	movw	r22, r2
    1dda:	03 2c       	mov	r0, r3
    1ddc:	00 0c       	add	r0, r0
    1dde:	88 0b       	sbc	r24, r24
    1de0:	99 0b       	sbc	r25, r25
    1de2:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatsisf>
    1de6:	2d 81       	ldd	r18, Y+5	; 0x05
    1de8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dea:	4f 81       	ldd	r20, Y+7	; 0x07
    1dec:	58 85       	ldd	r21, Y+8	; 0x08
    1dee:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1df2:	29 85       	ldd	r18, Y+9	; 0x09
    1df4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1df6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1df8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1dfa:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
		float k = (sin(a)+1.0f) * 0.5f;
    1dfe:	0e 94 8f 12 	call	0x251e	; 0x251e <sin>
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e8       	ldi	r20, 0x80	; 128
    1e08:	5f e3       	ldi	r21, 0x3F	; 63
    1e0a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1e1a:	6b 01       	movw	r12, r22
    1e1c:	7c 01       	movw	r14, r24
		
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
    1e1e:	9b 01       	movw	r18, r22
    1e20:	ac 01       	movw	r20, r24
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	80 e8       	ldi	r24, 0x80	; 128
    1e28:	9f e3       	ldi	r25, 0x3F	; 63
    1e2a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
    1e2e:	69 83       	std	Y+1, r22	; 0x01
    1e30:	7a 83       	std	Y+2, r23	; 0x02
    1e32:	8b 83       	std	Y+3, r24	; 0x03
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	48 01       	movw	r8, r16
    1e38:	f1 e0       	ldi	r31, 0x01	; 1
    1e3a:	8f 1a       	sub	r8, r31
    1e3c:	91 08       	sbc	r9, r1
    1e3e:	a7 01       	movw	r20, r14
    1e40:	96 01       	movw	r18, r12
    1e42:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e44:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e48:	98 89       	ldd	r25, Y+16	; 0x10
    1e4a:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1e4e:	2b 01       	movw	r4, r22
    1e50:	3c 01       	movw	r6, r24
    1e52:	29 89       	ldd	r18, Y+17	; 0x11
    1e54:	3a 89       	ldd	r19, Y+18	; 0x12
    1e56:	4b 89       	ldd	r20, Y+19	; 0x13
    1e58:	5c 89       	ldd	r21, Y+20	; 0x14
    1e5a:	69 81       	ldd	r22, Y+1	; 0x01
    1e5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1e66:	9b 01       	movw	r18, r22
    1e68:	ac 01       	movw	r20, r24
    1e6a:	c3 01       	movw	r24, r6
    1e6c:	b2 01       	movw	r22, r4
    1e6e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1e72:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1e76:	d4 01       	movw	r26, r8
    1e78:	6c 93       	st	X, r22
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
    1e7a:	a7 01       	movw	r20, r14
    1e7c:	96 01       	movw	r18, r12
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1e8a:	2b 01       	movw	r4, r22
    1e8c:	3c 01       	movw	r6, r24
    1e8e:	29 8d       	ldd	r18, Y+25	; 0x19
    1e90:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1e92:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1e94:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1e96:	69 81       	ldd	r22, Y+1	; 0x01
    1e98:	7a 81       	ldd	r23, Y+2	; 0x02
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1ea2:	9b 01       	movw	r18, r22
    1ea4:	ac 01       	movw	r20, r24
    1ea6:	c3 01       	movw	r24, r6
    1ea8:	b2 01       	movw	r22, r4
    1eaa:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1eae:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	60 83       	st	Z, r22
    1eb6:	48 01       	movw	r8, r16
    1eb8:	f2 e0       	ldi	r31, 0x02	; 2
    1eba:	8f 1a       	sub	r8, r31
    1ebc:	91 08       	sbc	r9, r1
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
    1ebe:	a7 01       	movw	r20, r14
    1ec0:	96 01       	movw	r18, r12
    1ec2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ec4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ec6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec8:	98 a1       	ldd	r25, Y+32	; 0x20
    1eca:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1ece:	6b 01       	movw	r12, r22
    1ed0:	7c 01       	movw	r14, r24
    1ed2:	29 a1       	ldd	r18, Y+33	; 0x21
    1ed4:	3a a1       	ldd	r19, Y+34	; 0x22
    1ed6:	4b a1       	ldd	r20, Y+35	; 0x23
    1ed8:	5c a1       	ldd	r21, Y+36	; 0x24
    1eda:	69 81       	ldd	r22, Y+1	; 0x01
    1edc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    1ee6:	9b 01       	movw	r18, r22
    1ee8:	ac 01       	movw	r20, r24
    1eea:	c7 01       	movw	r24, r14
    1eec:	b6 01       	movw	r22, r12
    1eee:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1ef2:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    1ef6:	d4 01       	movw	r26, r8
    1ef8:	6c 93       	st	X, r22
	static float pos = 0;
	
	float speed = seqSpeed / 500.0f;
	float size = seqSize;
	
	for(int i = 0; i < num_leds; i++)
    1efa:	bf ef       	ldi	r27, 0xFF	; 255
    1efc:	2b 1a       	sub	r2, r27
    1efe:	3b 0a       	sbc	r3, r27
    1f00:	0c 5f       	subi	r16, 0xFC	; 252
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	2a 14       	cp	r2, r10
    1f06:	3b 04       	cpc	r3, r11
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <seqRunning2+0x27a>
    1f0a:	66 cf       	rjmp	.-308    	; 0x1dd8 <seqRunning2+0x146>
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
	}
	
	pos += speed;
    1f0c:	20 91 d2 03 	lds	r18, 0x03D2
    1f10:	30 91 d3 03 	lds	r19, 0x03D3
    1f14:	40 91 d4 03 	lds	r20, 0x03D4
    1f18:	50 91 d5 03 	lds	r21, 0x03D5
    1f1c:	6d a1       	ldd	r22, Y+37	; 0x25
    1f1e:	7e a1       	ldd	r23, Y+38	; 0x26
    1f20:	8f a1       	ldd	r24, Y+39	; 0x27
    1f22:	98 a5       	ldd	r25, Y+40	; 0x28
    1f24:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__addsf3>
    1f28:	6b 01       	movw	r12, r22
    1f2a:	7c 01       	movw	r14, r24
	if(pos > 2*M_PI)
    1f2c:	2b ed       	ldi	r18, 0xDB	; 219
    1f2e:	3f e0       	ldi	r19, 0x0F	; 15
    1f30:	49 ec       	ldi	r20, 0xC9	; 201
    1f32:	50 e4       	ldi	r21, 0x40	; 64
    1f34:	0e 94 1d 12 	call	0x243a	; 0x243a <__gesf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f0       	brlt	.+18     	; 0x1f4e <seqRunning2+0x2bc>
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
	}
	
	pos += speed;
    1f3c:	c0 92 d2 03 	sts	0x03D2, r12
    1f40:	d0 92 d3 03 	sts	0x03D3, r13
    1f44:	e0 92 d4 03 	sts	0x03D4, r14
    1f48:	f0 92 d5 03 	sts	0x03D5, r15
    1f4c:	10 c0       	rjmp	.+32     	; 0x1f6e <seqRunning2+0x2dc>
	if(pos > 2*M_PI)
	pos -= 2*M_PI;
    1f4e:	2b ed       	ldi	r18, 0xDB	; 219
    1f50:	3f e0       	ldi	r19, 0x0F	; 15
    1f52:	49 ec       	ldi	r20, 0xC9	; 201
    1f54:	50 e4       	ldi	r21, 0x40	; 64
    1f56:	c7 01       	movw	r24, r14
    1f58:	b6 01       	movw	r22, r12
    1f5a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__subsf3>
    1f5e:	60 93 d2 03 	sts	0x03D2, r22
    1f62:	70 93 d3 03 	sts	0x03D3, r23
    1f66:	80 93 d4 03 	sts	0x03D4, r24
    1f6a:	90 93 d5 03 	sts	0x03D5, r25
}
    1f6e:	a8 96       	adiw	r28, 0x28	; 40
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	df 90       	pop	r13
    1f88:	cf 90       	pop	r12
    1f8a:	bf 90       	pop	r11
    1f8c:	af 90       	pop	r10
    1f8e:	9f 90       	pop	r9
    1f90:	8f 90       	pop	r8
    1f92:	7f 90       	pop	r7
    1f94:	6f 90       	pop	r6
    1f96:	5f 90       	pop	r5
    1f98:	4f 90       	pop	r4
    1f9a:	3f 90       	pop	r3
    1f9c:	2f 90       	pop	r2
    1f9e:	08 95       	ret

00001fa0 <seqSetFunction>:

// ----------------------------------------------------------------------- Definitions

void seqSetFunction(seqType_t type)
{
	seqType = type;
    1fa0:	80 93 01 01 	sts	0x0101, r24
    1fa4:	08 95       	ret

00001fa6 <seqSetSpeed>:
}

void seqSetSpeed(uint8_t speed)
{
	if(speed > SEQ_MAX_SPEED) seqSpeed = SEQ_MAX_SPEED;
    1fa6:	85 36       	cpi	r24, 0x65	; 101
    1fa8:	20 f0       	brcs	.+8      	; 0x1fb2 <seqSetSpeed+0xc>
    1faa:	84 e6       	ldi	r24, 0x64	; 100
    1fac:	80 93 45 01 	sts	0x0145, r24
    1fb0:	08 95       	ret
	else if(speed < SEQ_MIN_SPEED) seqSpeed = SEQ_MIN_SPEED;
	else seqSpeed = speed;
    1fb2:	80 93 45 01 	sts	0x0145, r24
    1fb6:	08 95       	ret

00001fb8 <seqSetSoftness>:
}

void seqSetSoftness(uint8_t softness)
{
	if(softness > SEQ_MAX_SOFTNESS) seqSoftness = SEQ_MAX_SOFTNESS;
    1fb8:	85 36       	cpi	r24, 0x65	; 101
    1fba:	20 f0       	brcs	.+8      	; 0x1fc4 <seqSetSoftness+0xc>
    1fbc:	84 e6       	ldi	r24, 0x64	; 100
    1fbe:	80 93 44 01 	sts	0x0144, r24
    1fc2:	08 95       	ret
	else if(softness < SEQ_MIN_SOFTNESS) seqSoftness = SEQ_MIN_SOFTNESS;
	else seqSoftness = softness;
    1fc4:	80 93 44 01 	sts	0x0144, r24
    1fc8:	08 95       	ret

00001fca <seqSetSize>:

void seqSetSize(uint8_t size)
{
	if(size > SEQ_MAX_SIZE) seqSize = SEQ_MAX_SIZE;
	else if(size < SEQ_MIN_SIZE) seqSize = SEQ_MIN_SIZE;
	seqSize = size;
    1fca:	80 93 43 01 	sts	0x0143, r24
    1fce:	08 95       	ret

00001fd0 <seqUpdate>:
}

void seqUpdate(color_t *leds, int num_leds)
{
	functions[seqType](leds, num_leds);
    1fd0:	e0 91 01 01 	lds	r30, 0x0101
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	ee 0f       	add	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	ea 5b       	subi	r30, 0xBA	; 186
    1fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fde:	01 90       	ld	r0, Z+
    1fe0:	f0 81       	ld	r31, Z
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	09 95       	icall
    1fe6:	08 95       	ret

00001fe8 <seqSetColorRGB>:
	colors[i] = c;
}

void seqSetColorRGB(uint8_t i, uint8_t r, uint8_t g, uint8_t b)
{
	if(i >= numColors)
    1fe8:	90 91 42 01 	lds	r25, 0x0142
    1fec:	89 17       	cp	r24, r25
    1fee:	90 f4       	brcc	.+36     	; 0x2014 <seqSetColorRGB+0x2c>
	return;
	
	colors[i] = (int32_t)r | ((int32_t)g<<8) | ((int32_t)b<<16);
    1ff0:	e8 2f       	mov	r30, r24
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	ee 0f       	add	r30, r30
    1ffa:	ff 1f       	adc	r31, r31
    1ffc:	ee 5f       	subi	r30, 0xFE	; 254
    1ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    2000:	86 2f       	mov	r24, r22
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	94 2b       	or	r25, r20
    200a:	a2 2b       	or	r26, r18
    200c:	80 83       	st	Z, r24
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	a2 83       	std	Z+2, r26	; 0x02
    2012:	b3 83       	std	Z+3, r27	; 0x03
    2014:	08 95       	ret

00002016 <seqSetColorCount>:
	numColors = num;
}

void seqSetColorCount(uint8_t num)
{
	if(num > SEQ_MAX_COLORS)
    2016:	81 31       	cpi	r24, 0x11	; 17
    2018:	10 f4       	brcc	.+4      	; 0x201e <seqSetColorCount+0x8>
	return;
	
	numColors = num;
    201a:	80 93 42 01 	sts	0x0142, r24
    201e:	08 95       	ret

00002020 <wsInit>:

// ----------------------------------------------------------------------- Definitions

void wsInit()
{
	WS_DDR |= WS_BIT;
    2020:	53 9a       	sbi	0x0a, 3	; 10
    2022:	08 95       	ret

00002024 <wsSend>:
}

void wsSend(color_t *leds, int num_leds)
{
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	dc 01       	movw	r26, r24
    202c:	eb 01       	movw	r28, r22
	for(uint8_t j = 0; j < num_leds; j++)
    202e:	1c 16       	cp	r1, r28
    2030:	1d 06       	cpc	r1, r29
    2032:	34 f1       	brlt	.+76     	; 0x2080 <wsSend+0x5c>
    2034:	31 c0       	rjmp	.+98     	; 0x2098 <wsSend+0x74>
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    2036:	40 81       	ld	r20, Z
    2038:	51 81       	ldd	r21, Z+1	; 0x01
    203a:	62 81       	ldd	r22, Z+2	; 0x02
    203c:	73 81       	ldd	r23, Z+3	; 0x03
    203e:	02 2e       	mov	r0, r18
    2040:	04 c0       	rjmp	.+8      	; 0x204a <wsSend+0x26>
    2042:	76 95       	lsr	r23
    2044:	67 95       	ror	r22
    2046:	57 95       	ror	r21
    2048:	47 95       	ror	r20
    204a:	0a 94       	dec	r0
    204c:	d2 f7       	brpl	.-12     	; 0x2042 <wsSend+0x1e>
    204e:	40 ff       	sbrs	r20, 0
    2050:	07 c0       	rjmp	.+14     	; 0x2060 <wsSend+0x3c>
				WS_PORT |= WS_BIT;
    2052:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    2054:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    2056:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    2058:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    205a:	5b 9a       	sbi	0x0b, 3	; 11
				//WS_PORT |= WS_BIT;
				
				//WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
				WS_PORT &= ~WS_BIT;
    205c:	5b 98       	cbi	0x0b, 3	; 11
    205e:	06 c0       	rjmp	.+12     	; 0x206c <wsSend+0x48>
				} else {
				//WS_PORT |= WS_BIT;
				//WS_PORT |= WS_BIT;
				WS_PORT |= WS_BIT;
    2060:	5b 9a       	sbi	0x0b, 3	; 11
				
				WS_PORT &= ~WS_BIT;
    2062:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    2064:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    2066:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    2068:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    206a:	5b 98       	cbi	0x0b, 3	; 11
    206c:	21 50       	subi	r18, 0x01	; 1
    206e:	31 09       	sbc	r19, r1
    2070:	10 f7       	brcc	.-60     	; 0x2036 <wsSend+0x12>
	WS_DDR |= WS_BIT;
}

void wsSend(color_t *leds, int num_leds)
{
	for(uint8_t j = 0; j < num_leds; j++)
    2072:	9f 5f       	subi	r25, 0xFF	; 255
    2074:	29 2f       	mov	r18, r25
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	2c 17       	cp	r18, r28
    207a:	3d 07       	cpc	r19, r29
    207c:	24 f0       	brlt	.+8      	; 0x2086 <wsSend+0x62>
    207e:	0c c0       	rjmp	.+24     	; 0x2098 <wsSend+0x74>
    2080:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    2082:	17 e1       	ldi	r17, 0x17	; 23
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	fd 01       	movw	r30, r26
    2088:	24 e0       	ldi	r18, 0x04	; 4
    208a:	92 9f       	mul	r25, r18
    208c:	e0 0d       	add	r30, r0
    208e:	f1 1d       	adc	r31, r1
    2090:	11 24       	eor	r1, r1
    2092:	21 2f       	mov	r18, r17
    2094:	38 2f       	mov	r19, r24
    2096:	cf cf       	rjmp	.-98     	; 0x2036 <wsSend+0x12>
				WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
			}
		}
	}
	WS_PORT = 0;
    2098:	1b b8       	out	0x0b, r1	; 11
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	08 95       	ret

000020a2 <__subsf3>:
    20a2:	50 58       	subi	r21, 0x80	; 128

000020a4 <__addsf3>:
    20a4:	bb 27       	eor	r27, r27
    20a6:	aa 27       	eor	r26, r26
    20a8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__addsf3x>
    20ac:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__fp_round>
    20b0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fp_pscA>
    20b4:	38 f0       	brcs	.+14     	; 0x20c4 <__addsf3+0x20>
    20b6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__fp_pscB>
    20ba:	20 f0       	brcs	.+8      	; 0x20c4 <__addsf3+0x20>
    20bc:	39 f4       	brne	.+14     	; 0x20cc <__addsf3+0x28>
    20be:	9f 3f       	cpi	r25, 0xFF	; 255
    20c0:	19 f4       	brne	.+6      	; 0x20c8 <__addsf3+0x24>
    20c2:	26 f4       	brtc	.+8      	; 0x20cc <__addsf3+0x28>
    20c4:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__fp_nan>
    20c8:	0e f4       	brtc	.+2      	; 0x20cc <__addsf3+0x28>
    20ca:	e0 95       	com	r30
    20cc:	e7 fb       	bst	r30, 7
    20ce:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__fp_inf>

000020d2 <__addsf3x>:
    20d2:	e9 2f       	mov	r30, r25
    20d4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__fp_split3>
    20d8:	58 f3       	brcs	.-42     	; 0x20b0 <__addsf3+0xc>
    20da:	ba 17       	cp	r27, r26
    20dc:	62 07       	cpc	r22, r18
    20de:	73 07       	cpc	r23, r19
    20e0:	84 07       	cpc	r24, r20
    20e2:	95 07       	cpc	r25, r21
    20e4:	20 f0       	brcs	.+8      	; 0x20ee <__addsf3x+0x1c>
    20e6:	79 f4       	brne	.+30     	; 0x2106 <__addsf3x+0x34>
    20e8:	a6 f5       	brtc	.+104    	; 0x2152 <__addsf3x+0x80>
    20ea:	0c 94 16 12 	jmp	0x242c	; 0x242c <__fp_zero>
    20ee:	0e f4       	brtc	.+2      	; 0x20f2 <__addsf3x+0x20>
    20f0:	e0 95       	com	r30
    20f2:	0b 2e       	mov	r0, r27
    20f4:	ba 2f       	mov	r27, r26
    20f6:	a0 2d       	mov	r26, r0
    20f8:	0b 01       	movw	r0, r22
    20fa:	b9 01       	movw	r22, r18
    20fc:	90 01       	movw	r18, r0
    20fe:	0c 01       	movw	r0, r24
    2100:	ca 01       	movw	r24, r20
    2102:	a0 01       	movw	r20, r0
    2104:	11 24       	eor	r1, r1
    2106:	ff 27       	eor	r31, r31
    2108:	59 1b       	sub	r21, r25
    210a:	99 f0       	breq	.+38     	; 0x2132 <__addsf3x+0x60>
    210c:	59 3f       	cpi	r21, 0xF9	; 249
    210e:	50 f4       	brcc	.+20     	; 0x2124 <__addsf3x+0x52>
    2110:	50 3e       	cpi	r21, 0xE0	; 224
    2112:	68 f1       	brcs	.+90     	; 0x216e <__addsf3x+0x9c>
    2114:	1a 16       	cp	r1, r26
    2116:	f0 40       	sbci	r31, 0x00	; 0
    2118:	a2 2f       	mov	r26, r18
    211a:	23 2f       	mov	r18, r19
    211c:	34 2f       	mov	r19, r20
    211e:	44 27       	eor	r20, r20
    2120:	58 5f       	subi	r21, 0xF8	; 248
    2122:	f3 cf       	rjmp	.-26     	; 0x210a <__addsf3x+0x38>
    2124:	46 95       	lsr	r20
    2126:	37 95       	ror	r19
    2128:	27 95       	ror	r18
    212a:	a7 95       	ror	r26
    212c:	f0 40       	sbci	r31, 0x00	; 0
    212e:	53 95       	inc	r21
    2130:	c9 f7       	brne	.-14     	; 0x2124 <__addsf3x+0x52>
    2132:	7e f4       	brtc	.+30     	; 0x2152 <__addsf3x+0x80>
    2134:	1f 16       	cp	r1, r31
    2136:	ba 0b       	sbc	r27, r26
    2138:	62 0b       	sbc	r22, r18
    213a:	73 0b       	sbc	r23, r19
    213c:	84 0b       	sbc	r24, r20
    213e:	ba f0       	brmi	.+46     	; 0x216e <__addsf3x+0x9c>
    2140:	91 50       	subi	r25, 0x01	; 1
    2142:	a1 f0       	breq	.+40     	; 0x216c <__addsf3x+0x9a>
    2144:	ff 0f       	add	r31, r31
    2146:	bb 1f       	adc	r27, r27
    2148:	66 1f       	adc	r22, r22
    214a:	77 1f       	adc	r23, r23
    214c:	88 1f       	adc	r24, r24
    214e:	c2 f7       	brpl	.-16     	; 0x2140 <__addsf3x+0x6e>
    2150:	0e c0       	rjmp	.+28     	; 0x216e <__addsf3x+0x9c>
    2152:	ba 0f       	add	r27, r26
    2154:	62 1f       	adc	r22, r18
    2156:	73 1f       	adc	r23, r19
    2158:	84 1f       	adc	r24, r20
    215a:	48 f4       	brcc	.+18     	; 0x216e <__addsf3x+0x9c>
    215c:	87 95       	ror	r24
    215e:	77 95       	ror	r23
    2160:	67 95       	ror	r22
    2162:	b7 95       	ror	r27
    2164:	f7 95       	ror	r31
    2166:	9e 3f       	cpi	r25, 0xFE	; 254
    2168:	08 f0       	brcs	.+2      	; 0x216c <__addsf3x+0x9a>
    216a:	b0 cf       	rjmp	.-160    	; 0x20cc <__addsf3+0x28>
    216c:	93 95       	inc	r25
    216e:	88 0f       	add	r24, r24
    2170:	08 f0       	brcs	.+2      	; 0x2174 <__addsf3x+0xa2>
    2172:	99 27       	eor	r25, r25
    2174:	ee 0f       	add	r30, r30
    2176:	97 95       	ror	r25
    2178:	87 95       	ror	r24
    217a:	08 95       	ret

0000217c <__cmpsf2>:
    217c:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fp_cmp>
    2180:	08 f4       	brcc	.+2      	; 0x2184 <__cmpsf2+0x8>
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	08 95       	ret

00002186 <__divsf3>:
    2186:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__divsf3x>
    218a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__fp_round>
    218e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__fp_pscB>
    2192:	58 f0       	brcs	.+22     	; 0x21aa <__divsf3+0x24>
    2194:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fp_pscA>
    2198:	40 f0       	brcs	.+16     	; 0x21aa <__divsf3+0x24>
    219a:	29 f4       	brne	.+10     	; 0x21a6 <__divsf3+0x20>
    219c:	5f 3f       	cpi	r21, 0xFF	; 255
    219e:	29 f0       	breq	.+10     	; 0x21aa <__divsf3+0x24>
    21a0:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__fp_inf>
    21a4:	51 11       	cpse	r21, r1
    21a6:	0c 94 17 12 	jmp	0x242e	; 0x242e <__fp_szero>
    21aa:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__fp_nan>

000021ae <__divsf3x>:
    21ae:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__fp_split3>
    21b2:	68 f3       	brcs	.-38     	; 0x218e <__divsf3+0x8>

000021b4 <__divsf3_pse>:
    21b4:	99 23       	and	r25, r25
    21b6:	b1 f3       	breq	.-20     	; 0x21a4 <__divsf3+0x1e>
    21b8:	55 23       	and	r21, r21
    21ba:	91 f3       	breq	.-28     	; 0x21a0 <__divsf3+0x1a>
    21bc:	95 1b       	sub	r25, r21
    21be:	55 0b       	sbc	r21, r21
    21c0:	bb 27       	eor	r27, r27
    21c2:	aa 27       	eor	r26, r26
    21c4:	62 17       	cp	r22, r18
    21c6:	73 07       	cpc	r23, r19
    21c8:	84 07       	cpc	r24, r20
    21ca:	38 f0       	brcs	.+14     	; 0x21da <__divsf3_pse+0x26>
    21cc:	9f 5f       	subi	r25, 0xFF	; 255
    21ce:	5f 4f       	sbci	r21, 0xFF	; 255
    21d0:	22 0f       	add	r18, r18
    21d2:	33 1f       	adc	r19, r19
    21d4:	44 1f       	adc	r20, r20
    21d6:	aa 1f       	adc	r26, r26
    21d8:	a9 f3       	breq	.-22     	; 0x21c4 <__divsf3_pse+0x10>
    21da:	35 d0       	rcall	.+106    	; 0x2246 <__divsf3_pse+0x92>
    21dc:	0e 2e       	mov	r0, r30
    21de:	3a f0       	brmi	.+14     	; 0x21ee <__divsf3_pse+0x3a>
    21e0:	e0 e8       	ldi	r30, 0x80	; 128
    21e2:	32 d0       	rcall	.+100    	; 0x2248 <__divsf3_pse+0x94>
    21e4:	91 50       	subi	r25, 0x01	; 1
    21e6:	50 40       	sbci	r21, 0x00	; 0
    21e8:	e6 95       	lsr	r30
    21ea:	00 1c       	adc	r0, r0
    21ec:	ca f7       	brpl	.-14     	; 0x21e0 <__divsf3_pse+0x2c>
    21ee:	2b d0       	rcall	.+86     	; 0x2246 <__divsf3_pse+0x92>
    21f0:	fe 2f       	mov	r31, r30
    21f2:	29 d0       	rcall	.+82     	; 0x2246 <__divsf3_pse+0x92>
    21f4:	66 0f       	add	r22, r22
    21f6:	77 1f       	adc	r23, r23
    21f8:	88 1f       	adc	r24, r24
    21fa:	bb 1f       	adc	r27, r27
    21fc:	26 17       	cp	r18, r22
    21fe:	37 07       	cpc	r19, r23
    2200:	48 07       	cpc	r20, r24
    2202:	ab 07       	cpc	r26, r27
    2204:	b0 e8       	ldi	r27, 0x80	; 128
    2206:	09 f0       	breq	.+2      	; 0x220a <__divsf3_pse+0x56>
    2208:	bb 0b       	sbc	r27, r27
    220a:	80 2d       	mov	r24, r0
    220c:	bf 01       	movw	r22, r30
    220e:	ff 27       	eor	r31, r31
    2210:	93 58       	subi	r25, 0x83	; 131
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	3a f0       	brmi	.+14     	; 0x2224 <__divsf3_pse+0x70>
    2216:	9e 3f       	cpi	r25, 0xFE	; 254
    2218:	51 05       	cpc	r21, r1
    221a:	78 f0       	brcs	.+30     	; 0x223a <__divsf3_pse+0x86>
    221c:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__fp_inf>
    2220:	0c 94 17 12 	jmp	0x242e	; 0x242e <__fp_szero>
    2224:	5f 3f       	cpi	r21, 0xFF	; 255
    2226:	e4 f3       	brlt	.-8      	; 0x2220 <__divsf3_pse+0x6c>
    2228:	98 3e       	cpi	r25, 0xE8	; 232
    222a:	d4 f3       	brlt	.-12     	; 0x2220 <__divsf3_pse+0x6c>
    222c:	86 95       	lsr	r24
    222e:	77 95       	ror	r23
    2230:	67 95       	ror	r22
    2232:	b7 95       	ror	r27
    2234:	f7 95       	ror	r31
    2236:	9f 5f       	subi	r25, 0xFF	; 255
    2238:	c9 f7       	brne	.-14     	; 0x222c <__divsf3_pse+0x78>
    223a:	88 0f       	add	r24, r24
    223c:	91 1d       	adc	r25, r1
    223e:	96 95       	lsr	r25
    2240:	87 95       	ror	r24
    2242:	97 f9       	bld	r25, 7
    2244:	08 95       	ret
    2246:	e1 e0       	ldi	r30, 0x01	; 1
    2248:	66 0f       	add	r22, r22
    224a:	77 1f       	adc	r23, r23
    224c:	88 1f       	adc	r24, r24
    224e:	bb 1f       	adc	r27, r27
    2250:	62 17       	cp	r22, r18
    2252:	73 07       	cpc	r23, r19
    2254:	84 07       	cpc	r24, r20
    2256:	ba 07       	cpc	r27, r26
    2258:	20 f0       	brcs	.+8      	; 0x2262 <__divsf3_pse+0xae>
    225a:	62 1b       	sub	r22, r18
    225c:	73 0b       	sbc	r23, r19
    225e:	84 0b       	sbc	r24, r20
    2260:	ba 0b       	sbc	r27, r26
    2262:	ee 1f       	adc	r30, r30
    2264:	88 f7       	brcc	.-30     	; 0x2248 <__divsf3_pse+0x94>
    2266:	e0 95       	com	r30
    2268:	08 95       	ret

0000226a <__fixsfsi>:
    226a:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fixunssfsi>
    226e:	68 94       	set
    2270:	b1 11       	cpse	r27, r1
    2272:	0c 94 17 12 	jmp	0x242e	; 0x242e <__fp_szero>
    2276:	08 95       	ret

00002278 <__fixunssfsi>:
    2278:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fp_splitA>
    227c:	88 f0       	brcs	.+34     	; 0x22a0 <__fixunssfsi+0x28>
    227e:	9f 57       	subi	r25, 0x7F	; 127
    2280:	98 f0       	brcs	.+38     	; 0x22a8 <__fixunssfsi+0x30>
    2282:	b9 2f       	mov	r27, r25
    2284:	99 27       	eor	r25, r25
    2286:	b7 51       	subi	r27, 0x17	; 23
    2288:	b0 f0       	brcs	.+44     	; 0x22b6 <__fixunssfsi+0x3e>
    228a:	e1 f0       	breq	.+56     	; 0x22c4 <__fixunssfsi+0x4c>
    228c:	66 0f       	add	r22, r22
    228e:	77 1f       	adc	r23, r23
    2290:	88 1f       	adc	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	1a f0       	brmi	.+6      	; 0x229c <__fixunssfsi+0x24>
    2296:	ba 95       	dec	r27
    2298:	c9 f7       	brne	.-14     	; 0x228c <__fixunssfsi+0x14>
    229a:	14 c0       	rjmp	.+40     	; 0x22c4 <__fixunssfsi+0x4c>
    229c:	b1 30       	cpi	r27, 0x01	; 1
    229e:	91 f0       	breq	.+36     	; 0x22c4 <__fixunssfsi+0x4c>
    22a0:	0e 94 16 12 	call	0x242c	; 0x242c <__fp_zero>
    22a4:	b1 e0       	ldi	r27, 0x01	; 1
    22a6:	08 95       	ret
    22a8:	0c 94 16 12 	jmp	0x242c	; 0x242c <__fp_zero>
    22ac:	67 2f       	mov	r22, r23
    22ae:	78 2f       	mov	r23, r24
    22b0:	88 27       	eor	r24, r24
    22b2:	b8 5f       	subi	r27, 0xF8	; 248
    22b4:	39 f0       	breq	.+14     	; 0x22c4 <__fixunssfsi+0x4c>
    22b6:	b9 3f       	cpi	r27, 0xF9	; 249
    22b8:	cc f3       	brlt	.-14     	; 0x22ac <__fixunssfsi+0x34>
    22ba:	86 95       	lsr	r24
    22bc:	77 95       	ror	r23
    22be:	67 95       	ror	r22
    22c0:	b3 95       	inc	r27
    22c2:	d9 f7       	brne	.-10     	; 0x22ba <__fixunssfsi+0x42>
    22c4:	3e f4       	brtc	.+14     	; 0x22d4 <__fixunssfsi+0x5c>
    22c6:	90 95       	com	r25
    22c8:	80 95       	com	r24
    22ca:	70 95       	com	r23
    22cc:	61 95       	neg	r22
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	8f 4f       	sbci	r24, 0xFF	; 255
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	08 95       	ret

000022d6 <__floatunsisf>:
    22d6:	e8 94       	clt
    22d8:	09 c0       	rjmp	.+18     	; 0x22ec <__floatsisf+0x12>

000022da <__floatsisf>:
    22da:	97 fb       	bst	r25, 7
    22dc:	3e f4       	brtc	.+14     	; 0x22ec <__floatsisf+0x12>
    22de:	90 95       	com	r25
    22e0:	80 95       	com	r24
    22e2:	70 95       	com	r23
    22e4:	61 95       	neg	r22
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	99 23       	and	r25, r25
    22ee:	a9 f0       	breq	.+42     	; 0x231a <__floatsisf+0x40>
    22f0:	f9 2f       	mov	r31, r25
    22f2:	96 e9       	ldi	r25, 0x96	; 150
    22f4:	bb 27       	eor	r27, r27
    22f6:	93 95       	inc	r25
    22f8:	f6 95       	lsr	r31
    22fa:	87 95       	ror	r24
    22fc:	77 95       	ror	r23
    22fe:	67 95       	ror	r22
    2300:	b7 95       	ror	r27
    2302:	f1 11       	cpse	r31, r1
    2304:	f8 cf       	rjmp	.-16     	; 0x22f6 <__floatsisf+0x1c>
    2306:	fa f4       	brpl	.+62     	; 0x2346 <__floatsisf+0x6c>
    2308:	bb 0f       	add	r27, r27
    230a:	11 f4       	brne	.+4      	; 0x2310 <__floatsisf+0x36>
    230c:	60 ff       	sbrs	r22, 0
    230e:	1b c0       	rjmp	.+54     	; 0x2346 <__floatsisf+0x6c>
    2310:	6f 5f       	subi	r22, 0xFF	; 255
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	8f 4f       	sbci	r24, 0xFF	; 255
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	16 c0       	rjmp	.+44     	; 0x2346 <__floatsisf+0x6c>
    231a:	88 23       	and	r24, r24
    231c:	11 f0       	breq	.+4      	; 0x2322 <__floatsisf+0x48>
    231e:	96 e9       	ldi	r25, 0x96	; 150
    2320:	11 c0       	rjmp	.+34     	; 0x2344 <__floatsisf+0x6a>
    2322:	77 23       	and	r23, r23
    2324:	21 f0       	breq	.+8      	; 0x232e <__floatsisf+0x54>
    2326:	9e e8       	ldi	r25, 0x8E	; 142
    2328:	87 2f       	mov	r24, r23
    232a:	76 2f       	mov	r23, r22
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <__floatsisf+0x5e>
    232e:	66 23       	and	r22, r22
    2330:	71 f0       	breq	.+28     	; 0x234e <__floatsisf+0x74>
    2332:	96 e8       	ldi	r25, 0x86	; 134
    2334:	86 2f       	mov	r24, r22
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	2a f0       	brmi	.+10     	; 0x2346 <__floatsisf+0x6c>
    233c:	9a 95       	dec	r25
    233e:	66 0f       	add	r22, r22
    2340:	77 1f       	adc	r23, r23
    2342:	88 1f       	adc	r24, r24
    2344:	da f7       	brpl	.-10     	; 0x233c <__floatsisf+0x62>
    2346:	88 0f       	add	r24, r24
    2348:	96 95       	lsr	r25
    234a:	87 95       	ror	r24
    234c:	97 f9       	bld	r25, 7
    234e:	08 95       	ret

00002350 <__fp_cmp>:
    2350:	99 0f       	add	r25, r25
    2352:	00 08       	sbc	r0, r0
    2354:	55 0f       	add	r21, r21
    2356:	aa 0b       	sbc	r26, r26
    2358:	e0 e8       	ldi	r30, 0x80	; 128
    235a:	fe ef       	ldi	r31, 0xFE	; 254
    235c:	16 16       	cp	r1, r22
    235e:	17 06       	cpc	r1, r23
    2360:	e8 07       	cpc	r30, r24
    2362:	f9 07       	cpc	r31, r25
    2364:	c0 f0       	brcs	.+48     	; 0x2396 <__fp_cmp+0x46>
    2366:	12 16       	cp	r1, r18
    2368:	13 06       	cpc	r1, r19
    236a:	e4 07       	cpc	r30, r20
    236c:	f5 07       	cpc	r31, r21
    236e:	98 f0       	brcs	.+38     	; 0x2396 <__fp_cmp+0x46>
    2370:	62 1b       	sub	r22, r18
    2372:	73 0b       	sbc	r23, r19
    2374:	84 0b       	sbc	r24, r20
    2376:	95 0b       	sbc	r25, r21
    2378:	39 f4       	brne	.+14     	; 0x2388 <__fp_cmp+0x38>
    237a:	0a 26       	eor	r0, r26
    237c:	61 f0       	breq	.+24     	; 0x2396 <__fp_cmp+0x46>
    237e:	23 2b       	or	r18, r19
    2380:	24 2b       	or	r18, r20
    2382:	25 2b       	or	r18, r21
    2384:	21 f4       	brne	.+8      	; 0x238e <__fp_cmp+0x3e>
    2386:	08 95       	ret
    2388:	0a 26       	eor	r0, r26
    238a:	09 f4       	brne	.+2      	; 0x238e <__fp_cmp+0x3e>
    238c:	a1 40       	sbci	r26, 0x01	; 1
    238e:	a6 95       	lsr	r26
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	81 1d       	adc	r24, r1
    2394:	81 1d       	adc	r24, r1
    2396:	08 95       	ret

00002398 <__fp_inf>:
    2398:	97 f9       	bld	r25, 7
    239a:	9f 67       	ori	r25, 0x7F	; 127
    239c:	80 e8       	ldi	r24, 0x80	; 128
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	08 95       	ret

000023a4 <__fp_nan>:
    23a4:	9f ef       	ldi	r25, 0xFF	; 255
    23a6:	80 ec       	ldi	r24, 0xC0	; 192
    23a8:	08 95       	ret

000023aa <__fp_pscA>:
    23aa:	00 24       	eor	r0, r0
    23ac:	0a 94       	dec	r0
    23ae:	16 16       	cp	r1, r22
    23b0:	17 06       	cpc	r1, r23
    23b2:	18 06       	cpc	r1, r24
    23b4:	09 06       	cpc	r0, r25
    23b6:	08 95       	ret

000023b8 <__fp_pscB>:
    23b8:	00 24       	eor	r0, r0
    23ba:	0a 94       	dec	r0
    23bc:	12 16       	cp	r1, r18
    23be:	13 06       	cpc	r1, r19
    23c0:	14 06       	cpc	r1, r20
    23c2:	05 06       	cpc	r0, r21
    23c4:	08 95       	ret

000023c6 <__fp_round>:
    23c6:	09 2e       	mov	r0, r25
    23c8:	03 94       	inc	r0
    23ca:	00 0c       	add	r0, r0
    23cc:	11 f4       	brne	.+4      	; 0x23d2 <__fp_round+0xc>
    23ce:	88 23       	and	r24, r24
    23d0:	52 f0       	brmi	.+20     	; 0x23e6 <__fp_round+0x20>
    23d2:	bb 0f       	add	r27, r27
    23d4:	40 f4       	brcc	.+16     	; 0x23e6 <__fp_round+0x20>
    23d6:	bf 2b       	or	r27, r31
    23d8:	11 f4       	brne	.+4      	; 0x23de <__fp_round+0x18>
    23da:	60 ff       	sbrs	r22, 0
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <__fp_round+0x20>
    23de:	6f 5f       	subi	r22, 0xFF	; 255
    23e0:	7f 4f       	sbci	r23, 0xFF	; 255
    23e2:	8f 4f       	sbci	r24, 0xFF	; 255
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	08 95       	ret

000023e8 <__fp_split3>:
    23e8:	57 fd       	sbrc	r21, 7
    23ea:	90 58       	subi	r25, 0x80	; 128
    23ec:	44 0f       	add	r20, r20
    23ee:	55 1f       	adc	r21, r21
    23f0:	59 f0       	breq	.+22     	; 0x2408 <__fp_splitA+0x10>
    23f2:	5f 3f       	cpi	r21, 0xFF	; 255
    23f4:	71 f0       	breq	.+28     	; 0x2412 <__fp_splitA+0x1a>
    23f6:	47 95       	ror	r20

000023f8 <__fp_splitA>:
    23f8:	88 0f       	add	r24, r24
    23fa:	97 fb       	bst	r25, 7
    23fc:	99 1f       	adc	r25, r25
    23fe:	61 f0       	breq	.+24     	; 0x2418 <__fp_splitA+0x20>
    2400:	9f 3f       	cpi	r25, 0xFF	; 255
    2402:	79 f0       	breq	.+30     	; 0x2422 <__fp_splitA+0x2a>
    2404:	87 95       	ror	r24
    2406:	08 95       	ret
    2408:	12 16       	cp	r1, r18
    240a:	13 06       	cpc	r1, r19
    240c:	14 06       	cpc	r1, r20
    240e:	55 1f       	adc	r21, r21
    2410:	f2 cf       	rjmp	.-28     	; 0x23f6 <__fp_split3+0xe>
    2412:	46 95       	lsr	r20
    2414:	f1 df       	rcall	.-30     	; 0x23f8 <__fp_splitA>
    2416:	08 c0       	rjmp	.+16     	; 0x2428 <__fp_splitA+0x30>
    2418:	16 16       	cp	r1, r22
    241a:	17 06       	cpc	r1, r23
    241c:	18 06       	cpc	r1, r24
    241e:	99 1f       	adc	r25, r25
    2420:	f1 cf       	rjmp	.-30     	; 0x2404 <__fp_splitA+0xc>
    2422:	86 95       	lsr	r24
    2424:	71 05       	cpc	r23, r1
    2426:	61 05       	cpc	r22, r1
    2428:	08 94       	sec
    242a:	08 95       	ret

0000242c <__fp_zero>:
    242c:	e8 94       	clt

0000242e <__fp_szero>:
    242e:	bb 27       	eor	r27, r27
    2430:	66 27       	eor	r22, r22
    2432:	77 27       	eor	r23, r23
    2434:	cb 01       	movw	r24, r22
    2436:	97 f9       	bld	r25, 7
    2438:	08 95       	ret

0000243a <__gesf2>:
    243a:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fp_cmp>
    243e:	08 f4       	brcc	.+2      	; 0x2442 <__gesf2+0x8>
    2440:	8f ef       	ldi	r24, 0xFF	; 255
    2442:	08 95       	ret

00002444 <__mulsf3>:
    2444:	0e 94 35 12 	call	0x246a	; 0x246a <__mulsf3x>
    2448:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__fp_round>
    244c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fp_pscA>
    2450:	38 f0       	brcs	.+14     	; 0x2460 <__mulsf3+0x1c>
    2452:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__fp_pscB>
    2456:	20 f0       	brcs	.+8      	; 0x2460 <__mulsf3+0x1c>
    2458:	95 23       	and	r25, r21
    245a:	11 f0       	breq	.+4      	; 0x2460 <__mulsf3+0x1c>
    245c:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__fp_inf>
    2460:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__fp_nan>
    2464:	11 24       	eor	r1, r1
    2466:	0c 94 17 12 	jmp	0x242e	; 0x242e <__fp_szero>

0000246a <__mulsf3x>:
    246a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__fp_split3>
    246e:	70 f3       	brcs	.-36     	; 0x244c <__mulsf3+0x8>

00002470 <__mulsf3_pse>:
    2470:	95 9f       	mul	r25, r21
    2472:	c1 f3       	breq	.-16     	; 0x2464 <__mulsf3+0x20>
    2474:	95 0f       	add	r25, r21
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	55 1f       	adc	r21, r21
    247a:	62 9f       	mul	r22, r18
    247c:	f0 01       	movw	r30, r0
    247e:	72 9f       	mul	r23, r18
    2480:	bb 27       	eor	r27, r27
    2482:	f0 0d       	add	r31, r0
    2484:	b1 1d       	adc	r27, r1
    2486:	63 9f       	mul	r22, r19
    2488:	aa 27       	eor	r26, r26
    248a:	f0 0d       	add	r31, r0
    248c:	b1 1d       	adc	r27, r1
    248e:	aa 1f       	adc	r26, r26
    2490:	64 9f       	mul	r22, r20
    2492:	66 27       	eor	r22, r22
    2494:	b0 0d       	add	r27, r0
    2496:	a1 1d       	adc	r26, r1
    2498:	66 1f       	adc	r22, r22
    249a:	82 9f       	mul	r24, r18
    249c:	22 27       	eor	r18, r18
    249e:	b0 0d       	add	r27, r0
    24a0:	a1 1d       	adc	r26, r1
    24a2:	62 1f       	adc	r22, r18
    24a4:	73 9f       	mul	r23, r19
    24a6:	b0 0d       	add	r27, r0
    24a8:	a1 1d       	adc	r26, r1
    24aa:	62 1f       	adc	r22, r18
    24ac:	83 9f       	mul	r24, r19
    24ae:	a0 0d       	add	r26, r0
    24b0:	61 1d       	adc	r22, r1
    24b2:	22 1f       	adc	r18, r18
    24b4:	74 9f       	mul	r23, r20
    24b6:	33 27       	eor	r19, r19
    24b8:	a0 0d       	add	r26, r0
    24ba:	61 1d       	adc	r22, r1
    24bc:	23 1f       	adc	r18, r19
    24be:	84 9f       	mul	r24, r20
    24c0:	60 0d       	add	r22, r0
    24c2:	21 1d       	adc	r18, r1
    24c4:	82 2f       	mov	r24, r18
    24c6:	76 2f       	mov	r23, r22
    24c8:	6a 2f       	mov	r22, r26
    24ca:	11 24       	eor	r1, r1
    24cc:	9f 57       	subi	r25, 0x7F	; 127
    24ce:	50 40       	sbci	r21, 0x00	; 0
    24d0:	9a f0       	brmi	.+38     	; 0x24f8 <__mulsf3_pse+0x88>
    24d2:	f1 f0       	breq	.+60     	; 0x2510 <__mulsf3_pse+0xa0>
    24d4:	88 23       	and	r24, r24
    24d6:	4a f0       	brmi	.+18     	; 0x24ea <__mulsf3_pse+0x7a>
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	bb 1f       	adc	r27, r27
    24de:	66 1f       	adc	r22, r22
    24e0:	77 1f       	adc	r23, r23
    24e2:	88 1f       	adc	r24, r24
    24e4:	91 50       	subi	r25, 0x01	; 1
    24e6:	50 40       	sbci	r21, 0x00	; 0
    24e8:	a9 f7       	brne	.-22     	; 0x24d4 <__mulsf3_pse+0x64>
    24ea:	9e 3f       	cpi	r25, 0xFE	; 254
    24ec:	51 05       	cpc	r21, r1
    24ee:	80 f0       	brcs	.+32     	; 0x2510 <__mulsf3_pse+0xa0>
    24f0:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__fp_inf>
    24f4:	0c 94 17 12 	jmp	0x242e	; 0x242e <__fp_szero>
    24f8:	5f 3f       	cpi	r21, 0xFF	; 255
    24fa:	e4 f3       	brlt	.-8      	; 0x24f4 <__mulsf3_pse+0x84>
    24fc:	98 3e       	cpi	r25, 0xE8	; 232
    24fe:	d4 f3       	brlt	.-12     	; 0x24f4 <__mulsf3_pse+0x84>
    2500:	86 95       	lsr	r24
    2502:	77 95       	ror	r23
    2504:	67 95       	ror	r22
    2506:	b7 95       	ror	r27
    2508:	f7 95       	ror	r31
    250a:	e7 95       	ror	r30
    250c:	9f 5f       	subi	r25, 0xFF	; 255
    250e:	c1 f7       	brne	.-16     	; 0x2500 <__mulsf3_pse+0x90>
    2510:	fe 2b       	or	r31, r30
    2512:	88 0f       	add	r24, r24
    2514:	91 1d       	adc	r25, r1
    2516:	96 95       	lsr	r25
    2518:	87 95       	ror	r24
    251a:	97 f9       	bld	r25, 7
    251c:	08 95       	ret

0000251e <sin>:
    251e:	9f 93       	push	r25
    2520:	0e 94 99 12 	call	0x2532	; 0x2532 <__fp_rempio2>
    2524:	0f 90       	pop	r0
    2526:	07 fc       	sbrc	r0, 7
    2528:	ee 5f       	subi	r30, 0xFE	; 254
    252a:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_sinus>
    252e:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__fp_nan>

00002532 <__fp_rempio2>:
    2532:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fp_splitA>
    2536:	d8 f3       	brcs	.-10     	; 0x252e <sin+0x10>
    2538:	e8 94       	clt
    253a:	e0 e0       	ldi	r30, 0x00	; 0
    253c:	bb 27       	eor	r27, r27
    253e:	9f 57       	subi	r25, 0x7F	; 127
    2540:	f0 f0       	brcs	.+60     	; 0x257e <__fp_rempio2+0x4c>
    2542:	2a ed       	ldi	r18, 0xDA	; 218
    2544:	3f e0       	ldi	r19, 0x0F	; 15
    2546:	49 ec       	ldi	r20, 0xC9	; 201
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <__fp_rempio2+0x24>
    254a:	ee 0f       	add	r30, r30
    254c:	bb 0f       	add	r27, r27
    254e:	66 1f       	adc	r22, r22
    2550:	77 1f       	adc	r23, r23
    2552:	88 1f       	adc	r24, r24
    2554:	28 f0       	brcs	.+10     	; 0x2560 <__fp_rempio2+0x2e>
    2556:	b2 3a       	cpi	r27, 0xA2	; 162
    2558:	62 07       	cpc	r22, r18
    255a:	73 07       	cpc	r23, r19
    255c:	84 07       	cpc	r24, r20
    255e:	28 f0       	brcs	.+10     	; 0x256a <__fp_rempio2+0x38>
    2560:	b2 5a       	subi	r27, 0xA2	; 162
    2562:	62 0b       	sbc	r22, r18
    2564:	73 0b       	sbc	r23, r19
    2566:	84 0b       	sbc	r24, r20
    2568:	e3 95       	inc	r30
    256a:	9a 95       	dec	r25
    256c:	72 f7       	brpl	.-36     	; 0x254a <__fp_rempio2+0x18>
    256e:	80 38       	cpi	r24, 0x80	; 128
    2570:	30 f4       	brcc	.+12     	; 0x257e <__fp_rempio2+0x4c>
    2572:	9a 95       	dec	r25
    2574:	bb 0f       	add	r27, r27
    2576:	66 1f       	adc	r22, r22
    2578:	77 1f       	adc	r23, r23
    257a:	88 1f       	adc	r24, r24
    257c:	d2 f7       	brpl	.-12     	; 0x2572 <__fp_rempio2+0x40>
    257e:	90 48       	sbci	r25, 0x80	; 128
    2580:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__fp_mpack_finite>

00002584 <__fp_sinus>:
    2584:	ef 93       	push	r30
    2586:	e0 ff       	sbrs	r30, 0
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <__fp_sinus+0x14>
    258a:	a2 ea       	ldi	r26, 0xA2	; 162
    258c:	2a ed       	ldi	r18, 0xDA	; 218
    258e:	3f e0       	ldi	r19, 0x0F	; 15
    2590:	49 ec       	ldi	r20, 0xC9	; 201
    2592:	5f eb       	ldi	r21, 0xBF	; 191
    2594:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__addsf3x>
    2598:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__fp_round>
    259c:	0f 90       	pop	r0
    259e:	03 94       	inc	r0
    25a0:	01 fc       	sbrc	r0, 1
    25a2:	90 58       	subi	r25, 0x80	; 128
    25a4:	e6 e7       	ldi	r30, 0x76	; 118
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__fp_powsodd>

000025ac <__fp_mpack>:
    25ac:	9f 3f       	cpi	r25, 0xFF	; 255
    25ae:	31 f0       	breq	.+12     	; 0x25bc <__fp_mpack_finite+0xc>

000025b0 <__fp_mpack_finite>:
    25b0:	91 50       	subi	r25, 0x01	; 1
    25b2:	20 f4       	brcc	.+8      	; 0x25bc <__fp_mpack_finite+0xc>
    25b4:	87 95       	ror	r24
    25b6:	77 95       	ror	r23
    25b8:	67 95       	ror	r22
    25ba:	b7 95       	ror	r27
    25bc:	88 0f       	add	r24, r24
    25be:	91 1d       	adc	r25, r1
    25c0:	96 95       	lsr	r25
    25c2:	87 95       	ror	r24
    25c4:	97 f9       	bld	r25, 7
    25c6:	08 95       	ret

000025c8 <__fp_powsodd>:
    25c8:	9f 93       	push	r25
    25ca:	8f 93       	push	r24
    25cc:	7f 93       	push	r23
    25ce:	6f 93       	push	r22
    25d0:	ff 93       	push	r31
    25d2:	ef 93       	push	r30
    25d4:	9b 01       	movw	r18, r22
    25d6:	ac 01       	movw	r20, r24
    25d8:	0e 94 22 12 	call	0x2444	; 0x2444 <__mulsf3>
    25dc:	ef 91       	pop	r30
    25de:	ff 91       	pop	r31
    25e0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__fp_powser>
    25e4:	2f 91       	pop	r18
    25e6:	3f 91       	pop	r19
    25e8:	4f 91       	pop	r20
    25ea:	5f 91       	pop	r21
    25ec:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__mulsf3>

000025f0 <__fp_powser>:
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	1f 93       	push	r17
    25f6:	0f 93       	push	r16
    25f8:	ff 92       	push	r15
    25fa:	ef 92       	push	r14
    25fc:	df 92       	push	r13
    25fe:	7b 01       	movw	r14, r22
    2600:	8c 01       	movw	r16, r24
    2602:	68 94       	set
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <__fp_powser+0x22>
    2606:	da 2e       	mov	r13, r26
    2608:	ef 01       	movw	r28, r30
    260a:	0e 94 35 12 	call	0x246a	; 0x246a <__mulsf3x>
    260e:	fe 01       	movw	r30, r28
    2610:	e8 94       	clt
    2612:	a5 91       	lpm	r26, Z+
    2614:	25 91       	lpm	r18, Z+
    2616:	35 91       	lpm	r19, Z+
    2618:	45 91       	lpm	r20, Z+
    261a:	55 91       	lpm	r21, Z+
    261c:	a6 f3       	brts	.-24     	; 0x2606 <__fp_powser+0x16>
    261e:	ef 01       	movw	r28, r30
    2620:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__addsf3x>
    2624:	fe 01       	movw	r30, r28
    2626:	97 01       	movw	r18, r14
    2628:	a8 01       	movw	r20, r16
    262a:	da 94       	dec	r13
    262c:	69 f7       	brne	.-38     	; 0x2608 <__fp_powser+0x18>
    262e:	df 90       	pop	r13
    2630:	ef 90       	pop	r14
    2632:	ff 90       	pop	r15
    2634:	0f 91       	pop	r16
    2636:	1f 91       	pop	r17
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <__divmodhi4>:
    263e:	97 fb       	bst	r25, 7
    2640:	07 2e       	mov	r0, r23
    2642:	16 f4       	brtc	.+4      	; 0x2648 <__divmodhi4+0xa>
    2644:	00 94       	com	r0
    2646:	07 d0       	rcall	.+14     	; 0x2656 <__divmodhi4_neg1>
    2648:	77 fd       	sbrc	r23, 7
    264a:	09 d0       	rcall	.+18     	; 0x265e <__divmodhi4_neg2>
    264c:	0e 94 58 13 	call	0x26b0	; 0x26b0 <__udivmodhi4>
    2650:	07 fc       	sbrc	r0, 7
    2652:	05 d0       	rcall	.+10     	; 0x265e <__divmodhi4_neg2>
    2654:	3e f4       	brtc	.+14     	; 0x2664 <__divmodhi4_exit>

00002656 <__divmodhi4_neg1>:
    2656:	90 95       	com	r25
    2658:	81 95       	neg	r24
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	08 95       	ret

0000265e <__divmodhi4_neg2>:
    265e:	70 95       	com	r23
    2660:	61 95       	neg	r22
    2662:	7f 4f       	sbci	r23, 0xFF	; 255

00002664 <__divmodhi4_exit>:
    2664:	08 95       	ret

00002666 <__divmodsi4>:
    2666:	05 2e       	mov	r0, r21
    2668:	97 fb       	bst	r25, 7
    266a:	1e f4       	brtc	.+6      	; 0x2672 <__divmodsi4+0xc>
    266c:	00 94       	com	r0
    266e:	0e 94 4a 13 	call	0x2694	; 0x2694 <__negsi2>
    2672:	57 fd       	sbrc	r21, 7
    2674:	07 d0       	rcall	.+14     	; 0x2684 <__divmodsi4_neg2>
    2676:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__udivmodsi4>
    267a:	07 fc       	sbrc	r0, 7
    267c:	03 d0       	rcall	.+6      	; 0x2684 <__divmodsi4_neg2>
    267e:	4e f4       	brtc	.+18     	; 0x2692 <__divmodsi4_exit>
    2680:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__negsi2>

00002684 <__divmodsi4_neg2>:
    2684:	50 95       	com	r21
    2686:	40 95       	com	r20
    2688:	30 95       	com	r19
    268a:	21 95       	neg	r18
    268c:	3f 4f       	sbci	r19, 0xFF	; 255
    268e:	4f 4f       	sbci	r20, 0xFF	; 255
    2690:	5f 4f       	sbci	r21, 0xFF	; 255

00002692 <__divmodsi4_exit>:
    2692:	08 95       	ret

00002694 <__negsi2>:
    2694:	90 95       	com	r25
    2696:	80 95       	com	r24
    2698:	70 95       	com	r23
    269a:	61 95       	neg	r22
    269c:	7f 4f       	sbci	r23, 0xFF	; 255
    269e:	8f 4f       	sbci	r24, 0xFF	; 255
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	08 95       	ret

000026a4 <__tablejump2__>:
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	05 90       	lpm	r0, Z+
    26aa:	f4 91       	lpm	r31, Z
    26ac:	e0 2d       	mov	r30, r0
    26ae:	09 94       	ijmp

000026b0 <__udivmodhi4>:
    26b0:	aa 1b       	sub	r26, r26
    26b2:	bb 1b       	sub	r27, r27
    26b4:	51 e1       	ldi	r21, 0x11	; 17
    26b6:	07 c0       	rjmp	.+14     	; 0x26c6 <__udivmodhi4_ep>

000026b8 <__udivmodhi4_loop>:
    26b8:	aa 1f       	adc	r26, r26
    26ba:	bb 1f       	adc	r27, r27
    26bc:	a6 17       	cp	r26, r22
    26be:	b7 07       	cpc	r27, r23
    26c0:	10 f0       	brcs	.+4      	; 0x26c6 <__udivmodhi4_ep>
    26c2:	a6 1b       	sub	r26, r22
    26c4:	b7 0b       	sbc	r27, r23

000026c6 <__udivmodhi4_ep>:
    26c6:	88 1f       	adc	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	5a 95       	dec	r21
    26cc:	a9 f7       	brne	.-22     	; 0x26b8 <__udivmodhi4_loop>
    26ce:	80 95       	com	r24
    26d0:	90 95       	com	r25
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	08 95       	ret

000026d8 <__udivmodsi4>:
    26d8:	a1 e2       	ldi	r26, 0x21	; 33
    26da:	1a 2e       	mov	r1, r26
    26dc:	aa 1b       	sub	r26, r26
    26de:	bb 1b       	sub	r27, r27
    26e0:	fd 01       	movw	r30, r26
    26e2:	0d c0       	rjmp	.+26     	; 0x26fe <__udivmodsi4_ep>

000026e4 <__udivmodsi4_loop>:
    26e4:	aa 1f       	adc	r26, r26
    26e6:	bb 1f       	adc	r27, r27
    26e8:	ee 1f       	adc	r30, r30
    26ea:	ff 1f       	adc	r31, r31
    26ec:	a2 17       	cp	r26, r18
    26ee:	b3 07       	cpc	r27, r19
    26f0:	e4 07       	cpc	r30, r20
    26f2:	f5 07       	cpc	r31, r21
    26f4:	20 f0       	brcs	.+8      	; 0x26fe <__udivmodsi4_ep>
    26f6:	a2 1b       	sub	r26, r18
    26f8:	b3 0b       	sbc	r27, r19
    26fa:	e4 0b       	sbc	r30, r20
    26fc:	f5 0b       	sbc	r31, r21

000026fe <__udivmodsi4_ep>:
    26fe:	66 1f       	adc	r22, r22
    2700:	77 1f       	adc	r23, r23
    2702:	88 1f       	adc	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	1a 94       	dec	r1
    2708:	69 f7       	brne	.-38     	; 0x26e4 <__udivmodsi4_loop>
    270a:	60 95       	com	r22
    270c:	70 95       	com	r23
    270e:	80 95       	com	r24
    2710:	90 95       	com	r25
    2712:	9b 01       	movw	r18, r22
    2714:	ac 01       	movw	r20, r24
    2716:	bd 01       	movw	r22, r26
    2718:	cf 01       	movw	r24, r30
    271a:	08 95       	ret

0000271c <_exit>:
    271c:	f8 94       	cli

0000271e <__stop_program>:
    271e:	ff cf       	rjmp	.-2      	; 0x271e <__stop_program>
