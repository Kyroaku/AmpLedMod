
AmpLedMod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  0000176a  000017fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000176a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b1  0080020c  0080020c  0000190a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ac  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000697  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f7  00000000  00000000  000031d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  000038cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00003c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f32  00000000  00000000  00004147  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005079  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e6       	ldi	r30, 0x6A	; 106
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 30       	cpi	r26, 0x0C	; 12
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e0       	ldi	r26, 0x0C	; 12
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3b       	cpi	r26, 0xBD	; 189
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3b 01 	call	0x276	; 0x276 <main>
      9e:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <bluetoothGetFrame>:

int8_t bluetoothGetFrame(void *frame, uint8_t max_len)
{
	uint8_t *data = frame;
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
      a6:	20 91 0e 02 	lds	r18, 0x020E
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	40 91 0d 02 	lds	r20, 0x020D
      b0:	50 e0       	ldi	r21, 0x00	; 0
      b2:	42 1b       	sub	r20, r18
      b4:	53 0b       	sbc	r21, r19
	if(len < 0) {
      b6:	0a f0       	brmi	.+2      	; 0xba <bluetoothGetFrame+0x14>
      b8:	91 c0       	rjmp	.+290    	; 0x1dc <bluetoothGetFrame+0x136>
		len += RING_BUFFER_SIZE;
      ba:	53 95       	inc	r21
	}
	if(len < 2) {
      bc:	42 30       	cpi	r20, 0x02	; 2
      be:	51 05       	cpc	r21, r1
      c0:	0c f4       	brge	.+2      	; 0xc4 <bluetoothGetFrame+0x1e>
      c2:	86 c0       	rjmp	.+268    	; 0x1d0 <bluetoothGetFrame+0x12a>
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
	{
		/* Look for start byte. */
		if(RING_BUF_AT(ringBufferReadPos) == 0xFF) {
      c4:	f9 01       	movw	r30, r18
      c6:	e1 5f       	subi	r30, 0xF1	; 241
      c8:	fd 4f       	sbci	r31, 0xFD	; 253
      ca:	70 81       	ld	r23, Z
      cc:	7f 3f       	cpi	r23, 0xFF	; 255
      ce:	b1 f4       	brne	.+44     	; 0xfc <bluetoothGetFrame+0x56>
      d0:	09 c0       	rjmp	.+18     	; 0xe4 <bluetoothGetFrame+0x3e>
      d2:	33 27       	eor	r19, r19
      d4:	f9 01       	movw	r30, r18
      d6:	e1 5f       	subi	r30, 0xF1	; 241
      d8:	fd 4f       	sbci	r31, 0xFD	; 253
      da:	70 81       	ld	r23, Z
      dc:	7f 3f       	cpi	r23, 0xFF	; 255
      de:	71 f4       	brne	.+28     	; 0xfc <bluetoothGetFrame+0x56>
      e0:	a0 93 0e 02 	sts	0x020E, r26
			/* Check if whole frame is in ring buffer. */
			if(len-2 >= RING_BUF_AT(ringBufferReadPos+1)) {
      e4:	42 50       	subi	r20, 0x02	; 2
      e6:	51 09       	sbc	r21, r1
      e8:	f9 01       	movw	r30, r18
      ea:	e1 5f       	subi	r30, 0xF1	; 241
      ec:	fd 4f       	sbci	r31, 0xFD	; 253
      ee:	21 81       	ldd	r18, Z+1	; 0x01
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	42 17       	cp	r20, r18
      f4:	53 07       	cpc	r21, r19
      f6:	a4 f4       	brge	.+40     	; 0x120 <bluetoothGetFrame+0x7a>
				break;
			} else {
				/* Frame is not received yet. */
				return 0;
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	08 95       	ret
			}
		} else {
			RING_BUF_INC(ringBufferReadPos);
      fc:	2f 5f       	subi	r18, 0xFF	; 255
      fe:	3f 4f       	sbci	r19, 0xFF	; 255
     100:	30 78       	andi	r19, 0x80	; 128
     102:	33 23       	and	r19, r19
     104:	2c f4       	brge	.+10     	; 0x110 <bluetoothGetFrame+0x6a>
     106:	21 50       	subi	r18, 0x01	; 1
     108:	31 09       	sbc	r19, r1
     10a:	3f 6f       	ori	r19, 0xFF	; 255
     10c:	2f 5f       	subi	r18, 0xFF	; 255
     10e:	3f 4f       	sbci	r19, 0xFF	; 255
     110:	a2 2f       	mov	r26, r18
			len--;
     112:	41 50       	subi	r20, 0x01	; 1
     114:	51 09       	sbc	r21, r1
	if(len < 2) {
		return 0;
	}
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
     116:	42 30       	cpi	r20, 0x02	; 2
     118:	51 05       	cpc	r21, r1
     11a:	dc f6       	brge	.-74     	; 0xd2 <bluetoothGetFrame+0x2c>
     11c:	20 93 0e 02 	sts	0x020E, r18
			RING_BUF_INC(ringBufferReadPos);
			len--;
		}
	}
	
	len = RING_BUF_AT(ringBufferReadPos+1);
     120:	20 91 0e 02 	lds	r18, 0x020E
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	2f 5f       	subi	r18, 0xFF	; 255
     128:	3f 4f       	sbci	r19, 0xFF	; 255
     12a:	f9 01       	movw	r30, r18
     12c:	e1 5f       	subi	r30, 0xF1	; 241
     12e:	fd 4f       	sbci	r31, 0xFD	; 253
     130:	70 81       	ld	r23, Z
     132:	e7 2f       	mov	r30, r23
     134:	f0 e0       	ldi	r31, 0x00	; 0
	RING_BUF_INC(ringBufferReadPos);
     136:	30 78       	andi	r19, 0x80	; 128
     138:	33 23       	and	r19, r19
     13a:	2c f4       	brge	.+10     	; 0x146 <bluetoothGetFrame+0xa0>
     13c:	21 50       	subi	r18, 0x01	; 1
     13e:	31 09       	sbc	r19, r1
     140:	3f 6f       	ori	r19, 0xFF	; 255
     142:	2f 5f       	subi	r18, 0xFF	; 255
     144:	3f 4f       	sbci	r19, 0xFF	; 255
	RING_BUF_INC(ringBufferReadPos);
     146:	2f 5f       	subi	r18, 0xFF	; 255
     148:	42 2f       	mov	r20, r18
     14a:	40 93 0e 02 	sts	0x020E, r20
	if(len > max_len)
     14e:	46 2f       	mov	r20, r22
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	4e 17       	cp	r20, r30
     154:	5f 07       	cpc	r21, r31
     156:	f4 f1       	brlt	.+124    	; 0x1d4 <bluetoothGetFrame+0x12e>
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
     158:	1e 16       	cp	r1, r30
     15a:	1f 06       	cpc	r1, r31
     15c:	d4 f4       	brge	.+52     	; 0x192 <bluetoothGetFrame+0xec>
     15e:	fc 01       	movw	r30, r24
     160:	ac 01       	movw	r20, r24
     162:	47 0f       	add	r20, r23
     164:	51 1d       	adc	r21, r1
	{
		tmp = RING_BUF_AT(ringBufferReadPos);
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	d9 01       	movw	r26, r18
     16a:	a1 5f       	subi	r26, 0xF1	; 241
     16c:	bd 4f       	sbci	r27, 0xFD	; 253
     16e:	9c 91       	ld	r25, X
		checksum += tmp;
     170:	79 0f       	add	r23, r25
		data[i] = tmp;
     172:	91 93       	st	Z+, r25
		RING_BUF_INC(ringBufferReadPos);
     174:	2f 5f       	subi	r18, 0xFF	; 255
     176:	3f 4f       	sbci	r19, 0xFF	; 255
     178:	30 78       	andi	r19, 0x80	; 128
     17a:	33 23       	and	r19, r19
     17c:	2c f4       	brge	.+10     	; 0x188 <bluetoothGetFrame+0xe2>
     17e:	21 50       	subi	r18, 0x01	; 1
     180:	31 09       	sbc	r19, r1
     182:	3f 6f       	ori	r19, 0xFF	; 255
     184:	2f 5f       	subi	r18, 0xFF	; 255
     186:	3f 4f       	sbci	r19, 0xFF	; 255
	if(len > max_len)
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
     188:	e4 17       	cp	r30, r20
     18a:	f5 07       	cpc	r31, r21
     18c:	61 f7       	brne	.-40     	; 0x166 <bluetoothGetFrame+0xc0>
     18e:	20 93 0e 02 	sts	0x020E, r18
		tmp = RING_BUF_AT(ringBufferReadPos);
		checksum += tmp;
		data[i] = tmp;
		RING_BUF_INC(ringBufferReadPos);
	}
	if(checksum == RING_BUF_AT(ringBufferReadPos)) {
     192:	80 91 0e 02 	lds	r24, 0x020E
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	fc 01       	movw	r30, r24
     19a:	e1 5f       	subi	r30, 0xF1	; 241
     19c:	fd 4f       	sbci	r31, 0xFD	; 253
     19e:	20 81       	ld	r18, Z
     1a0:	27 13       	cpse	r18, r23
     1a2:	0b c0       	rjmp	.+22     	; 0x1ba <bluetoothGetFrame+0x114>
		RING_BUF_INC(ringBufferReadPos);
     1a4:	01 96       	adiw	r24, 0x01	; 1
     1a6:	90 78       	andi	r25, 0x80	; 128
     1a8:	99 23       	and	r25, r25
     1aa:	1c f4       	brge	.+6      	; 0x1b2 <bluetoothGetFrame+0x10c>
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	9f 6f       	ori	r25, 0xFF	; 255
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	80 93 0e 02 	sts	0x020E, r24
		return 1;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	08 95       	ret
	} else {
		RING_BUF_INC(ringBufferReadPos);
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	90 78       	andi	r25, 0x80	; 128
     1be:	99 23       	and	r25, r25
     1c0:	1c f4       	brge	.+6      	; 0x1c8 <bluetoothGetFrame+0x122>
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	9f 6f       	ori	r25, 0xFF	; 255
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	80 93 0e 02 	sts	0x020E, r24
		return 0;
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	08 95       	ret
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
		return 0;
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	08 95       	ret
	
	len = RING_BUF_AT(ringBufferReadPos+1);
	RING_BUF_INC(ringBufferReadPos);
	RING_BUF_INC(ringBufferReadPos);
	if(len > max_len)
		return 0;
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	08 95       	ret
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
		return 0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	08 95       	ret
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
     1dc:	42 30       	cpi	r20, 0x02	; 2
     1de:	51 05       	cpc	r21, r1
     1e0:	0c f0       	brlt	.+2      	; 0x1e4 <bluetoothGetFrame+0x13e>
     1e2:	70 cf       	rjmp	.-288    	; 0xc4 <bluetoothGetFrame+0x1e>
     1e4:	f9 cf       	rjmp	.-14     	; 0x1d8 <bluetoothGetFrame+0x132>

000001e6 <__vector_18>:
		return 0;
	}
}

ISR(USART_RX_vect)
{
     1e6:	1f 92       	push	r1
     1e8:	0f 92       	push	r0
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	0f 92       	push	r0
     1ee:	11 24       	eor	r1, r1
     1f0:	2f 93       	push	r18
     1f2:	3f 93       	push	r19
     1f4:	4f 93       	push	r20
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	ef 93       	push	r30
     1fc:	ff 93       	push	r31
	ringBufferTmp = (ringBufferWritePos+1)%RING_BUFFER_SIZE;
     1fe:	20 91 0d 02 	lds	r18, 0x020D
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	c9 01       	movw	r24, r18
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	90 78       	andi	r25, 0x80	; 128
     20a:	99 23       	and	r25, r25
     20c:	1c f4       	brge	.+6      	; 0x214 <__vector_18+0x2e>
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	9f 6f       	ori	r25, 0xFF	; 255
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	80 93 0c 02 	sts	0x020C, r24
	if(ringBufferTmp != ringBufferReadPos)
     218:	40 91 0e 02 	lds	r20, 0x020E
     21c:	48 17       	cp	r20, r24
     21e:	41 f0       	breq	.+16     	; 0x230 <__vector_18+0x4a>
	{
		ringBuffer[ringBufferWritePos] = UDR0;
     220:	90 91 c6 00 	lds	r25, 0x00C6
     224:	f9 01       	movw	r30, r18
     226:	e1 5f       	subi	r30, 0xF1	; 241
     228:	fd 4f       	sbci	r31, 0xFD	; 253
     22a:	90 83       	st	Z, r25
		ringBufferWritePos = ringBufferTmp;
     22c:	80 93 0d 02 	sts	0x020D, r24
	}
}
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	4f 91       	pop	r20
     23a:	3f 91       	pop	r19
     23c:	2f 91       	pop	r18
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <bluetoothInit>:

void bluetoothInit(unsigned int baudrate)
{
	/* Set baudrate. */
	unsigned int ubrr = (F_CPU / 16 / baudrate - 1);
     248:	9c 01       	movw	r18, r24
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	60 e2       	ldi	r22, 0x20	; 32
     250:	71 ea       	ldi	r23, 0xA1	; 161
     252:	87 e0       	ldi	r24, 0x07	; 7
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__divmodsi4>
     25a:	21 50       	subi	r18, 0x01	; 1
     25c:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
     25e:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)(ubrr);
     262:	20 93 c4 00 	sts	0x00C4, r18
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); /* Enable USART RX, TX, interrupt for RX. */
     266:	88 e9       	ldi	r24, 0x98	; 152
     268:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); /* Set USART 8bit size data. */
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	80 93 c2 00 	sts	0x00C2, r24
	
	sei();
     272:	78 94       	sei
     274:	08 95       	ret

00000276 <main>:
static void handleFrame(frame_t *frame);

// ------------------------------------------------------------------- DEFINITIONS

int main(void)
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	ca 57       	subi	r28, 0x7A	; 122
     280:	d1 09       	sbc	r29, r1
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
	/* Buffer for frame received from controller. */
	frame_t frame;
	
	/* Debug pin indicating that whether module is running. */
	DDRC |= (1<<PC5);
     28c:	3d 9a       	sbi	0x07, 5	; 7
	PORTC |= (1<<PC5);
     28e:	45 9a       	sbi	0x08, 5	; 8
     290:	ef e0       	ldi	r30, 0x0F	; 15
     292:	f3 e0       	ldi	r31, 0x03	; 3
     294:	8f ea       	ldi	r24, 0xAF	; 175
     296:	93 e0       	ldi	r25, 0x03	; 3
	
	/* Reset leds colors. */
	for(int i = 0; i < MAX_LEDS; i++)
	leds[i].val = 0;
     298:	11 92       	st	Z+, r1
     29a:	11 92       	st	Z+, r1
     29c:	11 92       	st	Z+, r1
     29e:	11 92       	st	Z+, r1
	/* Debug pin indicating that whether module is running. */
	DDRC |= (1<<PC5);
	PORTC |= (1<<PC5);
	
	/* Reset leds colors. */
	for(int i = 0; i < MAX_LEDS; i++)
     2a0:	e8 17       	cp	r30, r24
     2a2:	f9 07       	cpc	r31, r25
     2a4:	c9 f7       	brne	.-14     	; 0x298 <main+0x22>
	leds[i].val = 0;
	
	/* Init USART for bluetooth driver with 38400 baudrate. */
	bluetoothInit(38400);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	96 e9       	ldi	r25, 0x96	; 150
     2aa:	0e 94 24 01 	call	0x248	; 0x248 <bluetoothInit>
	
	/* Init ws2812b driver. */
	wsInit();
     2ae:	0e 94 00 09 	call	0x1200	; 0x1200 <wsInit>
	
	/* Seq leds animation. */
	seqSetFunction(eSeqPingPong);
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <seqSetFunction>
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     2b8:	c1 2c       	mov	r12, r1
     2ba:	d1 2c       	mov	r13, r1
	seqSetFunction(eSeqPingPong);
	
	while (1)
	{
		/* Send colors to ws2812b leds. */
		wsSend(leds, numLeds);
     2bc:	60 91 00 01 	lds	r22, 0x0100
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	8f e0       	ldi	r24, 0x0F	; 15
     2c4:	93 e0       	ldi	r25, 0x03	; 3
     2c6:	0e 94 02 09 	call	0x1204	; 0x1204 <wsSend>
		
		/* Update color array (animate). */
		seqUpdate(leds, numLeds);
     2ca:	60 91 00 01 	lds	r22, 0x0100
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	8f e0       	ldi	r24, 0x0F	; 15
     2d2:	93 e0       	ldi	r25, 0x03	; 3
     2d4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <seqUpdate>
		
		/* Handle command, if new frame has been received. */
		if(bluetoothGetFrame(&frame, sizeof(frame))) {
     2d8:	6a e7       	ldi	r22, 0x7A	; 122
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 53 00 	call	0xa6	; 0xa6 <bluetoothGetFrame>
     2e2:	88 23       	and	r24, r24
     2e4:	79 f1       	breq	.+94     	; 0x344 <main+0xce>
	}
}

static void handleFrame(frame_t *frame)
{
	switch(frame->command)
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	21 f0       	breq	.+8      	; 0x2f4 <main+0x7e>
     2ec:	38 f0       	brcs	.+14     	; 0x2fc <main+0x86>
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	31 f1       	breq	.+76     	; 0x33e <main+0xc8>
     2f2:	28 c0       	rjmp	.+80     	; 0x344 <main+0xce>
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	81 11       	cpse	r24, r1
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <main+0x8e>
     2fa:	24 c0       	rjmp	.+72     	; 0x344 <main+0xce>
static void handleFrame(frame_t *frame)
{
	switch(frame->command)
	{
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <seqSetFunction>
     302:	20 c0       	rjmp	.+64     	; 0x344 <main+0xce>
     304:	8e 01       	movw	r16, r28
     306:	0b 5f       	subi	r16, 0xFB	; 251
     308:	1f 4f       	sbci	r17, 0xFF	; 255
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     30a:	ec 2c       	mov	r14, r12
     30c:	fd 2c       	mov	r15, r13
		{
			seqSetColorRGB(i, frame->data[i*3+1], frame->data[i*3+2], frame->data[i*3+3]);
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	e8 1a       	sub	r14, r24
     312:	f8 0a       	sbc	r15, r24
     314:	d8 01       	movw	r26, r16
     316:	11 97       	sbiw	r26, 0x01	; 1
     318:	c8 01       	movw	r24, r16
     31a:	02 97       	sbiw	r24, 0x02	; 2
     31c:	f8 01       	movw	r30, r16
     31e:	20 81       	ld	r18, Z
     320:	4c 91       	ld	r20, X
     322:	fc 01       	movw	r30, r24
     324:	60 81       	ld	r22, Z
     326:	8f ef       	ldi	r24, 0xFF	; 255
     328:	8e 0d       	add	r24, r14
     32a:	0e 94 ef 08 	call	0x11de	; 0x11de <seqSetColorRGB>
     32e:	0d 5f       	subi	r16, 0xFD	; 253
     330:	1f 4f       	sbci	r17, 0xFF	; 255
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	e8 16       	cp	r14, r24
     338:	f9 06       	cpc	r15, r25
     33a:	4c f3       	brlt	.-46     	; 0x30e <main+0x98>
     33c:	03 c0       	rjmp	.+6      	; 0x344 <main+0xce>
		
		case eSetAnimationSpeed:
		break;
		
		case eSetLedsCount:
		numLeds = frame->data[0];
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	80 93 00 01 	sts	0x0100, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     344:	8f e1       	ldi	r24, 0x1F	; 31
     346:	9e e4       	ldi	r25, 0x4E	; 78
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <main+0xd2>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0xd8>
     34e:	00 00       	nop
     350:	b5 cf       	rjmp	.-150    	; 0x2bc <main+0x46>

00000352 <seqPingPongFunc>:
}

// ------------------------------------------------------------ STATIC DEFINITIONS

static void seqPingPongFunc(color_t *leds, int num_leds)
{
     352:	2f 92       	push	r2
     354:	3f 92       	push	r3
     356:	4f 92       	push	r4
     358:	5f 92       	push	r5
     35a:	6f 92       	push	r6
     35c:	7f 92       	push	r7
     35e:	8f 92       	push	r8
     360:	9f 92       	push	r9
     362:	af 92       	push	r10
     364:	bf 92       	push	r11
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	67 97       	sbiw	r28, 0x17	; 23
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	8c 01       	movw	r16, r24
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t softness = 10;
	
	timer++;
     388:	90 91 b2 03 	lds	r25, 0x03B2
     38c:	9f 5f       	subi	r25, 0xFF	; 255
	if(timer < 2) return;
     38e:	92 30       	cpi	r25, 0x02	; 2
     390:	18 f4       	brcc	.+6      	; 0x398 <seqPingPongFunc+0x46>
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t softness = 10;
	
	timer++;
     392:	90 93 b2 03 	sts	0x03B2, r25
     396:	f7 c1       	rjmp	.+1006   	; 0x786 <__stack+0x287>
	if(timer < 2) return;
	else timer = 0;
     398:	10 92 b2 03 	sts	0x03B2, r1
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
	{
		float k = (float)(i+1)/softness;
		if(!led_dir) {
     39c:	d0 90 b1 03 	lds	r13, 0x03B1
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
		}
		else {
			if(led_i+i >= num_leds || led_i+i < 0) continue;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     3a0:	80 91 af 03 	lds	r24, 0x03AF
     3a4:	28 2f       	mov	r18, r24
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	80 91 b0 03 	lds	r24, 0x03B0
     3ac:	48 2f       	mov	r20, r24
     3ae:	88 0f       	add	r24, r24
     3b0:	55 0b       	sbc	r21, r21
     3b2:	5b 8b       	std	Y+19, r21	; 0x13
     3b4:	4a 8b       	std	Y+18, r20	; 0x12
     3b6:	44 0f       	add	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	44 0f       	add	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	ca 01       	movw	r24, r20
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	48 01       	movw	r8, r16
     3c4:	88 0e       	add	r8, r24
     3c6:	99 1e       	adc	r9, r25
     3c8:	18 01       	movw	r2, r16
     3ca:	24 0e       	add	r2, r20
     3cc:	35 1e       	adc	r3, r21
     3ce:	4e 5f       	subi	r20, 0xFE	; 254
     3d0:	5f 4f       	sbci	r21, 0xFF	; 255
     3d2:	04 0f       	add	r16, r20
     3d4:	15 1f       	adc	r17, r21
     3d6:	24 01       	movw	r4, r8
	if(timer < 2) return;
	else timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
     3d8:	1e 82       	std	Y+6, r1	; 0x06
     3da:	1d 82       	std	Y+5, r1	; 0x05
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
		}
		else {
			if(led_i+i >= num_leds || led_i+i < 0) continue;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     3dc:	c9 01       	movw	r24, r18
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	dc 01       	movw	r26, r24
     3e8:	af 5f       	subi	r26, 0xFF	; 255
     3ea:	be 4f       	sbci	r27, 0xFE	; 254
     3ec:	bd 8b       	std	Y+21, r27	; 0x15
     3ee:	ac 8b       	std	Y+20, r26	; 0x14
     3f0:	ea 89       	ldd	r30, Y+18	; 0x12
     3f2:	fb 89       	ldd	r31, Y+19	; 0x13
     3f4:	31 96       	adiw	r30, 0x01	; 1
     3f6:	fa 83       	std	Y+2, r31	; 0x02
     3f8:	e9 83       	std	Y+1, r30	; 0x01
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	3f 8b       	std	Y+23, r19	; 0x17
     400:	2e 8b       	std	Y+22, r18	; 0x16
     402:	d9 8a       	std	Y+17, r13	; 0x11
     404:	54 01       	movw	r10, r8
     406:	41 01       	movw	r8, r2
     408:	32 01       	movw	r6, r4
     40a:	28 01       	movw	r4, r16
     40c:	6f 01       	movw	r12, r30
     40e:	7b 01       	movw	r14, r22
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
	{
		float k = (float)(i+1)/softness;
     410:	4e 89       	ldd	r20, Y+22	; 0x16
     412:	5f 89       	ldd	r21, Y+23	; 0x17
     414:	4f 5f       	subi	r20, 0xFF	; 255
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	5f 8b       	std	Y+23, r21	; 0x17
     41a:	4e 8b       	std	Y+22, r20	; 0x16
     41c:	ba 01       	movw	r22, r20
     41e:	55 0f       	add	r21, r21
     420:	88 0b       	sbc	r24, r24
     422:	99 0b       	sbc	r25, r25
     424:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e2       	ldi	r20, 0x20	; 32
     42e:	51 e4       	ldi	r21, 0x41	; 65
     430:	0e 94 ae 09 	call	0x135c	; 0x135c <__divsf3>
     434:	69 83       	std	Y+1, r22	; 0x01
     436:	7a 83       	std	Y+2, r23	; 0x02
     438:	8b 83       	std	Y+3, r24	; 0x03
     43a:	9c 83       	std	Y+4, r25	; 0x04
		if(!led_dir) {
     43c:	59 89       	ldd	r21, Y+17	; 0x11
     43e:	51 11       	cpse	r21, r1
     440:	aa c0       	rjmp	.+340    	; 0x596 <__stack+0x97>
     442:	c6 01       	movw	r24, r12
     444:	ae 89       	ldd	r26, Y+22	; 0x16
     446:	bf 89       	ldd	r27, Y+23	; 0x17
     448:	8a 1b       	sub	r24, r26
     44a:	9b 0b       	sbc	r25, r27
			if(led_i-i < 0 || led_i-i >= num_leds) continue;
     44c:	0a f4       	brpl	.+2      	; 0x450 <seqPingPongFunc+0xfe>
     44e:	4f c1       	rjmp	.+670    	; 0x6ee <__stack+0x1ef>
     450:	8e 15       	cp	r24, r14
     452:	9f 05       	cpc	r25, r15
     454:	0c f0       	brlt	.+2      	; 0x458 <seqPingPongFunc+0x106>
     456:	4b c1       	rjmp	.+662    	; 0x6ee <__stack+0x1ef>
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     458:	ac 89       	ldd	r26, Y+20	; 0x14
     45a:	bd 89       	ldd	r27, Y+21	; 0x15
     45c:	2d 91       	ld	r18, X+
     45e:	3d 91       	ld	r19, X+
     460:	4d 91       	ld	r20, X+
     462:	5c 91       	ld	r21, X
     464:	2d 83       	std	Y+5, r18	; 0x05
     466:	3e 83       	std	Y+6, r19	; 0x06
     468:	4f 83       	std	Y+7, r20	; 0x07
     46a:	58 87       	std	Y+8, r21	; 0x08
     46c:	29 81       	ldd	r18, Y+1	; 0x01
     46e:	3a 81       	ldd	r19, Y+2	; 0x02
     470:	4b 81       	ldd	r20, Y+3	; 0x03
     472:	5c 81       	ldd	r21, Y+4	; 0x04
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	80 e8       	ldi	r24, 0x80	; 128
     47a:	9f e3       	ldi	r25, 0x3F	; 63
     47c:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     480:	69 87       	std	Y+9, r22	; 0x09
     482:	7a 87       	std	Y+10, r23	; 0x0a
     484:	8b 87       	std	Y+11, r24	; 0x0b
     486:	9c 87       	std	Y+12, r25	; 0x0c
     488:	6d 81       	ldd	r22, Y+5	; 0x05
     48a:	7e 81       	ldd	r23, Y+6	; 0x06
     48c:	8f 81       	ldd	r24, Y+7	; 0x07
     48e:	98 85       	ldd	r25, Y+8	; 0x08
     490:	77 27       	eor	r23, r23
     492:	88 27       	eor	r24, r24
     494:	99 27       	eor	r25, r25
     496:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     49a:	29 81       	ldd	r18, Y+1	; 0x01
     49c:	3a 81       	ldd	r19, Y+2	; 0x02
     49e:	4b 81       	ldd	r20, Y+3	; 0x03
     4a0:	5c 81       	ldd	r21, Y+4	; 0x04
     4a2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     4a6:	6d 87       	std	Y+13, r22	; 0x0d
     4a8:	7e 87       	std	Y+14, r23	; 0x0e
     4aa:	8f 87       	std	Y+15, r24	; 0x0f
     4ac:	98 8b       	std	Y+16, r25	; 0x10
     4ae:	f5 01       	movw	r30, r10
     4b0:	60 81       	ld	r22, Z
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	69 85       	ldd	r22, Y+9	; 0x09
     4c2:	7a 85       	ldd	r23, Y+10	; 0x0a
     4c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     4c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     4c8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     4cc:	9b 01       	movw	r18, r22
     4ce:	ac 01       	movw	r20, r24
     4d0:	6d 85       	ldd	r22, Y+13	; 0x0d
     4d2:	7e 85       	ldd	r23, Y+14	; 0x0e
     4d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4d6:	98 89       	ldd	r25, Y+16	; 0x10
     4d8:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     4dc:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     4e0:	d5 01       	movw	r26, r10
     4e2:	6c 93       	st	X, r22
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
     4e4:	be 81       	ldd	r27, Y+6	; 0x06
     4e6:	6b 2f       	mov	r22, r27
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     4f2:	29 81       	ldd	r18, Y+1	; 0x01
     4f4:	3a 81       	ldd	r19, Y+2	; 0x02
     4f6:	4b 81       	ldd	r20, Y+3	; 0x03
     4f8:	5c 81       	ldd	r21, Y+4	; 0x04
     4fa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     4fe:	6d 87       	std	Y+13, r22	; 0x0d
     500:	7e 87       	std	Y+14, r23	; 0x0e
     502:	8f 87       	std	Y+15, r24	; 0x0f
     504:	98 8b       	std	Y+16, r25	; 0x10
     506:	f2 01       	movw	r30, r4
     508:	60 81       	ld	r22, Z
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     514:	9b 01       	movw	r18, r22
     516:	ac 01       	movw	r20, r24
     518:	69 85       	ldd	r22, Y+9	; 0x09
     51a:	7a 85       	ldd	r23, Y+10	; 0x0a
     51c:	8b 85       	ldd	r24, Y+11	; 0x0b
     51e:	9c 85       	ldd	r25, Y+12	; 0x0c
     520:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	6d 85       	ldd	r22, Y+13	; 0x0d
     52a:	7e 85       	ldd	r23, Y+14	; 0x0e
     52c:	8f 85       	ldd	r24, Y+15	; 0x0f
     52e:	98 89       	ldd	r25, Y+16	; 0x10
     530:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     534:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     538:	d2 01       	movw	r26, r4
     53a:	6c 93       	st	X, r22
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
     53c:	bf 81       	ldd	r27, Y+7	; 0x07
     53e:	6b 2f       	mov	r22, r27
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     54a:	29 81       	ldd	r18, Y+1	; 0x01
     54c:	3a 81       	ldd	r19, Y+2	; 0x02
     54e:	4b 81       	ldd	r20, Y+3	; 0x03
     550:	5c 81       	ldd	r21, Y+4	; 0x04
     552:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     556:	69 83       	std	Y+1, r22	; 0x01
     558:	7a 83       	std	Y+2, r23	; 0x02
     55a:	8b 83       	std	Y+3, r24	; 0x03
     55c:	9c 83       	std	Y+4, r25	; 0x04
     55e:	f4 01       	movw	r30, r8
     560:	60 81       	ld	r22, Z
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	69 85       	ldd	r22, Y+9	; 0x09
     572:	7a 85       	ldd	r23, Y+10	; 0x0a
     574:	8b 85       	ldd	r24, Y+11	; 0x0b
     576:	9c 85       	ldd	r25, Y+12	; 0x0c
     578:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     58c:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     590:	d4 01       	movw	r26, r8
     592:	6c 93       	st	X, r22
     594:	ac c0       	rjmp	.+344    	; 0x6ee <__stack+0x1ef>
     596:	8a 89       	ldd	r24, Y+18	; 0x12
     598:	9b 89       	ldd	r25, Y+19	; 0x13
     59a:	ee 89       	ldd	r30, Y+22	; 0x16
     59c:	ff 89       	ldd	r31, Y+23	; 0x17
     59e:	8e 0f       	add	r24, r30
     5a0:	9f 1f       	adc	r25, r31
     5a2:	01 97       	sbiw	r24, 0x01	; 1
		}
		else {
			if(led_i+i >= num_leds || led_i+i < 0) continue;
     5a4:	8e 15       	cp	r24, r14
     5a6:	9f 05       	cpc	r25, r15
     5a8:	0c f0       	brlt	.+2      	; 0x5ac <__stack+0xad>
     5aa:	a1 c0       	rjmp	.+322    	; 0x6ee <__stack+0x1ef>
     5ac:	99 23       	and	r25, r25
     5ae:	0c f4       	brge	.+2      	; 0x5b2 <__stack+0xb3>
     5b0:	9e c0       	rjmp	.+316    	; 0x6ee <__stack+0x1ef>
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     5b2:	ac 89       	ldd	r26, Y+20	; 0x14
     5b4:	bd 89       	ldd	r27, Y+21	; 0x15
     5b6:	2d 91       	ld	r18, X+
     5b8:	3d 91       	ld	r19, X+
     5ba:	4d 91       	ld	r20, X+
     5bc:	5c 91       	ld	r21, X
     5be:	2d 83       	std	Y+5, r18	; 0x05
     5c0:	3e 83       	std	Y+6, r19	; 0x06
     5c2:	4f 83       	std	Y+7, r20	; 0x07
     5c4:	58 87       	std	Y+8, r21	; 0x08
     5c6:	29 81       	ldd	r18, Y+1	; 0x01
     5c8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ca:	4b 81       	ldd	r20, Y+3	; 0x03
     5cc:	5c 81       	ldd	r21, Y+4	; 0x04
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e8       	ldi	r24, 0x80	; 128
     5d4:	9f e3       	ldi	r25, 0x3F	; 63
     5d6:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     5da:	69 87       	std	Y+9, r22	; 0x09
     5dc:	7a 87       	std	Y+10, r23	; 0x0a
     5de:	8b 87       	std	Y+11, r24	; 0x0b
     5e0:	9c 87       	std	Y+12, r25	; 0x0c
     5e2:	6d 81       	ldd	r22, Y+5	; 0x05
     5e4:	7e 81       	ldd	r23, Y+6	; 0x06
     5e6:	8f 81       	ldd	r24, Y+7	; 0x07
     5e8:	98 85       	ldd	r25, Y+8	; 0x08
     5ea:	77 27       	eor	r23, r23
     5ec:	88 27       	eor	r24, r24
     5ee:	99 27       	eor	r25, r25
     5f0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     5f4:	29 81       	ldd	r18, Y+1	; 0x01
     5f6:	3a 81       	ldd	r19, Y+2	; 0x02
     5f8:	4b 81       	ldd	r20, Y+3	; 0x03
     5fa:	5c 81       	ldd	r21, Y+4	; 0x04
     5fc:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     600:	6d 87       	std	Y+13, r22	; 0x0d
     602:	7e 87       	std	Y+14, r23	; 0x0e
     604:	8f 87       	std	Y+15, r24	; 0x0f
     606:	98 8b       	std	Y+16, r25	; 0x10
     608:	f3 01       	movw	r30, r6
     60a:	60 81       	ld	r22, Z
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     616:	9b 01       	movw	r18, r22
     618:	ac 01       	movw	r20, r24
     61a:	69 85       	ldd	r22, Y+9	; 0x09
     61c:	7a 85       	ldd	r23, Y+10	; 0x0a
     61e:	8b 85       	ldd	r24, Y+11	; 0x0b
     620:	9c 85       	ldd	r25, Y+12	; 0x0c
     622:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     626:	9b 01       	movw	r18, r22
     628:	ac 01       	movw	r20, r24
     62a:	6d 85       	ldd	r22, Y+13	; 0x0d
     62c:	7e 85       	ldd	r23, Y+14	; 0x0e
     62e:	8f 85       	ldd	r24, Y+15	; 0x0f
     630:	98 89       	ldd	r25, Y+16	; 0x10
     632:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     636:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     63a:	d3 01       	movw	r26, r6
     63c:	6c 93       	st	X, r22
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
     63e:	be 81       	ldd	r27, Y+6	; 0x06
     640:	6b 2f       	mov	r22, r27
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     64c:	29 81       	ldd	r18, Y+1	; 0x01
     64e:	3a 81       	ldd	r19, Y+2	; 0x02
     650:	4b 81       	ldd	r20, Y+3	; 0x03
     652:	5c 81       	ldd	r21, Y+4	; 0x04
     654:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     658:	6d 87       	std	Y+13, r22	; 0x0d
     65a:	7e 87       	std	Y+14, r23	; 0x0e
     65c:	8f 87       	std	Y+15, r24	; 0x0f
     65e:	98 8b       	std	Y+16, r25	; 0x10
     660:	f8 01       	movw	r30, r16
     662:	60 81       	ld	r22, Z
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     66e:	9b 01       	movw	r18, r22
     670:	ac 01       	movw	r20, r24
     672:	69 85       	ldd	r22, Y+9	; 0x09
     674:	7a 85       	ldd	r23, Y+10	; 0x0a
     676:	8b 85       	ldd	r24, Y+11	; 0x0b
     678:	9c 85       	ldd	r25, Y+12	; 0x0c
     67a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	6d 85       	ldd	r22, Y+13	; 0x0d
     684:	7e 85       	ldd	r23, Y+14	; 0x0e
     686:	8f 85       	ldd	r24, Y+15	; 0x0f
     688:	98 89       	ldd	r25, Y+16	; 0x10
     68a:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     68e:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     692:	d8 01       	movw	r26, r16
     694:	6c 93       	st	X, r22
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
     696:	bf 81       	ldd	r27, Y+7	; 0x07
     698:	6b 2f       	mov	r22, r27
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     6a4:	29 81       	ldd	r18, Y+1	; 0x01
     6a6:	3a 81       	ldd	r19, Y+2	; 0x02
     6a8:	4b 81       	ldd	r20, Y+3	; 0x03
     6aa:	5c 81       	ldd	r21, Y+4	; 0x04
     6ac:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     6b0:	69 83       	std	Y+1, r22	; 0x01
     6b2:	7a 83       	std	Y+2, r23	; 0x02
     6b4:	8b 83       	std	Y+3, r24	; 0x03
     6b6:	9c 83       	std	Y+4, r25	; 0x04
     6b8:	f1 01       	movw	r30, r2
     6ba:	60 81       	ld	r22, Z
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	69 85       	ldd	r22, Y+9	; 0x09
     6cc:	7a 85       	ldd	r23, Y+10	; 0x0a
     6ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     6d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6d2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	69 81       	ldd	r22, Y+1	; 0x01
     6dc:	7a 81       	ldd	r23, Y+2	; 0x02
     6de:	8b 81       	ldd	r24, Y+3	; 0x03
     6e0:	9c 81       	ldd	r25, Y+4	; 0x04
     6e2:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     6e6:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     6ea:	d1 01       	movw	r26, r2
     6ec:	6c 93       	st	X, r22
     6ee:	b4 e0       	ldi	r27, 0x04	; 4
     6f0:	ab 1a       	sub	r10, r27
     6f2:	b1 08       	sbc	r11, r1
     6f4:	e4 e0       	ldi	r30, 0x04	; 4
     6f6:	8e 1a       	sub	r8, r30
     6f8:	91 08       	sbc	r9, r1
     6fa:	f4 e0       	ldi	r31, 0x04	; 4
     6fc:	4f 1a       	sub	r4, r31
     6fe:	51 08       	sbc	r5, r1
     700:	24 e0       	ldi	r18, 0x04	; 4
     702:	62 0e       	add	r6, r18
     704:	71 1c       	adc	r7, r1
     706:	34 e0       	ldi	r19, 0x04	; 4
     708:	23 0e       	add	r2, r19
     70a:	31 1c       	adc	r3, r1
     70c:	0c 5f       	subi	r16, 0xFC	; 252
     70e:	1f 4f       	sbci	r17, 0xFF	; 255
	if(timer < 2) return;
	else timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
     710:	4e 89       	ldd	r20, Y+22	; 0x16
     712:	5f 89       	ldd	r21, Y+23	; 0x17
     714:	4a 30       	cpi	r20, 0x0A	; 10
     716:	51 05       	cpc	r21, r1
     718:	09 f0       	breq	.+2      	; 0x71c <__stack+0x21d>
     71a:	7a ce       	rjmp	.-780    	; 0x410 <seqPingPongFunc+0xbe>
     71c:	57 01       	movw	r10, r14
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     71e:	20 91 b1 03 	lds	r18, 0x03B1
     722:	22 23       	and	r18, r18
     724:	31 f0       	breq	.+12     	; 0x732 <__stack+0x233>
     726:	80 91 b0 03 	lds	r24, 0x03B0
     72a:	81 50       	subi	r24, 0x01	; 1
     72c:	80 93 b0 03 	sts	0x03B0, r24
     730:	05 c0       	rjmp	.+10     	; 0x73c <__stack+0x23d>
	else led_i++;
     732:	80 91 b0 03 	lds	r24, 0x03B0
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	80 93 b0 03 	sts	0x03B0, r24
	if(led_i >= num_leds + softness || led_i < -softness) {
     73c:	80 91 b0 03 	lds	r24, 0x03B0
     740:	08 2e       	mov	r0, r24
     742:	00 0c       	add	r0, r0
     744:	99 0b       	sbc	r25, r25
     746:	a5 01       	movw	r20, r10
     748:	46 5f       	subi	r20, 0xF6	; 246
     74a:	5f 4f       	sbci	r21, 0xFF	; 255
     74c:	84 17       	cp	r24, r20
     74e:	95 07       	cpc	r25, r21
     750:	1c f4       	brge	.+6      	; 0x758 <__stack+0x259>
     752:	86 3f       	cpi	r24, 0xF6	; 246
     754:	9f 4f       	sbci	r25, 0xFF	; 255
     756:	bc f4       	brge	.+46     	; 0x786 <__stack+0x287>
		color_i = (color_i+1)%numColors;
     758:	80 91 af 03 	lds	r24, 0x03AF
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	60 91 01 02 	lds	r22, 0x0201
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__divmodhi4>
     76a:	80 93 af 03 	sts	0x03AF, r24
		led_dir = led_dir == 1 ? 0 : 1;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	21 30       	cpi	r18, 0x01	; 1
     772:	09 f4       	brne	.+2      	; 0x776 <__stack+0x277>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	80 93 b1 03 	sts	0x03B1, r24
		led_i = 0 + led_dir*num_leds-1;
     77a:	8a 9d       	mul	r24, r10
     77c:	80 2d       	mov	r24, r0
     77e:	11 24       	eor	r1, r1
     780:	81 50       	subi	r24, 0x01	; 1
     782:	80 93 b0 03 	sts	0x03B0, r24
	}
}
     786:	67 96       	adiw	r28, 0x17	; 23
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	9f 90       	pop	r9
     7a8:	8f 90       	pop	r8
     7aa:	7f 90       	pop	r7
     7ac:	6f 90       	pop	r6
     7ae:	5f 90       	pop	r5
     7b0:	4f 90       	pop	r4
     7b2:	3f 90       	pop	r3
     7b4:	2f 90       	pop	r2
     7b6:	08 95       	ret

000007b8 <seqDoublePingPongFunc>:

static void seqDoublePingPongFunc(color_t *leds, int num_leds)
{
     7b8:	2f 92       	push	r2
     7ba:	3f 92       	push	r3
     7bc:	4f 92       	push	r4
     7be:	5f 92       	push	r5
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	a9 97       	sbiw	r28, 0x29	; 41
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	8c 01       	movw	r16, r24
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t softness = 10;
	
	timer++;
     7ee:	90 91 b6 03 	lds	r25, 0x03B6
     7f2:	9f 5f       	subi	r25, 0xFF	; 255
	if(timer < 2) return;
     7f4:	92 30       	cpi	r25, 0x02	; 2
     7f6:	18 f4       	brcc	.+6      	; 0x7fe <seqDoublePingPongFunc+0x46>
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t softness = 10;
	
	timer++;
     7f8:	90 93 b6 03 	sts	0x03B6, r25
     7fc:	f4 c2       	rjmp	.+1512   	; 0xde6 <seqDoublePingPongFunc+0x62e>
	if(timer < 2) return;
	else timer = 0;
     7fe:	10 92 b6 03 	sts	0x03B6, r1
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
	{
		float k = (float)(i+1)/softness;
		if(!led_dir) {
     802:	20 91 b5 03 	lds	r18, 0x03B5
     806:	2d 8b       	std	Y+21, r18	; 0x15
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
		}
		else {
			if(led_i+i > num_leds/2 || led_i+i < 0) continue;
     808:	20 91 b4 03 	lds	r18, 0x03B4
     80c:	cb 01       	movw	r24, r22
     80e:	77 23       	and	r23, r23
     810:	0c f4       	brge	.+2      	; 0x814 <seqDoublePingPongFunc+0x5c>
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	7f a3       	std	Y+39, r23	; 0x27
     816:	6e a3       	std	Y+38, r22	; 0x26
     818:	a8 01       	movw	r20, r16
     81a:	bc 01       	movw	r22, r24
     81c:	75 95       	asr	r23
     81e:	67 95       	ror	r22
     820:	7f 8f       	std	Y+31, r23	; 0x1f
     822:	6e 8f       	std	Y+30, r22	; 0x1e
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     824:	80 91 b3 03 	lds	r24, 0x03B3
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	a2 2f       	mov	r26, r18
     82c:	22 0f       	add	r18, r18
     82e:	bb 0b       	sbc	r27, r27
     830:	b9 a3       	std	Y+33, r27	; 0x21
     832:	a8 a3       	std	Y+32, r26	; 0x20
     834:	9d 01       	movw	r18, r26
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	22 0f       	add	r18, r18
     83c:	33 1f       	adc	r19, r19
     83e:	b9 01       	movw	r22, r18
     840:	6f 5f       	subi	r22, 0xFF	; 255
     842:	7f 4f       	sbci	r23, 0xFF	; 255
     844:	48 01       	movw	r8, r16
     846:	86 0e       	add	r8, r22
     848:	97 1e       	adc	r9, r23
     84a:	68 01       	movw	r12, r16
     84c:	c2 0e       	add	r12, r18
     84e:	d3 1e       	adc	r13, r19
     850:	2e 5f       	subi	r18, 0xFE	; 254
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	38 01       	movw	r6, r16
     856:	62 0e       	add	r6, r18
     858:	73 1e       	adc	r7, r19
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
			
			leds[num_leds-1-led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.r;
     85a:	2e a1       	ldd	r18, Y+38	; 0x26
     85c:	3f a1       	ldd	r19, Y+39	; 0x27
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	31 09       	sbc	r19, r1
     862:	2a 1b       	sub	r18, r26
     864:	3b 0b       	sbc	r19, r27
     866:	22 0f       	add	r18, r18
     868:	33 1f       	adc	r19, r19
     86a:	22 0f       	add	r18, r18
     86c:	33 1f       	adc	r19, r19
     86e:	b9 01       	movw	r22, r18
     870:	6f 5f       	subi	r22, 0xFF	; 255
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	78 01       	movw	r14, r16
     876:	e6 0e       	add	r14, r22
     878:	f7 1e       	adc	r15, r23
     87a:	18 01       	movw	r2, r16
     87c:	22 0e       	add	r2, r18
     87e:	33 1e       	adc	r3, r19
     880:	89 01       	movw	r16, r18
     882:	0e 5f       	subi	r16, 0xFE	; 254
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	04 0f       	add	r16, r20
     888:	15 1f       	adc	r17, r21
     88a:	18 8b       	std	Y+16, r17	; 0x10
     88c:	0f 87       	std	Y+15, r16	; 0x0f
     88e:	3e 86       	std	Y+14, r3	; 0x0e
     890:	2d 86       	std	Y+13, r2	; 0x0d
     892:	fc 86       	std	Y+12, r15	; 0x0c
     894:	eb 86       	std	Y+11, r14	; 0x0b
     896:	da 86       	std	Y+10, r13	; 0x0a
     898:	c9 86       	std	Y+9, r12	; 0x09
	else timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
     89a:	1a 82       	std	Y+2, r1	; 0x02
     89c:	19 82       	std	Y+1, r1	; 0x01
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
		}
		else {
			if(led_i+i > num_leds/2 || led_i+i < 0) continue;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	fc 01       	movw	r30, r24
     8a8:	ef 5f       	subi	r30, 0xFF	; 255
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	fd a3       	std	Y+37, r31	; 0x25
     8ae:	ec a3       	std	Y+36, r30	; 0x24
     8b0:	11 96       	adiw	r26, 0x01	; 1
     8b2:	bb a3       	std	Y+35, r27	; 0x23
     8b4:	aa a3       	std	Y+34, r26	; 0x22
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	39 a7       	std	Y+41, r19	; 0x29
     8bc:	28 a7       	std	Y+40, r18	; 0x28
     8be:	c4 01       	movw	r24, r8
     8c0:	53 01       	movw	r10, r6
     8c2:	34 01       	movw	r6, r8
     8c4:	47 01       	movw	r8, r14
     8c6:	71 01       	movw	r14, r2
     8c8:	28 01       	movw	r4, r16
     8ca:	85 01       	movw	r16, r10
     8cc:	1c 01       	movw	r2, r24
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
	{
		float k = (float)(i+1)/softness;
     8ce:	48 a5       	ldd	r20, Y+40	; 0x28
     8d0:	59 a5       	ldd	r21, Y+41	; 0x29
     8d2:	4f 5f       	subi	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	59 a7       	std	Y+41, r21	; 0x29
     8d8:	48 a7       	std	Y+40, r20	; 0x28
     8da:	ba 01       	movw	r22, r20
     8dc:	55 0f       	add	r21, r21
     8de:	88 0b       	sbc	r24, r24
     8e0:	99 0b       	sbc	r25, r25
     8e2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e2       	ldi	r20, 0x20	; 32
     8ec:	51 e4       	ldi	r21, 0x41	; 65
     8ee:	0e 94 ae 09 	call	0x135c	; 0x135c <__divsf3>
     8f2:	69 83       	std	Y+1, r22	; 0x01
     8f4:	7a 83       	std	Y+2, r23	; 0x02
     8f6:	8b 83       	std	Y+3, r24	; 0x03
     8f8:	9c 83       	std	Y+4, r25	; 0x04
		if(!led_dir) {
     8fa:	5d 89       	ldd	r21, Y+21	; 0x15
     8fc:	51 11       	cpse	r21, r1
     8fe:	fc c0       	rjmp	.+504    	; 0xaf8 <seqDoublePingPongFunc+0x340>
     900:	8a a1       	ldd	r24, Y+34	; 0x22
     902:	9b a1       	ldd	r25, Y+35	; 0x23
     904:	68 a5       	ldd	r22, Y+40	; 0x28
     906:	79 a5       	ldd	r23, Y+41	; 0x29
     908:	86 1b       	sub	r24, r22
     90a:	97 0b       	sbc	r25, r23
			if(led_i-i < 0 || led_i-i > num_leds/2) continue;
     90c:	0a f4       	brpl	.+2      	; 0x910 <seqDoublePingPongFunc+0x158>
     90e:	f9 c1       	rjmp	.+1010   	; 0xd02 <seqDoublePingPongFunc+0x54a>
     910:	ae 8d       	ldd	r26, Y+30	; 0x1e
     912:	bf 8d       	ldd	r27, Y+31	; 0x1f
     914:	a8 17       	cp	r26, r24
     916:	b9 07       	cpc	r27, r25
     918:	0c f4       	brge	.+2      	; 0x91c <seqDoublePingPongFunc+0x164>
     91a:	f3 c1       	rjmp	.+998    	; 0xd02 <seqDoublePingPongFunc+0x54a>
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     91c:	ac a1       	ldd	r26, Y+36	; 0x24
     91e:	bd a1       	ldd	r27, Y+37	; 0x25
     920:	2d 91       	ld	r18, X+
     922:	3d 91       	ld	r19, X+
     924:	4d 91       	ld	r20, X+
     926:	5c 91       	ld	r21, X
     928:	29 8b       	std	Y+17, r18	; 0x11
     92a:	3a 8b       	std	Y+18, r19	; 0x12
     92c:	4b 8b       	std	Y+19, r20	; 0x13
     92e:	5c 8b       	std	Y+20, r21	; 0x14
     930:	ca 01       	movw	r24, r20
     932:	b9 01       	movw	r22, r18
     934:	77 27       	eor	r23, r23
     936:	88 27       	eor	r24, r24
     938:	99 27       	eor	r25, r25
     93a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     93e:	29 81       	ldd	r18, Y+1	; 0x01
     940:	3a 81       	ldd	r19, Y+2	; 0x02
     942:	4b 81       	ldd	r20, Y+3	; 0x03
     944:	5c 81       	ldd	r21, Y+4	; 0x04
     946:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     94a:	6e 8b       	std	Y+22, r22	; 0x16
     94c:	7f 8b       	std	Y+23, r23	; 0x17
     94e:	88 8f       	std	Y+24, r24	; 0x18
     950:	99 8f       	std	Y+25, r25	; 0x19
     952:	29 81       	ldd	r18, Y+1	; 0x01
     954:	3a 81       	ldd	r19, Y+2	; 0x02
     956:	4b 81       	ldd	r20, Y+3	; 0x03
     958:	5c 81       	ldd	r21, Y+4	; 0x04
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e8       	ldi	r24, 0x80	; 128
     960:	9f e3       	ldi	r25, 0x3F	; 63
     962:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     966:	6d 83       	std	Y+5, r22	; 0x05
     968:	7e 83       	std	Y+6, r23	; 0x06
     96a:	8f 83       	std	Y+7, r24	; 0x07
     96c:	98 87       	std	Y+8, r25	; 0x08
     96e:	f3 01       	movw	r30, r6
     970:	60 81       	ld	r22, Z
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	6d 81       	ldd	r22, Y+5	; 0x05
     982:	7e 81       	ldd	r23, Y+6	; 0x06
     984:	8f 81       	ldd	r24, Y+7	; 0x07
     986:	98 85       	ldd	r25, Y+8	; 0x08
     988:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	6e 89       	ldd	r22, Y+22	; 0x16
     992:	7f 89       	ldd	r23, Y+23	; 0x17
     994:	88 8d       	ldd	r24, Y+24	; 0x18
     996:	99 8d       	ldd	r25, Y+25	; 0x19
     998:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     99c:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     9a0:	d3 01       	movw	r26, r6
     9a2:	6c 93       	st	X, r22
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
     9a4:	ba 89       	ldd	r27, Y+18	; 0x12
     9a6:	6b 2f       	mov	r22, r27
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	4b 81       	ldd	r20, Y+3	; 0x03
     9b8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ba:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     9be:	6a 8f       	std	Y+26, r22	; 0x1a
     9c0:	7b 8f       	std	Y+27, r23	; 0x1b
     9c2:	8c 8f       	std	Y+28, r24	; 0x1c
     9c4:	9d 8f       	std	Y+29, r25	; 0x1d
     9c6:	f5 01       	movw	r30, r10
     9c8:	60 81       	ld	r22, Z
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     9d4:	9b 01       	movw	r18, r22
     9d6:	ac 01       	movw	r20, r24
     9d8:	6d 81       	ldd	r22, Y+5	; 0x05
     9da:	7e 81       	ldd	r23, Y+6	; 0x06
     9dc:	8f 81       	ldd	r24, Y+7	; 0x07
     9de:	98 85       	ldd	r25, Y+8	; 0x08
     9e0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	6a 8d       	ldd	r22, Y+26	; 0x1a
     9ea:	7b 8d       	ldd	r23, Y+27	; 0x1b
     9ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
     9f0:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     9f4:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     9f8:	d5 01       	movw	r26, r10
     9fa:	6c 93       	st	X, r22
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
     9fc:	bb 89       	ldd	r27, Y+19	; 0x13
     9fe:	6b 2f       	mov	r22, r27
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     a0a:	29 81       	ldd	r18, Y+1	; 0x01
     a0c:	3a 81       	ldd	r19, Y+2	; 0x02
     a0e:	4b 81       	ldd	r20, Y+3	; 0x03
     a10:	5c 81       	ldd	r21, Y+4	; 0x04
     a12:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     a16:	69 83       	std	Y+1, r22	; 0x01
     a18:	7a 83       	std	Y+2, r23	; 0x02
     a1a:	8b 83       	std	Y+3, r24	; 0x03
     a1c:	9c 83       	std	Y+4, r25	; 0x04
     a1e:	f6 01       	movw	r30, r12
     a20:	60 81       	ld	r22, Z
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	6d 81       	ldd	r22, Y+5	; 0x05
     a32:	7e 81       	ldd	r23, Y+6	; 0x06
     a34:	8f 81       	ldd	r24, Y+7	; 0x07
     a36:	98 85       	ldd	r25, Y+8	; 0x08
     a38:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	69 81       	ldd	r22, Y+1	; 0x01
     a42:	7a 81       	ldd	r23, Y+2	; 0x02
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     a4c:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     a50:	d6 01       	movw	r26, r12
     a52:	6c 93       	st	X, r22
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
     a54:	f4 01       	movw	r30, r8
     a56:	60 81       	ld	r22, Z
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	6d 81       	ldd	r22, Y+5	; 0x05
     a68:	7e 81       	ldd	r23, Y+6	; 0x06
     a6a:	8f 81       	ldd	r24, Y+7	; 0x07
     a6c:	98 85       	ldd	r25, Y+8	; 0x08
     a6e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     a72:	9b 01       	movw	r18, r22
     a74:	ac 01       	movw	r20, r24
     a76:	6e 89       	ldd	r22, Y+22	; 0x16
     a78:	7f 89       	ldd	r23, Y+23	; 0x17
     a7a:	88 8d       	ldd	r24, Y+24	; 0x18
     a7c:	99 8d       	ldd	r25, Y+25	; 0x19
     a7e:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     a82:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     a86:	d4 01       	movw	r26, r8
     a88:	6c 93       	st	X, r22
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
     a8a:	f2 01       	movw	r30, r4
     a8c:	60 81       	ld	r22, Z
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	6d 81       	ldd	r22, Y+5	; 0x05
     a9e:	7e 81       	ldd	r23, Y+6	; 0x06
     aa0:	8f 81       	ldd	r24, Y+7	; 0x07
     aa2:	98 85       	ldd	r25, Y+8	; 0x08
     aa4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	6a 8d       	ldd	r22, Y+26	; 0x1a
     aae:	7b 8d       	ldd	r23, Y+27	; 0x1b
     ab0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ab2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ab4:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     ab8:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     abc:	d2 01       	movw	r26, r4
     abe:	6c 93       	st	X, r22
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
     ac0:	f7 01       	movw	r30, r14
     ac2:	60 81       	ld	r22, Z
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	6d 81       	ldd	r22, Y+5	; 0x05
     ad4:	7e 81       	ldd	r23, Y+6	; 0x06
     ad6:	8f 81       	ldd	r24, Y+7	; 0x07
     ad8:	98 85       	ldd	r25, Y+8	; 0x08
     ada:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     ade:	9b 01       	movw	r18, r22
     ae0:	ac 01       	movw	r20, r24
     ae2:	69 81       	ldd	r22, Y+1	; 0x01
     ae4:	7a 81       	ldd	r23, Y+2	; 0x02
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     aee:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     af2:	d7 01       	movw	r26, r14
     af4:	6c 93       	st	X, r22
     af6:	05 c1       	rjmp	.+522    	; 0xd02 <seqDoublePingPongFunc+0x54a>
     af8:	88 a1       	ldd	r24, Y+32	; 0x20
     afa:	99 a1       	ldd	r25, Y+33	; 0x21
     afc:	e8 a5       	ldd	r30, Y+40	; 0x28
     afe:	f9 a5       	ldd	r31, Y+41	; 0x29
     b00:	8e 0f       	add	r24, r30
     b02:	9f 1f       	adc	r25, r31
     b04:	01 97       	sbiw	r24, 0x01	; 1
		}
		else {
			if(led_i+i > num_leds/2 || led_i+i < 0) continue;
     b06:	2e 8d       	ldd	r18, Y+30	; 0x1e
     b08:	3f 8d       	ldd	r19, Y+31	; 0x1f
     b0a:	28 17       	cp	r18, r24
     b0c:	39 07       	cpc	r19, r25
     b0e:	0c f4       	brge	.+2      	; 0xb12 <seqDoublePingPongFunc+0x35a>
     b10:	f8 c0       	rjmp	.+496    	; 0xd02 <seqDoublePingPongFunc+0x54a>
     b12:	99 23       	and	r25, r25
     b14:	0c f4       	brge	.+2      	; 0xb18 <seqDoublePingPongFunc+0x360>
     b16:	f5 c0       	rjmp	.+490    	; 0xd02 <seqDoublePingPongFunc+0x54a>
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     b18:	ac a1       	ldd	r26, Y+36	; 0x24
     b1a:	bd a1       	ldd	r27, Y+37	; 0x25
     b1c:	4d 91       	ld	r20, X+
     b1e:	5d 91       	ld	r21, X+
     b20:	6d 91       	ld	r22, X+
     b22:	7c 91       	ld	r23, X
     b24:	49 8b       	std	Y+17, r20	; 0x11
     b26:	5a 8b       	std	Y+18, r21	; 0x12
     b28:	6b 8b       	std	Y+19, r22	; 0x13
     b2a:	7c 8b       	std	Y+20, r23	; 0x14
     b2c:	cb 01       	movw	r24, r22
     b2e:	ba 01       	movw	r22, r20
     b30:	77 27       	eor	r23, r23
     b32:	88 27       	eor	r24, r24
     b34:	99 27       	eor	r25, r25
     b36:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     b3a:	29 81       	ldd	r18, Y+1	; 0x01
     b3c:	3a 81       	ldd	r19, Y+2	; 0x02
     b3e:	4b 81       	ldd	r20, Y+3	; 0x03
     b40:	5c 81       	ldd	r21, Y+4	; 0x04
     b42:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     b46:	6e 8b       	std	Y+22, r22	; 0x16
     b48:	7f 8b       	std	Y+23, r23	; 0x17
     b4a:	88 8f       	std	Y+24, r24	; 0x18
     b4c:	99 8f       	std	Y+25, r25	; 0x19
     b4e:	29 81       	ldd	r18, Y+1	; 0x01
     b50:	3a 81       	ldd	r19, Y+2	; 0x02
     b52:	4b 81       	ldd	r20, Y+3	; 0x03
     b54:	5c 81       	ldd	r21, Y+4	; 0x04
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	9f e3       	ldi	r25, 0x3F	; 63
     b5e:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     b62:	6d 83       	std	Y+5, r22	; 0x05
     b64:	7e 83       	std	Y+6, r23	; 0x06
     b66:	8f 83       	std	Y+7, r24	; 0x07
     b68:	98 87       	std	Y+8, r25	; 0x08
     b6a:	f1 01       	movw	r30, r2
     b6c:	60 81       	ld	r22, Z
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	6d 81       	ldd	r22, Y+5	; 0x05
     b7e:	7e 81       	ldd	r23, Y+6	; 0x06
     b80:	8f 81       	ldd	r24, Y+7	; 0x07
     b82:	98 85       	ldd	r25, Y+8	; 0x08
     b84:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	6e 89       	ldd	r22, Y+22	; 0x16
     b8e:	7f 89       	ldd	r23, Y+23	; 0x17
     b90:	88 8d       	ldd	r24, Y+24	; 0x18
     b92:	99 8d       	ldd	r25, Y+25	; 0x19
     b94:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     b98:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     b9c:	d1 01       	movw	r26, r2
     b9e:	6c 93       	st	X, r22
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
     ba0:	ba 89       	ldd	r27, Y+18	; 0x12
     ba2:	6b 2f       	mov	r22, r27
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     bae:	29 81       	ldd	r18, Y+1	; 0x01
     bb0:	3a 81       	ldd	r19, Y+2	; 0x02
     bb2:	4b 81       	ldd	r20, Y+3	; 0x03
     bb4:	5c 81       	ldd	r21, Y+4	; 0x04
     bb6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     bba:	6a 8f       	std	Y+26, r22	; 0x1a
     bbc:	7b 8f       	std	Y+27, r23	; 0x1b
     bbe:	8c 8f       	std	Y+28, r24	; 0x1c
     bc0:	9d 8f       	std	Y+29, r25	; 0x1d
     bc2:	f8 01       	movw	r30, r16
     bc4:	60 81       	ld	r22, Z
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	6d 81       	ldd	r22, Y+5	; 0x05
     bd6:	7e 81       	ldd	r23, Y+6	; 0x06
     bd8:	8f 81       	ldd	r24, Y+7	; 0x07
     bda:	98 85       	ldd	r25, Y+8	; 0x08
     bdc:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
     be4:	6a 8d       	ldd	r22, Y+26	; 0x1a
     be6:	7b 8d       	ldd	r23, Y+27	; 0x1b
     be8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bea:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bec:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     bf0:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     bf4:	d8 01       	movw	r26, r16
     bf6:	6c 93       	st	X, r22
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
     bf8:	bb 89       	ldd	r27, Y+19	; 0x13
     bfa:	6b 2f       	mov	r22, r27
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     c06:	29 81       	ldd	r18, Y+1	; 0x01
     c08:	3a 81       	ldd	r19, Y+2	; 0x02
     c0a:	4b 81       	ldd	r20, Y+3	; 0x03
     c0c:	5c 81       	ldd	r21, Y+4	; 0x04
     c0e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     c12:	69 83       	std	Y+1, r22	; 0x01
     c14:	7a 83       	std	Y+2, r23	; 0x02
     c16:	8b 83       	std	Y+3, r24	; 0x03
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	e9 85       	ldd	r30, Y+9	; 0x09
     c1c:	fa 85       	ldd	r31, Y+10	; 0x0a
     c1e:	60 81       	ld	r22, Z
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     c2a:	9b 01       	movw	r18, r22
     c2c:	ac 01       	movw	r20, r24
     c2e:	6d 81       	ldd	r22, Y+5	; 0x05
     c30:	7e 81       	ldd	r23, Y+6	; 0x06
     c32:	8f 81       	ldd	r24, Y+7	; 0x07
     c34:	98 85       	ldd	r25, Y+8	; 0x08
     c36:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	69 81       	ldd	r22, Y+1	; 0x01
     c40:	7a 81       	ldd	r23, Y+2	; 0x02
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     c4a:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     c4e:	a9 85       	ldd	r26, Y+9	; 0x09
     c50:	ba 85       	ldd	r27, Y+10	; 0x0a
     c52:	6c 93       	st	X, r22
			
			leds[num_leds-1-led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.r;
     c54:	eb 85       	ldd	r30, Y+11	; 0x0b
     c56:	fc 85       	ldd	r31, Y+12	; 0x0c
     c58:	60 81       	ld	r22, Z
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     c64:	9b 01       	movw	r18, r22
     c66:	ac 01       	movw	r20, r24
     c68:	6d 81       	ldd	r22, Y+5	; 0x05
     c6a:	7e 81       	ldd	r23, Y+6	; 0x06
     c6c:	8f 81       	ldd	r24, Y+7	; 0x07
     c6e:	98 85       	ldd	r25, Y+8	; 0x08
     c70:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	6e 89       	ldd	r22, Y+22	; 0x16
     c7a:	7f 89       	ldd	r23, Y+23	; 0x17
     c7c:	88 8d       	ldd	r24, Y+24	; 0x18
     c7e:	99 8d       	ldd	r25, Y+25	; 0x19
     c80:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     c84:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     c88:	ab 85       	ldd	r26, Y+11	; 0x0b
     c8a:	bc 85       	ldd	r27, Y+12	; 0x0c
     c8c:	6c 93       	st	X, r22
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
     c8e:	ef 85       	ldd	r30, Y+15	; 0x0f
     c90:	f8 89       	ldd	r31, Y+16	; 0x10
     c92:	60 81       	ld	r22, Z
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     c9e:	9b 01       	movw	r18, r22
     ca0:	ac 01       	movw	r20, r24
     ca2:	6d 81       	ldd	r22, Y+5	; 0x05
     ca4:	7e 81       	ldd	r23, Y+6	; 0x06
     ca6:	8f 81       	ldd	r24, Y+7	; 0x07
     ca8:	98 85       	ldd	r25, Y+8	; 0x08
     caa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     cae:	9b 01       	movw	r18, r22
     cb0:	ac 01       	movw	r20, r24
     cb2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     cb4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     cb6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cb8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cba:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     cbe:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     cc2:	af 85       	ldd	r26, Y+15	; 0x0f
     cc4:	b8 89       	ldd	r27, Y+16	; 0x10
     cc6:	6c 93       	st	X, r22
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
     cc8:	ed 85       	ldd	r30, Y+13	; 0x0d
     cca:	fe 85       	ldd	r31, Y+14	; 0x0e
     ccc:	60 81       	ld	r22, Z
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__floatsisf>
     cd8:	9b 01       	movw	r18, r22
     cda:	ac 01       	movw	r20, r24
     cdc:	6d 81       	ldd	r22, Y+5	; 0x05
     cde:	7e 81       	ldd	r23, Y+6	; 0x06
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	98 85       	ldd	r25, Y+8	; 0x08
     ce4:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     ce8:	9b 01       	movw	r18, r22
     cea:	ac 01       	movw	r20, r24
     cec:	69 81       	ldd	r22, Y+1	; 0x01
     cee:	7a 81       	ldd	r23, Y+2	; 0x02
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     cf8:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     cfc:	ad 85       	ldd	r26, Y+13	; 0x0d
     cfe:	be 85       	ldd	r27, Y+14	; 0x0e
     d00:	6c 93       	st	X, r22
     d02:	b4 e0       	ldi	r27, 0x04	; 4
     d04:	6b 1a       	sub	r6, r27
     d06:	71 08       	sbc	r7, r1
     d08:	e4 e0       	ldi	r30, 0x04	; 4
     d0a:	ce 1a       	sub	r12, r30
     d0c:	d1 08       	sbc	r13, r1
     d0e:	f4 e0       	ldi	r31, 0x04	; 4
     d10:	af 1a       	sub	r10, r31
     d12:	b1 08       	sbc	r11, r1
     d14:	24 e0       	ldi	r18, 0x04	; 4
     d16:	82 0e       	add	r8, r18
     d18:	91 1c       	adc	r9, r1
     d1a:	34 e0       	ldi	r19, 0x04	; 4
     d1c:	e3 0e       	add	r14, r19
     d1e:	f1 1c       	adc	r15, r1
     d20:	44 e0       	ldi	r20, 0x04	; 4
     d22:	44 0e       	add	r4, r20
     d24:	51 1c       	adc	r5, r1
     d26:	54 e0       	ldi	r21, 0x04	; 4
     d28:	25 0e       	add	r2, r21
     d2a:	31 1c       	adc	r3, r1
     d2c:	69 85       	ldd	r22, Y+9	; 0x09
     d2e:	7a 85       	ldd	r23, Y+10	; 0x0a
     d30:	6c 5f       	subi	r22, 0xFC	; 252
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	7a 87       	std	Y+10, r23	; 0x0a
     d36:	69 87       	std	Y+9, r22	; 0x09
     d38:	0c 5f       	subi	r16, 0xFC	; 252
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d40:	04 97       	sbiw	r24, 0x04	; 4
     d42:	9c 87       	std	Y+12, r25	; 0x0c
     d44:	8b 87       	std	Y+11, r24	; 0x0b
     d46:	ad 85       	ldd	r26, Y+13	; 0x0d
     d48:	be 85       	ldd	r27, Y+14	; 0x0e
     d4a:	14 97       	sbiw	r26, 0x04	; 4
     d4c:	be 87       	std	Y+14, r27	; 0x0e
     d4e:	ad 87       	std	Y+13, r26	; 0x0d
     d50:	ef 85       	ldd	r30, Y+15	; 0x0f
     d52:	f8 89       	ldd	r31, Y+16	; 0x10
     d54:	34 97       	sbiw	r30, 0x04	; 4
     d56:	f8 8b       	std	Y+16, r31	; 0x10
     d58:	ef 87       	std	Y+15, r30	; 0x0f
	else timer = 0;
	
	//leds[led_i].val = colors[seq_i];
	//leds[num_leds-1-led_i].val = colors[seq_i];
	
	for(int i = 0; i < softness; i++)
     d5a:	28 a5       	ldd	r18, Y+40	; 0x28
     d5c:	39 a5       	ldd	r19, Y+41	; 0x29
     d5e:	2a 30       	cpi	r18, 0x0A	; 10
     d60:	31 05       	cpc	r19, r1
     d62:	09 f0       	breq	.+2      	; 0xd66 <seqDoublePingPongFunc+0x5ae>
     d64:	b4 cd       	rjmp	.-1176   	; 0x8ce <seqDoublePingPongFunc+0x116>
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     d66:	40 91 b5 03 	lds	r20, 0x03B5
     d6a:	44 23       	and	r20, r20
     d6c:	31 f0       	breq	.+12     	; 0xd7a <seqDoublePingPongFunc+0x5c2>
     d6e:	80 91 b4 03 	lds	r24, 0x03B4
     d72:	81 50       	subi	r24, 0x01	; 1
     d74:	80 93 b4 03 	sts	0x03B4, r24
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <seqDoublePingPongFunc+0x5cc>
	else led_i++;
     d7a:	80 91 b4 03 	lds	r24, 0x03B4
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	80 93 b4 03 	sts	0x03B4, r24
	if(led_i >= num_leds/2 + softness || led_i < -softness) {
     d84:	20 91 b4 03 	lds	r18, 0x03B4
     d88:	02 2e       	mov	r0, r18
     d8a:	00 0c       	add	r0, r0
     d8c:	33 0b       	sbc	r19, r19
     d8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d90:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d92:	0a 96       	adiw	r24, 0x0a	; 10
     d94:	28 17       	cp	r18, r24
     d96:	39 07       	cpc	r19, r25
     d98:	1c f4       	brge	.+6      	; 0xda0 <seqDoublePingPongFunc+0x5e8>
     d9a:	26 3f       	cpi	r18, 0xF6	; 246
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	1c f5       	brge	.+70     	; 0xde6 <seqDoublePingPongFunc+0x62e>
		color_i = (color_i+1)%numColors;
     da0:	80 91 b3 03 	lds	r24, 0x03B3
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	60 91 01 02 	lds	r22, 0x0201
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__divmodhi4>
     db2:	80 93 b3 03 	sts	0x03B3, r24
		led_dir = led_dir == 1 ? 0 : 1;
     db6:	21 e0       	ldi	r18, 0x01	; 1
     db8:	41 30       	cpi	r20, 0x01	; 1
     dba:	09 f4       	brne	.+2      	; 0xdbe <seqDoublePingPongFunc+0x606>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	20 93 b5 03 	sts	0x03B5, r18
		led_i = 0 + led_dir*num_leds/2-1;
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	6e a1       	ldd	r22, Y+38	; 0x26
     dc6:	7f a1       	ldd	r23, Y+39	; 0x27
     dc8:	26 9f       	mul	r18, r22
     dca:	c0 01       	movw	r24, r0
     dcc:	27 9f       	mul	r18, r23
     dce:	90 0d       	add	r25, r0
     dd0:	36 9f       	mul	r19, r22
     dd2:	90 0d       	add	r25, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	99 23       	and	r25, r25
     dd8:	0c f4       	brge	.+2      	; 0xddc <seqDoublePingPongFunc+0x624>
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	95 95       	asr	r25
     dde:	87 95       	ror	r24
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	80 93 b4 03 	sts	0x03B4, r24
	}
}
     de6:	a9 96       	adiw	r28, 0x29	; 41
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	cf 90       	pop	r12
     e02:	bf 90       	pop	r11
     e04:	af 90       	pop	r10
     e06:	9f 90       	pop	r9
     e08:	8f 90       	pop	r8
     e0a:	7f 90       	pop	r7
     e0c:	6f 90       	pop	r6
     e0e:	5f 90       	pop	r5
     e10:	4f 90       	pop	r4
     e12:	3f 90       	pop	r3
     e14:	2f 90       	pop	r2
     e16:	08 95       	ret

00000e18 <seqFadeFunc>:

static void seqFadeFunc(color_t *leds, int num_leds)
{
     e18:	4f 92       	push	r4
     e1a:	5f 92       	push	r5
     e1c:	6f 92       	push	r6
     e1e:	7f 92       	push	r7
     e20:	8f 92       	push	r8
     e22:	9f 92       	push	r9
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	6c 01       	movw	r12, r24
     e38:	eb 01       	movw	r28, r22
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
     e3a:	f0 90 b9 03 	lds	r15, 0x03B9
     e3e:	6f 2d       	mov	r22, r15
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	48 e4       	ldi	r20, 0x48	; 72
     e50:	52 e4       	ldi	r21, 0x42	; 66
     e52:	0e 94 ae 09 	call	0x135c	; 0x135c <__divsf3>
     e56:	4b 01       	movw	r8, r22
     e58:	5c 01       	movw	r10, r24
	for(int i = 0; i < num_leds; i++)
     e5a:	1c 16       	cp	r1, r28
     e5c:	1d 06       	cpc	r1, r29
     e5e:	0c f0       	brlt	.+2      	; 0xe62 <seqFadeFunc+0x4a>
     e60:	48 c0       	rjmp	.+144    	; 0xef2 <seqFadeFunc+0xda>
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     e62:	e0 91 b8 03 	lds	r30, 0x03B8
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	ee 0f       	add	r30, r30
     e6a:	ff 1f       	adc	r31, r31
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	ef 5f       	subi	r30, 0xFF	; 255
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	40 80       	ld	r4, Z
     e76:	51 80       	ldd	r5, Z+1	; 0x01
     e78:	62 80       	ldd	r6, Z+2	; 0x02
     e7a:	73 80       	ldd	r7, Z+3	; 0x03
     e7c:	c3 01       	movw	r24, r6
     e7e:	b2 01       	movw	r22, r4
     e80:	77 27       	eor	r23, r23
     e82:	88 27       	eor	r24, r24
     e84:	99 27       	eor	r25, r25
     e86:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     e8a:	a5 01       	movw	r20, r10
     e8c:	94 01       	movw	r18, r8
     e8e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     e92:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     e96:	06 2f       	mov	r16, r22
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     e98:	65 2d       	mov	r22, r5
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     ea4:	a5 01       	movw	r20, r10
     ea6:	94 01       	movw	r18, r8
     ea8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     eac:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     eb0:	16 2f       	mov	r17, r22
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     eb2:	66 2d       	mov	r22, r6
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     ebe:	a5 01       	movw	r20, r10
     ec0:	94 01       	movw	r18, r8
     ec2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
     ec6:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
     eca:	f6 01       	movw	r30, r12
     ecc:	32 96       	adiw	r30, 0x02	; 2
     ece:	cc 0f       	add	r28, r28
     ed0:	dd 1f       	adc	r29, r29
     ed2:	cc 0f       	add	r28, r28
     ed4:	dd 1f       	adc	r29, r29
     ed6:	22 96       	adiw	r28, 0x02	; 2
     ed8:	c6 01       	movw	r24, r12
     eda:	8c 0f       	add	r24, r28
     edc:	9d 1f       	adc	r25, r29
     ede:	df 01       	movw	r26, r30
     ee0:	11 97       	sbiw	r26, 0x01	; 1
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     ee2:	0c 93       	st	X, r16
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     ee4:	10 83       	st	Z, r17
     ee6:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     ee8:	6c 93       	st	X, r22
     eea:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t timer = 0;
	static uint8_t time = 50;
	static int8_t led_dir = 0;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
     eec:	e8 17       	cp	r30, r24
     eee:	f9 07       	cpc	r31, r25
     ef0:	b1 f7       	brne	.-20     	; 0xede <seqFadeFunc+0xc6>
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
	}
	
	if(!led_dir)
     ef2:	80 91 b7 03 	lds	r24, 0x03B7
     ef6:	81 11       	cpse	r24, r1
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <seqFadeFunc+0xea>
	timer++;
     efa:	f3 94       	inc	r15
     efc:	f0 92 b9 03 	sts	0x03B9, r15
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <seqFadeFunc+0xf0>
	else
	timer--;
     f02:	fa 94       	dec	r15
     f04:	f0 92 b9 03 	sts	0x03B9, r15
	if(timer >= time)
     f08:	80 91 b9 03 	lds	r24, 0x03B9
     f0c:	82 33       	cpi	r24, 0x32	; 50
     f0e:	30 f0       	brcs	.+12     	; 0xf1c <seqFadeFunc+0x104>
	led_dir = 1;
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	90 93 b7 03 	sts	0x03B7, r25
	if(timer <= 0 && led_dir) {
     f16:	88 23       	and	r24, r24
     f18:	39 f0       	breq	.+14     	; 0xf28 <seqFadeFunc+0x110>
     f1a:	13 c0       	rjmp	.+38     	; 0xf42 <seqFadeFunc+0x12a>
     f1c:	81 11       	cpse	r24, r1
     f1e:	11 c0       	rjmp	.+34     	; 0xf42 <seqFadeFunc+0x12a>
     f20:	80 91 b7 03 	lds	r24, 0x03B7
     f24:	88 23       	and	r24, r24
     f26:	69 f0       	breq	.+26     	; 0xf42 <seqFadeFunc+0x12a>
		color_i = (color_i+1)%numColors;
     f28:	80 91 b8 03 	lds	r24, 0x03B8
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	60 91 01 02 	lds	r22, 0x0201
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__divmodhi4>
     f3a:	80 93 b8 03 	sts	0x03B8, r24
		led_dir = 0;
     f3e:	10 92 b7 03 	sts	0x03B7, r1
	}
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	7f 90       	pop	r7
     f5a:	6f 90       	pop	r6
     f5c:	5f 90       	pop	r5
     f5e:	4f 90       	pop	r4
     f60:	08 95       	ret

00000f62 <seqSoftSwitchFunc>:

static void seqSoftSwitchFunc(color_t *leds, int num_leds)
{
     f62:	2f 92       	push	r2
     f64:	3f 92       	push	r3
     f66:	4f 92       	push	r4
     f68:	5f 92       	push	r5
     f6a:	6f 92       	push	r6
     f6c:	7f 92       	push	r7
     f6e:	8f 92       	push	r8
     f70:	9f 92       	push	r9
     f72:	af 92       	push	r10
     f74:	bf 92       	push	r11
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	2a 97       	sbiw	r28, 0x0a	; 10
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	1c 01       	movw	r2, r24
     f98:	8b 01       	movw	r16, r22
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	
	float k = (float)timer/time;
     f9a:	20 91 bb 03 	lds	r18, 0x03BB
     f9e:	2a 87       	std	Y+10, r18	; 0x0a
     fa0:	62 2f       	mov	r22, r18
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	48 e4       	ldi	r20, 0x48	; 72
     fb2:	52 e4       	ldi	r21, 0x42	; 66
     fb4:	0e 94 ae 09 	call	0x135c	; 0x135c <__divsf3>
     fb8:	69 83       	std	Y+1, r22	; 0x01
     fba:	7a 83       	std	Y+2, r23	; 0x02
     fbc:	8b 83       	std	Y+3, r24	; 0x03
     fbe:	9c 83       	std	Y+4, r25	; 0x04
	for(int i = 0; i < num_leds; i++)
     fc0:	10 16       	cp	r1, r16
     fc2:	11 06       	cpc	r1, r17
     fc4:	0c f0       	brlt	.+2      	; 0xfc8 <seqSoftSwitchFunc+0x66>
     fc6:	b2 c0       	rjmp	.+356    	; 0x112c <seqSoftSwitchFunc+0x1ca>
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	9f e3       	ldi	r25, 0x3F	; 63
     fd4:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     fd8:	6d 83       	std	Y+5, r22	; 0x05
     fda:	7e 83       	std	Y+6, r23	; 0x06
     fdc:	8f 83       	std	Y+7, r24	; 0x07
     fde:	98 87       	std	Y+8, r25	; 0x08
     fe0:	80 91 ba 03 	lds	r24, 0x03BA
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	ef 5f       	subi	r30, 0xFF	; 255
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	80 80       	ld	r8, Z
     ff6:	91 80       	ldd	r9, Z+1	; 0x01
     ff8:	a2 80       	ldd	r10, Z+2	; 0x02
     ffa:	b3 80       	ldd	r11, Z+3	; 0x03
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	60 91 01 02 	lds	r22, 0x0201
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__divmodhi4>
    1008:	fc 01       	movw	r30, r24
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ef 5f       	subi	r30, 0xFF	; 255
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	c0 80       	ld	r12, Z
    1018:	d1 80       	ldd	r13, Z+1	; 0x01
    101a:	e2 80       	ldd	r14, Z+2	; 0x02
    101c:	f3 80       	ldd	r15, Z+3	; 0x03
    101e:	c5 01       	movw	r24, r10
    1020:	b4 01       	movw	r22, r8
    1022:	77 27       	eor	r23, r23
    1024:	88 27       	eor	r24, r24
    1026:	99 27       	eor	r25, r25
    1028:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	6d 81       	ldd	r22, Y+5	; 0x05
    1032:	7e 81       	ldd	r23, Y+6	; 0x06
    1034:	8f 81       	ldd	r24, Y+7	; 0x07
    1036:	98 85       	ldd	r25, Y+8	; 0x08
    1038:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
    103c:	2b 01       	movw	r4, r22
    103e:	3c 01       	movw	r6, r24
    1040:	c7 01       	movw	r24, r14
    1042:	b6 01       	movw	r22, r12
    1044:	77 27       	eor	r23, r23
    1046:	88 27       	eor	r24, r24
    1048:	99 27       	eor	r25, r25
    104a:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
    104e:	29 81       	ldd	r18, Y+1	; 0x01
    1050:	3a 81       	ldd	r19, Y+2	; 0x02
    1052:	4b 81       	ldd	r20, Y+3	; 0x03
    1054:	5c 81       	ldd	r21, Y+4	; 0x04
    1056:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	c3 01       	movw	r24, r6
    1060:	b2 01       	movw	r22, r4
    1062:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
    1066:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
    106a:	69 87       	std	Y+9, r22	; 0x09
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
    106c:	69 2d       	mov	r22, r9
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	6d 81       	ldd	r22, Y+5	; 0x05
    107e:	7e 81       	ldd	r23, Y+6	; 0x06
    1080:	8f 81       	ldd	r24, Y+7	; 0x07
    1082:	98 85       	ldd	r25, Y+8	; 0x08
    1084:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
    1088:	2b 01       	movw	r4, r22
    108a:	3c 01       	movw	r6, r24
    108c:	6d 2d       	mov	r22, r13
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
    1098:	29 81       	ldd	r18, Y+1	; 0x01
    109a:	3a 81       	ldd	r19, Y+2	; 0x02
    109c:	4b 81       	ldd	r20, Y+3	; 0x03
    109e:	5c 81       	ldd	r21, Y+4	; 0x04
    10a0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	c3 01       	movw	r24, r6
    10aa:	b2 01       	movw	r22, r4
    10ac:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
    10b0:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
    10b4:	76 2e       	mov	r7, r22
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
    10b6:	6a 2d       	mov	r22, r10
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	6d 81       	ldd	r22, Y+5	; 0x05
    10c8:	7e 81       	ldd	r23, Y+6	; 0x06
    10ca:	8f 81       	ldd	r24, Y+7	; 0x07
    10cc:	98 85       	ldd	r25, Y+8	; 0x08
    10ce:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
    10d2:	4b 01       	movw	r8, r22
    10d4:	5c 01       	movw	r10, r24
    10d6:	6e 2d       	mov	r22, r14
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatunsisf>
    10e2:	29 81       	ldd	r18, Y+1	; 0x01
    10e4:	3a 81       	ldd	r19, Y+2	; 0x02
    10e6:	4b 81       	ldd	r20, Y+3	; 0x03
    10e8:	5c 81       	ldd	r21, Y+4	; 0x04
    10ea:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	c5 01       	movw	r24, r10
    10f4:	b4 01       	movw	r22, r8
    10f6:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
    10fa:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fixunssfsi>
    10fe:	f1 01       	movw	r30, r2
    1100:	32 96       	adiw	r30, 0x02	; 2
    1102:	00 0f       	add	r16, r16
    1104:	11 1f       	adc	r17, r17
    1106:	00 0f       	add	r16, r16
    1108:	11 1f       	adc	r17, r17
    110a:	0e 5f       	subi	r16, 0xFE	; 254
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	20 0e       	add	r2, r16
    1110:	31 1e       	adc	r3, r17
    1112:	9a 85       	ldd	r25, Y+10	; 0x0a
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	df 01       	movw	r26, r30
    1118:	11 97       	sbiw	r26, 0x01	; 1
	static uint8_t time = 50;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
    111a:	8c 93       	st	X, r24
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
    111c:	70 82       	st	Z, r7
    111e:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
    1120:	6c 93       	st	X, r22
    1122:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	static uint8_t time = 50;
	
	float k = (float)timer/time;
	for(int i = 0; i < num_leds; i++)
    1124:	e2 15       	cp	r30, r2
    1126:	f3 05       	cpc	r31, r3
    1128:	b1 f7       	brne	.-20     	; 0x1116 <seqSoftSwitchFunc+0x1b4>
    112a:	9a 87       	std	Y+10, r25	; 0x0a
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
	}
	
	timer++;
    112c:	8a 85       	ldd	r24, Y+10	; 0x0a
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	80 93 bb 03 	sts	0x03BB, r24
	if(timer > time) {
    1134:	83 33       	cpi	r24, 0x33	; 51
    1136:	68 f0       	brcs	.+26     	; 0x1152 <seqSoftSwitchFunc+0x1f0>
		color_i = (color_i+1)%numColors;
    1138:	80 91 ba 03 	lds	r24, 0x03BA
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	60 91 01 02 	lds	r22, 0x0201
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__divmodhi4>
    114a:	80 93 ba 03 	sts	0x03BA, r24
		timer = 0;
    114e:	10 92 bb 03 	sts	0x03BB, r1
	}
}
    1152:	2a 96       	adiw	r28, 0x0a	; 10
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	5f 90       	pop	r5
    117c:	4f 90       	pop	r4
    117e:	3f 90       	pop	r3
    1180:	2f 90       	pop	r2
    1182:	08 95       	ret

00001184 <seqStaticColor>:

static void seqStaticColor(color_t *leds, int num_leds)
{
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
	for(int i = 0; i < num_leds; i++)
    1188:	16 16       	cp	r1, r22
    118a:	17 06       	cpc	r1, r23
    118c:	b4 f4       	brge	.+44     	; 0x11ba <seqStaticColor+0x36>
	leds[i].val = colors[0];
    118e:	00 91 01 01 	lds	r16, 0x0101
    1192:	10 91 02 01 	lds	r17, 0x0102
    1196:	20 91 03 01 	lds	r18, 0x0103
    119a:	30 91 04 01 	lds	r19, 0x0104
    119e:	fc 01       	movw	r30, r24
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	86 0f       	add	r24, r22
    11aa:	97 1f       	adc	r25, r23
    11ac:	01 93       	st	Z+, r16
    11ae:	11 93       	st	Z+, r17
    11b0:	21 93       	st	Z+, r18
    11b2:	31 93       	st	Z+, r19
	}
}

static void seqStaticColor(color_t *leds, int num_leds)
{
	for(int i = 0; i < num_leds; i++)
    11b4:	e8 17       	cp	r30, r24
    11b6:	f9 07       	cpc	r31, r25
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <seqStaticColor+0x28>
	leds[i].val = colors[0];
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret

000011c0 <seqSetFunction>:

// ------------------------------------------------------------------- DEFINITIONS

void seqSetFunction(seqType_t type)
{
	seqType = type;
    11c0:	80 93 bc 03 	sts	0x03BC, r24
    11c4:	08 95       	ret

000011c6 <seqUpdate>:
}

void seqUpdate(color_t *leds, int num_leds)
{
	functions[seqType](leds, num_leds);
    11c6:	e0 91 bc 03 	lds	r30, 0x03BC
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	ee 5f       	subi	r30, 0xFE	; 254
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	01 90       	ld	r0, Z+
    11d6:	f0 81       	ld	r31, Z
    11d8:	e0 2d       	mov	r30, r0
    11da:	09 95       	icall
    11dc:	08 95       	ret

000011de <seqSetColorRGB>:
	colors[i] = c;
}

void seqSetColorRGB(uint8_t i, uint8_t r, uint8_t g, uint8_t b)
{
	if(i >= numColors)
    11de:	90 91 01 02 	lds	r25, 0x0201
    11e2:	89 17       	cp	r24, r25
    11e4:	60 f4       	brcc	.+24     	; 0x11fe <seqSetColorRGB+0x20>
	
	color_t color;
	color.rgb.r = r;
	color.rgb.b = b;
	color.rgb.g = g;
	colors[i] = color.val;
    11e6:	e8 2f       	mov	r30, r24
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ee 0f       	add	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	ef 5f       	subi	r30, 0xFF	; 255
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	20 83       	st	Z, r18
    11f8:	61 83       	std	Z+1, r22	; 0x01
    11fa:	42 83       	std	Z+2, r20	; 0x02
    11fc:	13 82       	std	Z+3, r1	; 0x03
    11fe:	08 95       	ret

00001200 <wsInit>:

// ------------------------------------------------------------------- DEFINITIONS

void wsInit()
{
	WS_DDR |= WS_BIT;
    1200:	53 9a       	sbi	0x0a, 3	; 10
    1202:	08 95       	ret

00001204 <wsSend>:
}

void wsSend(color_t *leds, int num_leds)
{
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	dc 01       	movw	r26, r24
    120c:	eb 01       	movw	r28, r22
	for(uint8_t j = 0; j < num_leds; j++)
    120e:	1c 16       	cp	r1, r28
    1210:	1d 06       	cpc	r1, r29
    1212:	34 f1       	brlt	.+76     	; 0x1260 <wsSend+0x5c>
    1214:	31 c0       	rjmp	.+98     	; 0x1278 <wsSend+0x74>
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1216:	40 81       	ld	r20, Z
    1218:	51 81       	ldd	r21, Z+1	; 0x01
    121a:	62 81       	ldd	r22, Z+2	; 0x02
    121c:	73 81       	ldd	r23, Z+3	; 0x03
    121e:	02 2e       	mov	r0, r18
    1220:	04 c0       	rjmp	.+8      	; 0x122a <wsSend+0x26>
    1222:	76 95       	lsr	r23
    1224:	67 95       	ror	r22
    1226:	57 95       	ror	r21
    1228:	47 95       	ror	r20
    122a:	0a 94       	dec	r0
    122c:	d2 f7       	brpl	.-12     	; 0x1222 <wsSend+0x1e>
    122e:	40 ff       	sbrs	r20, 0
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <wsSend+0x3c>
				WS_PORT |= WS_BIT;
    1232:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1234:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1236:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1238:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    123a:	5b 9a       	sbi	0x0b, 3	; 11
				//WS_PORT |= WS_BIT;
				
				//WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
				WS_PORT &= ~WS_BIT;
    123c:	5b 98       	cbi	0x0b, 3	; 11
    123e:	06 c0       	rjmp	.+12     	; 0x124c <wsSend+0x48>
				} else {
				//WS_PORT |= WS_BIT;
				//WS_PORT |= WS_BIT;
				WS_PORT |= WS_BIT;
    1240:	5b 9a       	sbi	0x0b, 3	; 11
				
				WS_PORT &= ~WS_BIT;
    1242:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1244:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1246:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1248:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    124a:	5b 98       	cbi	0x0b, 3	; 11
    124c:	21 50       	subi	r18, 0x01	; 1
    124e:	31 09       	sbc	r19, r1
    1250:	10 f7       	brcc	.-60     	; 0x1216 <wsSend+0x12>
	WS_DDR |= WS_BIT;
}

void wsSend(color_t *leds, int num_leds)
{
	for(uint8_t j = 0; j < num_leds; j++)
    1252:	9f 5f       	subi	r25, 0xFF	; 255
    1254:	29 2f       	mov	r18, r25
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	2c 17       	cp	r18, r28
    125a:	3d 07       	cpc	r19, r29
    125c:	24 f0       	brlt	.+8      	; 0x1266 <wsSend+0x62>
    125e:	0c c0       	rjmp	.+24     	; 0x1278 <wsSend+0x74>
    1260:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1262:	17 e1       	ldi	r17, 0x17	; 23
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	fd 01       	movw	r30, r26
    1268:	24 e0       	ldi	r18, 0x04	; 4
    126a:	92 9f       	mul	r25, r18
    126c:	e0 0d       	add	r30, r0
    126e:	f1 1d       	adc	r31, r1
    1270:	11 24       	eor	r1, r1
    1272:	21 2f       	mov	r18, r17
    1274:	38 2f       	mov	r19, r24
    1276:	cf cf       	rjmp	.-98     	; 0x1216 <wsSend+0x12>
				WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
			}
		}
	}
	WS_PORT = 0;
    1278:	1b b8       	out	0x0b, r1	; 11
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	08 95       	ret

00001282 <__subsf3>:
    1282:	50 58       	subi	r21, 0x80	; 128

00001284 <__addsf3>:
    1284:	bb 27       	eor	r27, r27
    1286:	aa 27       	eor	r26, r26
    1288:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__addsf3x>
    128c:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_round>
    1290:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_pscA>
    1294:	38 f0       	brcs	.+14     	; 0x12a4 <__addsf3+0x20>
    1296:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_pscB>
    129a:	20 f0       	brcs	.+8      	; 0x12a4 <__addsf3+0x20>
    129c:	39 f4       	brne	.+14     	; 0x12ac <__addsf3+0x28>
    129e:	9f 3f       	cpi	r25, 0xFF	; 255
    12a0:	19 f4       	brne	.+6      	; 0x12a8 <__addsf3+0x24>
    12a2:	26 f4       	brtc	.+8      	; 0x12ac <__addsf3+0x28>
    12a4:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_nan>
    12a8:	0e f4       	brtc	.+2      	; 0x12ac <__addsf3+0x28>
    12aa:	e0 95       	com	r30
    12ac:	e7 fb       	bst	r30, 7
    12ae:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>

000012b2 <__addsf3x>:
    12b2:	e9 2f       	mov	r30, r25
    12b4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_split3>
    12b8:	58 f3       	brcs	.-42     	; 0x1290 <__addsf3+0xc>
    12ba:	ba 17       	cp	r27, r26
    12bc:	62 07       	cpc	r22, r18
    12be:	73 07       	cpc	r23, r19
    12c0:	84 07       	cpc	r24, r20
    12c2:	95 07       	cpc	r25, r21
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__addsf3x+0x1c>
    12c6:	79 f4       	brne	.+30     	; 0x12e6 <__addsf3x+0x34>
    12c8:	a6 f5       	brtc	.+104    	; 0x1332 <__addsf3x+0x80>
    12ca:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_zero>
    12ce:	0e f4       	brtc	.+2      	; 0x12d2 <__addsf3x+0x20>
    12d0:	e0 95       	com	r30
    12d2:	0b 2e       	mov	r0, r27
    12d4:	ba 2f       	mov	r27, r26
    12d6:	a0 2d       	mov	r26, r0
    12d8:	0b 01       	movw	r0, r22
    12da:	b9 01       	movw	r22, r18
    12dc:	90 01       	movw	r18, r0
    12de:	0c 01       	movw	r0, r24
    12e0:	ca 01       	movw	r24, r20
    12e2:	a0 01       	movw	r20, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	ff 27       	eor	r31, r31
    12e8:	59 1b       	sub	r21, r25
    12ea:	99 f0       	breq	.+38     	; 0x1312 <__addsf3x+0x60>
    12ec:	59 3f       	cpi	r21, 0xF9	; 249
    12ee:	50 f4       	brcc	.+20     	; 0x1304 <__addsf3x+0x52>
    12f0:	50 3e       	cpi	r21, 0xE0	; 224
    12f2:	68 f1       	brcs	.+90     	; 0x134e <__addsf3x+0x9c>
    12f4:	1a 16       	cp	r1, r26
    12f6:	f0 40       	sbci	r31, 0x00	; 0
    12f8:	a2 2f       	mov	r26, r18
    12fa:	23 2f       	mov	r18, r19
    12fc:	34 2f       	mov	r19, r20
    12fe:	44 27       	eor	r20, r20
    1300:	58 5f       	subi	r21, 0xF8	; 248
    1302:	f3 cf       	rjmp	.-26     	; 0x12ea <__addsf3x+0x38>
    1304:	46 95       	lsr	r20
    1306:	37 95       	ror	r19
    1308:	27 95       	ror	r18
    130a:	a7 95       	ror	r26
    130c:	f0 40       	sbci	r31, 0x00	; 0
    130e:	53 95       	inc	r21
    1310:	c9 f7       	brne	.-14     	; 0x1304 <__addsf3x+0x52>
    1312:	7e f4       	brtc	.+30     	; 0x1332 <__addsf3x+0x80>
    1314:	1f 16       	cp	r1, r31
    1316:	ba 0b       	sbc	r27, r26
    1318:	62 0b       	sbc	r22, r18
    131a:	73 0b       	sbc	r23, r19
    131c:	84 0b       	sbc	r24, r20
    131e:	ba f0       	brmi	.+46     	; 0x134e <__addsf3x+0x9c>
    1320:	91 50       	subi	r25, 0x01	; 1
    1322:	a1 f0       	breq	.+40     	; 0x134c <__addsf3x+0x9a>
    1324:	ff 0f       	add	r31, r31
    1326:	bb 1f       	adc	r27, r27
    1328:	66 1f       	adc	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	c2 f7       	brpl	.-16     	; 0x1320 <__addsf3x+0x6e>
    1330:	0e c0       	rjmp	.+28     	; 0x134e <__addsf3x+0x9c>
    1332:	ba 0f       	add	r27, r26
    1334:	62 1f       	adc	r22, r18
    1336:	73 1f       	adc	r23, r19
    1338:	84 1f       	adc	r24, r20
    133a:	48 f4       	brcc	.+18     	; 0x134e <__addsf3x+0x9c>
    133c:	87 95       	ror	r24
    133e:	77 95       	ror	r23
    1340:	67 95       	ror	r22
    1342:	b7 95       	ror	r27
    1344:	f7 95       	ror	r31
    1346:	9e 3f       	cpi	r25, 0xFE	; 254
    1348:	08 f0       	brcs	.+2      	; 0x134c <__addsf3x+0x9a>
    134a:	b0 cf       	rjmp	.-160    	; 0x12ac <__addsf3+0x28>
    134c:	93 95       	inc	r25
    134e:	88 0f       	add	r24, r24
    1350:	08 f0       	brcs	.+2      	; 0x1354 <__addsf3x+0xa2>
    1352:	99 27       	eor	r25, r25
    1354:	ee 0f       	add	r30, r30
    1356:	97 95       	ror	r25
    1358:	87 95       	ror	r24
    135a:	08 95       	ret

0000135c <__divsf3>:
    135c:	0e 94 c2 09 	call	0x1384	; 0x1384 <__divsf3x>
    1360:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_round>
    1364:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_pscB>
    1368:	58 f0       	brcs	.+22     	; 0x1380 <__divsf3+0x24>
    136a:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_pscA>
    136e:	40 f0       	brcs	.+16     	; 0x1380 <__divsf3+0x24>
    1370:	29 f4       	brne	.+10     	; 0x137c <__divsf3+0x20>
    1372:	5f 3f       	cpi	r21, 0xFF	; 255
    1374:	29 f0       	breq	.+10     	; 0x1380 <__divsf3+0x24>
    1376:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    137a:	51 11       	cpse	r21, r1
    137c:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__fp_szero>
    1380:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_nan>

00001384 <__divsf3x>:
    1384:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_split3>
    1388:	68 f3       	brcs	.-38     	; 0x1364 <__divsf3+0x8>

0000138a <__divsf3_pse>:
    138a:	99 23       	and	r25, r25
    138c:	b1 f3       	breq	.-20     	; 0x137a <__divsf3+0x1e>
    138e:	55 23       	and	r21, r21
    1390:	91 f3       	breq	.-28     	; 0x1376 <__divsf3+0x1a>
    1392:	95 1b       	sub	r25, r21
    1394:	55 0b       	sbc	r21, r21
    1396:	bb 27       	eor	r27, r27
    1398:	aa 27       	eor	r26, r26
    139a:	62 17       	cp	r22, r18
    139c:	73 07       	cpc	r23, r19
    139e:	84 07       	cpc	r24, r20
    13a0:	38 f0       	brcs	.+14     	; 0x13b0 <__divsf3_pse+0x26>
    13a2:	9f 5f       	subi	r25, 0xFF	; 255
    13a4:	5f 4f       	sbci	r21, 0xFF	; 255
    13a6:	22 0f       	add	r18, r18
    13a8:	33 1f       	adc	r19, r19
    13aa:	44 1f       	adc	r20, r20
    13ac:	aa 1f       	adc	r26, r26
    13ae:	a9 f3       	breq	.-22     	; 0x139a <__divsf3_pse+0x10>
    13b0:	35 d0       	rcall	.+106    	; 0x141c <__divsf3_pse+0x92>
    13b2:	0e 2e       	mov	r0, r30
    13b4:	3a f0       	brmi	.+14     	; 0x13c4 <__divsf3_pse+0x3a>
    13b6:	e0 e8       	ldi	r30, 0x80	; 128
    13b8:	32 d0       	rcall	.+100    	; 0x141e <__divsf3_pse+0x94>
    13ba:	91 50       	subi	r25, 0x01	; 1
    13bc:	50 40       	sbci	r21, 0x00	; 0
    13be:	e6 95       	lsr	r30
    13c0:	00 1c       	adc	r0, r0
    13c2:	ca f7       	brpl	.-14     	; 0x13b6 <__divsf3_pse+0x2c>
    13c4:	2b d0       	rcall	.+86     	; 0x141c <__divsf3_pse+0x92>
    13c6:	fe 2f       	mov	r31, r30
    13c8:	29 d0       	rcall	.+82     	; 0x141c <__divsf3_pse+0x92>
    13ca:	66 0f       	add	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	bb 1f       	adc	r27, r27
    13d2:	26 17       	cp	r18, r22
    13d4:	37 07       	cpc	r19, r23
    13d6:	48 07       	cpc	r20, r24
    13d8:	ab 07       	cpc	r26, r27
    13da:	b0 e8       	ldi	r27, 0x80	; 128
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <__divsf3_pse+0x56>
    13de:	bb 0b       	sbc	r27, r27
    13e0:	80 2d       	mov	r24, r0
    13e2:	bf 01       	movw	r22, r30
    13e4:	ff 27       	eor	r31, r31
    13e6:	93 58       	subi	r25, 0x83	; 131
    13e8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ea:	3a f0       	brmi	.+14     	; 0x13fa <__divsf3_pse+0x70>
    13ec:	9e 3f       	cpi	r25, 0xFE	; 254
    13ee:	51 05       	cpc	r21, r1
    13f0:	78 f0       	brcs	.+30     	; 0x1410 <__divsf3_pse+0x86>
    13f2:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    13f6:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__fp_szero>
    13fa:	5f 3f       	cpi	r21, 0xFF	; 255
    13fc:	e4 f3       	brlt	.-8      	; 0x13f6 <__divsf3_pse+0x6c>
    13fe:	98 3e       	cpi	r25, 0xE8	; 232
    1400:	d4 f3       	brlt	.-12     	; 0x13f6 <__divsf3_pse+0x6c>
    1402:	86 95       	lsr	r24
    1404:	77 95       	ror	r23
    1406:	67 95       	ror	r22
    1408:	b7 95       	ror	r27
    140a:	f7 95       	ror	r31
    140c:	9f 5f       	subi	r25, 0xFF	; 255
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__divsf3_pse+0x78>
    1410:	88 0f       	add	r24, r24
    1412:	91 1d       	adc	r25, r1
    1414:	96 95       	lsr	r25
    1416:	87 95       	ror	r24
    1418:	97 f9       	bld	r25, 7
    141a:	08 95       	ret
    141c:	e1 e0       	ldi	r30, 0x01	; 1
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	88 1f       	adc	r24, r24
    1424:	bb 1f       	adc	r27, r27
    1426:	62 17       	cp	r22, r18
    1428:	73 07       	cpc	r23, r19
    142a:	84 07       	cpc	r24, r20
    142c:	ba 07       	cpc	r27, r26
    142e:	20 f0       	brcs	.+8      	; 0x1438 <__divsf3_pse+0xae>
    1430:	62 1b       	sub	r22, r18
    1432:	73 0b       	sbc	r23, r19
    1434:	84 0b       	sbc	r24, r20
    1436:	ba 0b       	sbc	r27, r26
    1438:	ee 1f       	adc	r30, r30
    143a:	88 f7       	brcc	.-30     	; 0x141e <__divsf3_pse+0x94>
    143c:	e0 95       	com	r30
    143e:	08 95       	ret

00001440 <__fixunssfsi>:
    1440:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__fp_splitA>
    1444:	88 f0       	brcs	.+34     	; 0x1468 <__fixunssfsi+0x28>
    1446:	9f 57       	subi	r25, 0x7F	; 127
    1448:	98 f0       	brcs	.+38     	; 0x1470 <__fixunssfsi+0x30>
    144a:	b9 2f       	mov	r27, r25
    144c:	99 27       	eor	r25, r25
    144e:	b7 51       	subi	r27, 0x17	; 23
    1450:	b0 f0       	brcs	.+44     	; 0x147e <__fixunssfsi+0x3e>
    1452:	e1 f0       	breq	.+56     	; 0x148c <__fixunssfsi+0x4c>
    1454:	66 0f       	add	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	1a f0       	brmi	.+6      	; 0x1464 <__fixunssfsi+0x24>
    145e:	ba 95       	dec	r27
    1460:	c9 f7       	brne	.-14     	; 0x1454 <__fixunssfsi+0x14>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <__fixunssfsi+0x4c>
    1464:	b1 30       	cpi	r27, 0x01	; 1
    1466:	91 f0       	breq	.+36     	; 0x148c <__fixunssfsi+0x4c>
    1468:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__fp_zero>
    146c:	b1 e0       	ldi	r27, 0x01	; 1
    146e:	08 95       	ret
    1470:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_zero>
    1474:	67 2f       	mov	r22, r23
    1476:	78 2f       	mov	r23, r24
    1478:	88 27       	eor	r24, r24
    147a:	b8 5f       	subi	r27, 0xF8	; 248
    147c:	39 f0       	breq	.+14     	; 0x148c <__fixunssfsi+0x4c>
    147e:	b9 3f       	cpi	r27, 0xF9	; 249
    1480:	cc f3       	brlt	.-14     	; 0x1474 <__fixunssfsi+0x34>
    1482:	86 95       	lsr	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b3 95       	inc	r27
    148a:	d9 f7       	brne	.-10     	; 0x1482 <__fixunssfsi+0x42>
    148c:	3e f4       	brtc	.+14     	; 0x149c <__fixunssfsi+0x5c>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	08 95       	ret

0000149e <__floatunsisf>:
    149e:	e8 94       	clt
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <__floatsisf+0x12>

000014a2 <__floatsisf>:
    14a2:	97 fb       	bst	r25, 7
    14a4:	3e f4       	brtc	.+14     	; 0x14b4 <__floatsisf+0x12>
    14a6:	90 95       	com	r25
    14a8:	80 95       	com	r24
    14aa:	70 95       	com	r23
    14ac:	61 95       	neg	r22
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	8f 4f       	sbci	r24, 0xFF	; 255
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	99 23       	and	r25, r25
    14b6:	a9 f0       	breq	.+42     	; 0x14e2 <__floatsisf+0x40>
    14b8:	f9 2f       	mov	r31, r25
    14ba:	96 e9       	ldi	r25, 0x96	; 150
    14bc:	bb 27       	eor	r27, r27
    14be:	93 95       	inc	r25
    14c0:	f6 95       	lsr	r31
    14c2:	87 95       	ror	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f1 11       	cpse	r31, r1
    14cc:	f8 cf       	rjmp	.-16     	; 0x14be <__floatsisf+0x1c>
    14ce:	fa f4       	brpl	.+62     	; 0x150e <__floatsisf+0x6c>
    14d0:	bb 0f       	add	r27, r27
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <__floatsisf+0x36>
    14d4:	60 ff       	sbrs	r22, 0
    14d6:	1b c0       	rjmp	.+54     	; 0x150e <__floatsisf+0x6c>
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	8f 4f       	sbci	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	16 c0       	rjmp	.+44     	; 0x150e <__floatsisf+0x6c>
    14e2:	88 23       	and	r24, r24
    14e4:	11 f0       	breq	.+4      	; 0x14ea <__floatsisf+0x48>
    14e6:	96 e9       	ldi	r25, 0x96	; 150
    14e8:	11 c0       	rjmp	.+34     	; 0x150c <__floatsisf+0x6a>
    14ea:	77 23       	and	r23, r23
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <__floatsisf+0x54>
    14ee:	9e e8       	ldi	r25, 0x8E	; 142
    14f0:	87 2f       	mov	r24, r23
    14f2:	76 2f       	mov	r23, r22
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <__floatsisf+0x5e>
    14f6:	66 23       	and	r22, r22
    14f8:	71 f0       	breq	.+28     	; 0x1516 <__floatsisf+0x74>
    14fa:	96 e8       	ldi	r25, 0x86	; 134
    14fc:	86 2f       	mov	r24, r22
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	2a f0       	brmi	.+10     	; 0x150e <__floatsisf+0x6c>
    1504:	9a 95       	dec	r25
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	88 1f       	adc	r24, r24
    150c:	da f7       	brpl	.-10     	; 0x1504 <__floatsisf+0x62>
    150e:	88 0f       	add	r24, r24
    1510:	96 95       	lsr	r25
    1512:	87 95       	ror	r24
    1514:	97 f9       	bld	r25, 7
    1516:	08 95       	ret

00001518 <__fp_inf>:
    1518:	97 f9       	bld	r25, 7
    151a:	9f 67       	ori	r25, 0x7F	; 127
    151c:	80 e8       	ldi	r24, 0x80	; 128
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	08 95       	ret

00001524 <__fp_nan>:
    1524:	9f ef       	ldi	r25, 0xFF	; 255
    1526:	80 ec       	ldi	r24, 0xC0	; 192
    1528:	08 95       	ret

0000152a <__fp_pscA>:
    152a:	00 24       	eor	r0, r0
    152c:	0a 94       	dec	r0
    152e:	16 16       	cp	r1, r22
    1530:	17 06       	cpc	r1, r23
    1532:	18 06       	cpc	r1, r24
    1534:	09 06       	cpc	r0, r25
    1536:	08 95       	ret

00001538 <__fp_pscB>:
    1538:	00 24       	eor	r0, r0
    153a:	0a 94       	dec	r0
    153c:	12 16       	cp	r1, r18
    153e:	13 06       	cpc	r1, r19
    1540:	14 06       	cpc	r1, r20
    1542:	05 06       	cpc	r0, r21
    1544:	08 95       	ret

00001546 <__fp_round>:
    1546:	09 2e       	mov	r0, r25
    1548:	03 94       	inc	r0
    154a:	00 0c       	add	r0, r0
    154c:	11 f4       	brne	.+4      	; 0x1552 <__fp_round+0xc>
    154e:	88 23       	and	r24, r24
    1550:	52 f0       	brmi	.+20     	; 0x1566 <__fp_round+0x20>
    1552:	bb 0f       	add	r27, r27
    1554:	40 f4       	brcc	.+16     	; 0x1566 <__fp_round+0x20>
    1556:	bf 2b       	or	r27, r31
    1558:	11 f4       	brne	.+4      	; 0x155e <__fp_round+0x18>
    155a:	60 ff       	sbrs	r22, 0
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <__fp_round+0x20>
    155e:	6f 5f       	subi	r22, 0xFF	; 255
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	8f 4f       	sbci	r24, 0xFF	; 255
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	08 95       	ret

00001568 <__fp_split3>:
    1568:	57 fd       	sbrc	r21, 7
    156a:	90 58       	subi	r25, 0x80	; 128
    156c:	44 0f       	add	r20, r20
    156e:	55 1f       	adc	r21, r21
    1570:	59 f0       	breq	.+22     	; 0x1588 <__fp_splitA+0x10>
    1572:	5f 3f       	cpi	r21, 0xFF	; 255
    1574:	71 f0       	breq	.+28     	; 0x1592 <__fp_splitA+0x1a>
    1576:	47 95       	ror	r20

00001578 <__fp_splitA>:
    1578:	88 0f       	add	r24, r24
    157a:	97 fb       	bst	r25, 7
    157c:	99 1f       	adc	r25, r25
    157e:	61 f0       	breq	.+24     	; 0x1598 <__fp_splitA+0x20>
    1580:	9f 3f       	cpi	r25, 0xFF	; 255
    1582:	79 f0       	breq	.+30     	; 0x15a2 <__fp_splitA+0x2a>
    1584:	87 95       	ror	r24
    1586:	08 95       	ret
    1588:	12 16       	cp	r1, r18
    158a:	13 06       	cpc	r1, r19
    158c:	14 06       	cpc	r1, r20
    158e:	55 1f       	adc	r21, r21
    1590:	f2 cf       	rjmp	.-28     	; 0x1576 <__fp_split3+0xe>
    1592:	46 95       	lsr	r20
    1594:	f1 df       	rcall	.-30     	; 0x1578 <__fp_splitA>
    1596:	08 c0       	rjmp	.+16     	; 0x15a8 <__fp_splitA+0x30>
    1598:	16 16       	cp	r1, r22
    159a:	17 06       	cpc	r1, r23
    159c:	18 06       	cpc	r1, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	f1 cf       	rjmp	.-30     	; 0x1584 <__fp_splitA+0xc>
    15a2:	86 95       	lsr	r24
    15a4:	71 05       	cpc	r23, r1
    15a6:	61 05       	cpc	r22, r1
    15a8:	08 94       	sec
    15aa:	08 95       	ret

000015ac <__fp_zero>:
    15ac:	e8 94       	clt

000015ae <__fp_szero>:
    15ae:	bb 27       	eor	r27, r27
    15b0:	66 27       	eor	r22, r22
    15b2:	77 27       	eor	r23, r23
    15b4:	cb 01       	movw	r24, r22
    15b6:	97 f9       	bld	r25, 7
    15b8:	08 95       	ret

000015ba <__mulsf3>:
    15ba:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__mulsf3x>
    15be:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__fp_round>
    15c2:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_pscA>
    15c6:	38 f0       	brcs	.+14     	; 0x15d6 <__mulsf3+0x1c>
    15c8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_pscB>
    15cc:	20 f0       	brcs	.+8      	; 0x15d6 <__mulsf3+0x1c>
    15ce:	95 23       	and	r25, r21
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <__mulsf3+0x1c>
    15d2:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    15d6:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__fp_nan>
    15da:	11 24       	eor	r1, r1
    15dc:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__fp_szero>

000015e0 <__mulsf3x>:
    15e0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_split3>
    15e4:	70 f3       	brcs	.-36     	; 0x15c2 <__mulsf3+0x8>

000015e6 <__mulsf3_pse>:
    15e6:	95 9f       	mul	r25, r21
    15e8:	c1 f3       	breq	.-16     	; 0x15da <__mulsf3+0x20>
    15ea:	95 0f       	add	r25, r21
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	55 1f       	adc	r21, r21
    15f0:	62 9f       	mul	r22, r18
    15f2:	f0 01       	movw	r30, r0
    15f4:	72 9f       	mul	r23, r18
    15f6:	bb 27       	eor	r27, r27
    15f8:	f0 0d       	add	r31, r0
    15fa:	b1 1d       	adc	r27, r1
    15fc:	63 9f       	mul	r22, r19
    15fe:	aa 27       	eor	r26, r26
    1600:	f0 0d       	add	r31, r0
    1602:	b1 1d       	adc	r27, r1
    1604:	aa 1f       	adc	r26, r26
    1606:	64 9f       	mul	r22, r20
    1608:	66 27       	eor	r22, r22
    160a:	b0 0d       	add	r27, r0
    160c:	a1 1d       	adc	r26, r1
    160e:	66 1f       	adc	r22, r22
    1610:	82 9f       	mul	r24, r18
    1612:	22 27       	eor	r18, r18
    1614:	b0 0d       	add	r27, r0
    1616:	a1 1d       	adc	r26, r1
    1618:	62 1f       	adc	r22, r18
    161a:	73 9f       	mul	r23, r19
    161c:	b0 0d       	add	r27, r0
    161e:	a1 1d       	adc	r26, r1
    1620:	62 1f       	adc	r22, r18
    1622:	83 9f       	mul	r24, r19
    1624:	a0 0d       	add	r26, r0
    1626:	61 1d       	adc	r22, r1
    1628:	22 1f       	adc	r18, r18
    162a:	74 9f       	mul	r23, r20
    162c:	33 27       	eor	r19, r19
    162e:	a0 0d       	add	r26, r0
    1630:	61 1d       	adc	r22, r1
    1632:	23 1f       	adc	r18, r19
    1634:	84 9f       	mul	r24, r20
    1636:	60 0d       	add	r22, r0
    1638:	21 1d       	adc	r18, r1
    163a:	82 2f       	mov	r24, r18
    163c:	76 2f       	mov	r23, r22
    163e:	6a 2f       	mov	r22, r26
    1640:	11 24       	eor	r1, r1
    1642:	9f 57       	subi	r25, 0x7F	; 127
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	9a f0       	brmi	.+38     	; 0x166e <__mulsf3_pse+0x88>
    1648:	f1 f0       	breq	.+60     	; 0x1686 <__mulsf3_pse+0xa0>
    164a:	88 23       	and	r24, r24
    164c:	4a f0       	brmi	.+18     	; 0x1660 <__mulsf3_pse+0x7a>
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	bb 1f       	adc	r27, r27
    1654:	66 1f       	adc	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	a9 f7       	brne	.-22     	; 0x164a <__mulsf3_pse+0x64>
    1660:	9e 3f       	cpi	r25, 0xFE	; 254
    1662:	51 05       	cpc	r21, r1
    1664:	80 f0       	brcs	.+32     	; 0x1686 <__mulsf3_pse+0xa0>
    1666:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__fp_inf>
    166a:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__fp_szero>
    166e:	5f 3f       	cpi	r21, 0xFF	; 255
    1670:	e4 f3       	brlt	.-8      	; 0x166a <__mulsf3_pse+0x84>
    1672:	98 3e       	cpi	r25, 0xE8	; 232
    1674:	d4 f3       	brlt	.-12     	; 0x166a <__mulsf3_pse+0x84>
    1676:	86 95       	lsr	r24
    1678:	77 95       	ror	r23
    167a:	67 95       	ror	r22
    167c:	b7 95       	ror	r27
    167e:	f7 95       	ror	r31
    1680:	e7 95       	ror	r30
    1682:	9f 5f       	subi	r25, 0xFF	; 255
    1684:	c1 f7       	brne	.-16     	; 0x1676 <__mulsf3_pse+0x90>
    1686:	fe 2b       	or	r31, r30
    1688:	88 0f       	add	r24, r24
    168a:	91 1d       	adc	r25, r1
    168c:	96 95       	lsr	r25
    168e:	87 95       	ror	r24
    1690:	97 f9       	bld	r25, 7
    1692:	08 95       	ret

00001694 <__divmodhi4>:
    1694:	97 fb       	bst	r25, 7
    1696:	07 2e       	mov	r0, r23
    1698:	16 f4       	brtc	.+4      	; 0x169e <__divmodhi4+0xa>
    169a:	00 94       	com	r0
    169c:	07 d0       	rcall	.+14     	; 0x16ac <__divmodhi4_neg1>
    169e:	77 fd       	sbrc	r23, 7
    16a0:	09 d0       	rcall	.+18     	; 0x16b4 <__divmodhi4_neg2>
    16a2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__udivmodhi4>
    16a6:	07 fc       	sbrc	r0, 7
    16a8:	05 d0       	rcall	.+10     	; 0x16b4 <__divmodhi4_neg2>
    16aa:	3e f4       	brtc	.+14     	; 0x16ba <__divmodhi4_exit>

000016ac <__divmodhi4_neg1>:
    16ac:	90 95       	com	r25
    16ae:	81 95       	neg	r24
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	08 95       	ret

000016b4 <__divmodhi4_neg2>:
    16b4:	70 95       	com	r23
    16b6:	61 95       	neg	r22
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255

000016ba <__divmodhi4_exit>:
    16ba:	08 95       	ret

000016bc <__divmodsi4>:
    16bc:	05 2e       	mov	r0, r21
    16be:	97 fb       	bst	r25, 7
    16c0:	1e f4       	brtc	.+6      	; 0x16c8 <__divmodsi4+0xc>
    16c2:	00 94       	com	r0
    16c4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__negsi2>
    16c8:	57 fd       	sbrc	r21, 7
    16ca:	07 d0       	rcall	.+14     	; 0x16da <__divmodsi4_neg2>
    16cc:	0e 94 91 0b 	call	0x1722	; 0x1722 <__udivmodsi4>
    16d0:	07 fc       	sbrc	r0, 7
    16d2:	03 d0       	rcall	.+6      	; 0x16da <__divmodsi4_neg2>
    16d4:	4e f4       	brtc	.+18     	; 0x16e8 <__divmodsi4_exit>
    16d6:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__negsi2>

000016da <__divmodsi4_neg2>:
    16da:	50 95       	com	r21
    16dc:	40 95       	com	r20
    16de:	30 95       	com	r19
    16e0:	21 95       	neg	r18
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	4f 4f       	sbci	r20, 0xFF	; 255
    16e6:	5f 4f       	sbci	r21, 0xFF	; 255

000016e8 <__divmodsi4_exit>:
    16e8:	08 95       	ret

000016ea <__negsi2>:
    16ea:	90 95       	com	r25
    16ec:	80 95       	com	r24
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	08 95       	ret

000016fa <__udivmodhi4>:
    16fa:	aa 1b       	sub	r26, r26
    16fc:	bb 1b       	sub	r27, r27
    16fe:	51 e1       	ldi	r21, 0x11	; 17
    1700:	07 c0       	rjmp	.+14     	; 0x1710 <__udivmodhi4_ep>

00001702 <__udivmodhi4_loop>:
    1702:	aa 1f       	adc	r26, r26
    1704:	bb 1f       	adc	r27, r27
    1706:	a6 17       	cp	r26, r22
    1708:	b7 07       	cpc	r27, r23
    170a:	10 f0       	brcs	.+4      	; 0x1710 <__udivmodhi4_ep>
    170c:	a6 1b       	sub	r26, r22
    170e:	b7 0b       	sbc	r27, r23

00001710 <__udivmodhi4_ep>:
    1710:	88 1f       	adc	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	5a 95       	dec	r21
    1716:	a9 f7       	brne	.-22     	; 0x1702 <__udivmodhi4_loop>
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	08 95       	ret

00001722 <__udivmodsi4>:
    1722:	a1 e2       	ldi	r26, 0x21	; 33
    1724:	1a 2e       	mov	r1, r26
    1726:	aa 1b       	sub	r26, r26
    1728:	bb 1b       	sub	r27, r27
    172a:	fd 01       	movw	r30, r26
    172c:	0d c0       	rjmp	.+26     	; 0x1748 <__udivmodsi4_ep>

0000172e <__udivmodsi4_loop>:
    172e:	aa 1f       	adc	r26, r26
    1730:	bb 1f       	adc	r27, r27
    1732:	ee 1f       	adc	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	a2 17       	cp	r26, r18
    1738:	b3 07       	cpc	r27, r19
    173a:	e4 07       	cpc	r30, r20
    173c:	f5 07       	cpc	r31, r21
    173e:	20 f0       	brcs	.+8      	; 0x1748 <__udivmodsi4_ep>
    1740:	a2 1b       	sub	r26, r18
    1742:	b3 0b       	sbc	r27, r19
    1744:	e4 0b       	sbc	r30, r20
    1746:	f5 0b       	sbc	r31, r21

00001748 <__udivmodsi4_ep>:
    1748:	66 1f       	adc	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	1a 94       	dec	r1
    1752:	69 f7       	brne	.-38     	; 0x172e <__udivmodsi4_loop>
    1754:	60 95       	com	r22
    1756:	70 95       	com	r23
    1758:	80 95       	com	r24
    175a:	90 95       	com	r25
    175c:	9b 01       	movw	r18, r22
    175e:	ac 01       	movw	r20, r24
    1760:	bd 01       	movw	r22, r26
    1762:	cf 01       	movw	r24, r30
    1764:	08 95       	ret

00001766 <_exit>:
    1766:	f8 94       	cli

00001768 <__stop_program>:
    1768:	ff cf       	rjmp	.-2      	; 0x1768 <__stop_program>
