
AmpLedMod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000025ba  0000264e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028c  00800156  00800156  000026a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b1  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074a  00000000  00000000  00003d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086e  00000000  00000000  00004453  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000550  00000000  00000000  00004cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016f9  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00006eb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_18>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	c1 01       	movw	r24, r2
      6a:	bd 01       	movw	r22, r26
      6c:	e2 01       	movw	r28, r4
      6e:	ee 01       	movw	r28, r28
      70:	e6 01       	movw	r28, r12
      72:	ea 01       	movw	r28, r20
      74:	f2 01       	movw	r30, r4
      76:	05 a8       	ldd	r0, Z+53	; 0x35
      78:	4c cd       	rjmp	.-1384   	; 0xfffffb12 <__eeprom_end+0xff7efb12>
      7a:	b2 d4       	rcall	.+2404   	; 0x9e0 <seqDoublePingPongFunc+0x162>
      7c:	4e b9       	out	0x0e, r20	; 14
      7e:	38 36       	cpi	r19, 0x68	; 104
      80:	a9 02       	muls	r26, r25
      82:	0c 50       	subi	r16, 0x0C	; 12
      84:	b9 91       	ld	r27, Y+
      86:	86 88       	ldd	r8, Z+22	; 0x16
      88:	08 3c       	cpi	r16, 0xC8	; 200
      8a:	a6 aa       	std	Z+54, r10	; 0x36
      8c:	aa 2a       	or	r10, r26
      8e:	be 00       	.word	0x00be	; ????
      90:	00 00       	nop
      92:	80 3f       	cpi	r24, 0xF0	; 240

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d4 e0       	ldi	r29, 0x04	; 4
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea eb       	ldi	r30, 0xBA	; 186
      a8:	f5 e2       	ldi	r31, 0x25	; 37
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a6 35       	cpi	r26, 0x56	; 86
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	23 e0       	ldi	r18, 0x03	; 3
      b8:	a6 e5       	ldi	r26, 0x56	; 86
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a2 3e       	cpi	r26, 0xE2	; 226
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
      ca:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <bluetoothGetFrame>:
static volatile uint8_t ringBufferTmp = 0;

// ----------------------------------------------------------------------- Definitions

int8_t bluetoothGetFrame(void *frame, uint8_t max_len)
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	dc 01       	movw	r26, r24
	uint8_t *data = frame;
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
      d8:	40 91 57 01 	lds	r20, 0x0157
      dc:	80 91 58 01 	lds	r24, 0x0158
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	48 1b       	sub	r20, r24
      e4:	51 09       	sbc	r21, r1
	if(len < 0) {
      e6:	0a f0       	brmi	.+2      	; 0xea <bluetoothGetFrame+0x18>
      e8:	b8 c0       	rjmp	.+368    	; 0x25a <bluetoothGetFrame+0x188>
		len += RING_BUFFER_SIZE;
      ea:	40 58       	subi	r20, 0x80	; 128
      ec:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	if(len < 2) {
      ee:	42 30       	cpi	r20, 0x02	; 2
      f0:	51 05       	cpc	r21, r1
      f2:	0c f4       	brge	.+2      	; 0xf6 <bluetoothGetFrame+0x24>
      f4:	ac c0       	rjmp	.+344    	; 0x24e <bluetoothGetFrame+0x17c>
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
	{
		/* Look for start byte. */
		if(RING_BUF_AT(ringBufferReadPos) == 0xFF) {
      f6:	e0 91 58 01 	lds	r30, 0x0158
      fa:	ef 77       	andi	r30, 0x7F	; 127
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	e7 5a       	subi	r30, 0xA7	; 167
     100:	fe 4f       	sbci	r31, 0xFE	; 254
     102:	80 81       	ld	r24, Z
     104:	8f 3f       	cpi	r24, 0xFF	; 255
     106:	c1 f4       	brne	.+48     	; 0x138 <bluetoothGetFrame+0x66>
     108:	09 c0       	rjmp	.+18     	; 0x11c <bluetoothGetFrame+0x4a>
     10a:	e0 91 58 01 	lds	r30, 0x0158
     10e:	ef 77       	andi	r30, 0x7F	; 127
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	e7 5a       	subi	r30, 0xA7	; 167
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	90 81       	ld	r25, Z
     118:	9f 3f       	cpi	r25, 0xFF	; 255
     11a:	71 f4       	brne	.+28     	; 0x138 <bluetoothGetFrame+0x66>
			/* Check if whole frame is in ring buffer. */
			if(len-2 >= RING_BUF_AT(ringBufferReadPos+1)) {
     11c:	e0 91 58 01 	lds	r30, 0x0158
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	e6 5a       	subi	r30, 0xA6	; 166
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	80 81       	ld	r24, Z
     128:	42 50       	subi	r20, 0x02	; 2
     12a:	51 09       	sbc	r21, r1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	48 17       	cp	r20, r24
     130:	59 07       	cpc	r21, r25
     132:	c4 f4       	brge	.+48     	; 0x164 <bluetoothGetFrame+0x92>
				break;
			} else {
				/* Frame is not received yet. */
				return 0;
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	96 c0       	rjmp	.+300    	; 0x264 <bluetoothGetFrame+0x192>
			}
		} else {
			RING_BUF_INC(ringBufferReadPos);
     138:	20 91 58 01 	lds	r18, 0x0158
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	2f 5f       	subi	r18, 0xFF	; 255
     140:	3f 4f       	sbci	r19, 0xFF	; 255
     142:	2f 77       	andi	r18, 0x7F	; 127
     144:	30 78       	andi	r19, 0x80	; 128
     146:	33 23       	and	r19, r19
     148:	34 f4       	brge	.+12     	; 0x156 <bluetoothGetFrame+0x84>
     14a:	21 50       	subi	r18, 0x01	; 1
     14c:	31 09       	sbc	r19, r1
     14e:	20 68       	ori	r18, 0x80	; 128
     150:	3f 6f       	ori	r19, 0xFF	; 255
     152:	2f 5f       	subi	r18, 0xFF	; 255
     154:	3f 4f       	sbci	r19, 0xFF	; 255
     156:	20 93 58 01 	sts	0x0158, r18
			len--;
     15a:	41 50       	subi	r20, 0x01	; 1
     15c:	51 09       	sbc	r21, r1
	if(len < 2) {
		return 0;
	}
	
	/* We need to read first to bytes, to know length of the frame. */
	while(len >= 2)
     15e:	42 30       	cpi	r20, 0x02	; 2
     160:	51 05       	cpc	r21, r1
     162:	9c f6       	brge	.-90     	; 0x10a <bluetoothGetFrame+0x38>
			RING_BUF_INC(ringBufferReadPos);
			len--;
		}
	}
	
	len = RING_BUF_AT(ringBufferReadPos+1);
     164:	e0 91 58 01 	lds	r30, 0x0158
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	e6 5a       	subi	r30, 0xA6	; 166
     16c:	fe 4f       	sbci	r31, 0xFE	; 254
     16e:	40 81       	ld	r20, Z
     170:	24 2f       	mov	r18, r20
     172:	30 e0       	ldi	r19, 0x00	; 0
	RING_BUF_INC(ringBufferReadPos);
     174:	80 91 58 01 	lds	r24, 0x0158
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	8f 77       	andi	r24, 0x7F	; 127
     17e:	90 78       	andi	r25, 0x80	; 128
     180:	99 23       	and	r25, r25
     182:	24 f4       	brge	.+8      	; 0x18c <bluetoothGetFrame+0xba>
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	80 68       	ori	r24, 0x80	; 128
     188:	9f 6f       	ori	r25, 0xFF	; 255
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	80 93 58 01 	sts	0x0158, r24
	RING_BUF_INC(ringBufferReadPos);
     190:	80 91 58 01 	lds	r24, 0x0158
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	8f 77       	andi	r24, 0x7F	; 127
     19a:	90 78       	andi	r25, 0x80	; 128
     19c:	99 23       	and	r25, r25
     19e:	24 f4       	brge	.+8      	; 0x1a8 <bluetoothGetFrame+0xd6>
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	80 68       	ori	r24, 0x80	; 128
     1a4:	9f 6f       	ori	r25, 0xFF	; 255
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	80 93 58 01 	sts	0x0158, r24
	if(len > max_len)
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	62 17       	cp	r22, r18
     1b0:	73 07       	cpc	r23, r19
     1b2:	0c f4       	brge	.+2      	; 0x1b6 <bluetoothGetFrame+0xe4>
     1b4:	4e c0       	rjmp	.+156    	; 0x252 <bluetoothGetFrame+0x180>
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
     1b6:	12 16       	cp	r1, r18
     1b8:	13 06       	cpc	r1, r19
     1ba:	04 f5       	brge	.+64     	; 0x1fc <bluetoothGetFrame+0x12a>
     1bc:	ed 01       	movw	r28, r26
     1be:	a4 0f       	add	r26, r20
     1c0:	b1 1d       	adc	r27, r1
	{
		tmp = RING_BUF_AT(ringBufferReadPos);
     1c2:	e0 91 58 01 	lds	r30, 0x0158
     1c6:	ef 77       	andi	r30, 0x7F	; 127
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	e7 5a       	subi	r30, 0xA7	; 167
     1cc:	fe 4f       	sbci	r31, 0xFE	; 254
     1ce:	90 81       	ld	r25, Z
		checksum += tmp;
     1d0:	49 0f       	add	r20, r25
		data[i] = tmp;
     1d2:	99 93       	st	Y+, r25
		RING_BUF_INC(ringBufferReadPos);
     1d4:	20 91 58 01 	lds	r18, 0x0158
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	2f 5f       	subi	r18, 0xFF	; 255
     1dc:	3f 4f       	sbci	r19, 0xFF	; 255
     1de:	2f 77       	andi	r18, 0x7F	; 127
     1e0:	30 78       	andi	r19, 0x80	; 128
     1e2:	33 23       	and	r19, r19
     1e4:	34 f4       	brge	.+12     	; 0x1f2 <bluetoothGetFrame+0x120>
     1e6:	21 50       	subi	r18, 0x01	; 1
     1e8:	31 09       	sbc	r19, r1
     1ea:	20 68       	ori	r18, 0x80	; 128
     1ec:	3f 6f       	ori	r19, 0xFF	; 255
     1ee:	2f 5f       	subi	r18, 0xFF	; 255
     1f0:	3f 4f       	sbci	r19, 0xFF	; 255
     1f2:	20 93 58 01 	sts	0x0158, r18
	if(len > max_len)
		return 0;
	
	uint8_t checksum = len;
	uint8_t tmp;
	for(int i = 0; i < len; i++)
     1f6:	ca 17       	cp	r28, r26
     1f8:	db 07       	cpc	r29, r27
     1fa:	19 f7       	brne	.-58     	; 0x1c2 <bluetoothGetFrame+0xf0>
		tmp = RING_BUF_AT(ringBufferReadPos);
		checksum += tmp;
		data[i] = tmp;
		RING_BUF_INC(ringBufferReadPos);
	}
	if(checksum == RING_BUF_AT(ringBufferReadPos)) {
     1fc:	e0 91 58 01 	lds	r30, 0x0158
     200:	ef 77       	andi	r30, 0x7F	; 127
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	e7 5a       	subi	r30, 0xA7	; 167
     206:	fe 4f       	sbci	r31, 0xFE	; 254
     208:	80 81       	ld	r24, Z
     20a:	84 13       	cpse	r24, r20
     20c:	10 c0       	rjmp	.+32     	; 0x22e <bluetoothGetFrame+0x15c>
		RING_BUF_INC(ringBufferReadPos);
     20e:	80 91 58 01 	lds	r24, 0x0158
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	8f 77       	andi	r24, 0x7F	; 127
     218:	90 78       	andi	r25, 0x80	; 128
     21a:	99 23       	and	r25, r25
     21c:	24 f4       	brge	.+8      	; 0x226 <bluetoothGetFrame+0x154>
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	80 68       	ori	r24, 0x80	; 128
     222:	9f 6f       	ori	r25, 0xFF	; 255
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	80 93 58 01 	sts	0x0158, r24
		return 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	1b c0       	rjmp	.+54     	; 0x264 <bluetoothGetFrame+0x192>
	} else {
		RING_BUF_INC(ringBufferReadPos);
     22e:	80 91 58 01 	lds	r24, 0x0158
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	8f 77       	andi	r24, 0x7F	; 127
     238:	90 78       	andi	r25, 0x80	; 128
     23a:	99 23       	and	r25, r25
     23c:	24 f4       	brge	.+8      	; 0x246 <bluetoothGetFrame+0x174>
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	80 68       	ori	r24, 0x80	; 128
     242:	9f 6f       	ori	r25, 0xFF	; 255
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	80 93 58 01 	sts	0x0158, r24
		return 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0b c0       	rjmp	.+22     	; 0x264 <bluetoothGetFrame+0x192>
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
		return 0;
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	09 c0       	rjmp	.+18     	; 0x264 <bluetoothGetFrame+0x192>
	
	len = RING_BUF_AT(ringBufferReadPos+1);
	RING_BUF_INC(ringBufferReadPos);
	RING_BUF_INC(ringBufferReadPos);
	if(len > max_len)
		return 0;
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	07 c0       	rjmp	.+14     	; 0x264 <bluetoothGetFrame+0x192>
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
		return 0;
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	05 c0       	rjmp	.+10     	; 0x264 <bluetoothGetFrame+0x192>
	/* Calculate number of bytes in ring buffer. */
	int len = (int)ringBufferWritePos - ringBufferReadPos;
	if(len < 0) {
		len += RING_BUFFER_SIZE;
	}
	if(len < 2) {
     25a:	42 30       	cpi	r20, 0x02	; 2
     25c:	51 05       	cpc	r21, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <bluetoothGetFrame+0x190>
     260:	4a cf       	rjmp	.-364    	; 0xf6 <bluetoothGetFrame+0x24>
     262:	f9 cf       	rjmp	.-14     	; 0x256 <bluetoothGetFrame+0x184>
		return 1;
	} else {
		RING_BUF_INC(ringBufferReadPos);
		return 0;
	}
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <__vector_18>:

ISR(USART_RX_vect)
{
     26a:	1f 92       	push	r1
     26c:	0f 92       	push	r0
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	0f 92       	push	r0
     272:	11 24       	eor	r1, r1
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	ef 93       	push	r30
     27a:	ff 93       	push	r31
	ringBufferTmp = (ringBufferWritePos+1)%RING_BUFFER_SIZE;
     27c:	80 91 57 01 	lds	r24, 0x0157
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	8f 77       	andi	r24, 0x7F	; 127
     286:	90 78       	andi	r25, 0x80	; 128
     288:	99 23       	and	r25, r25
     28a:	24 f4       	brge	.+8      	; 0x294 <__vector_18+0x2a>
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	80 68       	ori	r24, 0x80	; 128
     290:	9f 6f       	ori	r25, 0xFF	; 255
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	80 93 56 01 	sts	0x0156, r24
	if(ringBufferTmp != ringBufferReadPos)
     298:	90 91 56 01 	lds	r25, 0x0156
     29c:	80 91 58 01 	lds	r24, 0x0158
     2a0:	98 17       	cp	r25, r24
     2a2:	61 f0       	breq	.+24     	; 0x2bc <__vector_18+0x52>
	{
		ringBuffer[ringBufferWritePos] = UDR0;
     2a4:	e0 91 57 01 	lds	r30, 0x0157
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 91 c6 00 	lds	r24, 0x00C6
     2ae:	e7 5a       	subi	r30, 0xA7	; 167
     2b0:	fe 4f       	sbci	r31, 0xFE	; 254
     2b2:	80 83       	st	Z, r24
		ringBufferWritePos = ringBufferTmp;
     2b4:	80 91 56 01 	lds	r24, 0x0156
     2b8:	80 93 57 01 	sts	0x0157, r24
	}
}
     2bc:	ff 91       	pop	r31
     2be:	ef 91       	pop	r30
     2c0:	9f 91       	pop	r25
     2c2:	8f 91       	pop	r24
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <bluetoothInit>:

void bluetoothInit(unsigned int baudrate)
{
	/* Set baudrate. */
	unsigned int ubrr = (F_CPU / 16 / baudrate - 1);
     2ce:	9c 01       	movw	r18, r24
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	60 e2       	ldi	r22, 0x20	; 32
     2d6:	71 ea       	ldi	r23, 0xA1	; 161
     2d8:	87 e0       	ldi	r24, 0x07	; 7
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 80 12 	call	0x2500	; 0x2500 <__divmodsi4>
     2e0:	21 50       	subi	r18, 0x01	; 1
     2e2:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(ubrr>>8);
     2e4:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)(ubrr);
     2e8:	20 93 c4 00 	sts	0x00C4, r18
	
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); /* Enable USART RX, TX, interrupt for RX. */
     2ec:	88 e9       	ldi	r24, 0x98	; 152
     2ee:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); /* Set USART 8bit size data. */
     2f2:	86 e0       	ldi	r24, 0x06	; 6
     2f4:	80 93 c2 00 	sts	0x00C2, r24
	
	sei();
     2f8:	78 94       	sei
     2fa:	08 95       	ret

000002fc <main>:
static void handleFrame(frame_t *frame);

// ----------------------------------------------------------------------- Definitions

int main(void)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	e2 97       	sbiw	r28, 0x32	; 50
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	e9 ed       	ldi	r30, 0xD9	; 217
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	89 eb       	ldi	r24, 0xB9	; 185
     316:	93 e0       	ldi	r25, 0x03	; 3
	/* Buffer for frame received from controller. */
	frame_t frame;
	
	/* Reset leds colors. */
	for(int i = 0; i < MAX_LEDS; i++)
	leds[i].val = 0;
     318:	11 92       	st	Z+, r1
     31a:	11 92       	st	Z+, r1
     31c:	11 92       	st	Z+, r1
     31e:	11 92       	st	Z+, r1
{
	/* Buffer for frame received from controller. */
	frame_t frame;
	
	/* Reset leds colors. */
	for(int i = 0; i < MAX_LEDS; i++)
     320:	e8 17       	cp	r30, r24
     322:	f9 07       	cpc	r31, r25
     324:	c9 f7       	brne	.-14     	; 0x318 <main+0x1c>
	leds[i].val = 0;
	
	/* Init USART for bluetooth driver with 38400 baudrate. */
	bluetoothInit(38400);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	96 e9       	ldi	r25, 0x96	; 150
     32a:	0e 94 67 01 	call	0x2ce	; 0x2ce <bluetoothInit>
	
	/* Init ws2812b driver. */
	wsInit();
     32e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <wsInit>
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     332:	c1 2c       	mov	r12, r1
     334:	d1 2c       	mov	r13, r1
	wsInit();
	
	while (1)
	{
		/* Send colors to ws2812b leds. */
		wsSend(leds, numLeds);
     336:	60 91 00 01 	lds	r22, 0x0100
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	89 ed       	ldi	r24, 0xD9	; 217
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <wsSend>
		
		/* Update color array (animate). */
		seqUpdate(leds, numLeds);
     344:	60 91 00 01 	lds	r22, 0x0100
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	89 ed       	ldi	r24, 0xD9	; 217
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <seqUpdate>
		
		/* Handle command, if new frame has been received. */
		if(bluetoothGetFrame(&frame, sizeof(frame))) {
     352:	62 e3       	ldi	r22, 0x32	; 50
     354:	ce 01       	movw	r24, r28
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	0e 94 69 00 	call	0xd2	; 0xd2 <bluetoothGetFrame>
     35c:	88 23       	and	r24, r24
     35e:	09 f4       	brne	.+2      	; 0x362 <main+0x66>
     360:	4d c0       	rjmp	.+154    	; 0x3fc <main+0x100>

// ----------------------------------------------------------------------- Static declarations

static void handleFrame(frame_t *frame)
{
	switch(frame->command)
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	8e 2f       	mov	r24, r30
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	87 30       	cpi	r24, 0x07	; 7
     36a:	91 05       	cpc	r25, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <main+0x74>
     36e:	46 c0       	rjmp	.+140    	; 0x3fc <main+0x100>
     370:	fc 01       	movw	r30, r24
     372:	ec 5c       	subi	r30, 0xCC	; 204
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__tablejump2__>
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	81 11       	cpse	r24, r1
     37e:	05 c0       	rjmp	.+10     	; 0x38a <main+0x8e>
     380:	3d c0       	rjmp	.+122    	; 0x3fc <main+0x100>
static void handleFrame(frame_t *frame)
{
	switch(frame->command)
	{
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <seqSetFunction>
     388:	39 c0       	rjmp	.+114    	; 0x3fc <main+0x100>
     38a:	8e 01       	movw	r16, r28
     38c:	0b 5f       	subi	r16, 0xFB	; 251
     38e:	1f 4f       	sbci	r17, 0xFF	; 255
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     390:	ec 2c       	mov	r14, r12
     392:	fd 2c       	mov	r15, r13
		{
			seqSetColorRGB(i, frame->data[i*3+1], frame->data[i*3+2], frame->data[i*3+3]);
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	e8 1a       	sub	r14, r24
     398:	f8 0a       	sbc	r15, r24
     39a:	d8 01       	movw	r26, r16
     39c:	11 97       	sbiw	r26, 0x01	; 1
     39e:	c8 01       	movw	r24, r16
     3a0:	02 97       	sbiw	r24, 0x02	; 2
     3a2:	f8 01       	movw	r30, r16
     3a4:	20 81       	ld	r18, Z
     3a6:	4c 91       	ld	r20, X
     3a8:	fc 01       	movw	r30, r24
     3aa:	60 81       	ld	r22, Z
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	8e 0d       	add	r24, r14
     3b0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <seqSetColorRGB>
     3b4:	0d 5f       	subi	r16, 0xFD	; 253
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
		case eSetAnimation:
		seqSetFunction(frame->data[0]);
		break;
		
		case eSetAnimationColors:
		for(int i = 0; i < frame->data[0]; i++)
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	e8 16       	cp	r14, r24
     3be:	f9 06       	cpc	r15, r25
     3c0:	4c f3       	brlt	.-46     	; 0x394 <main+0x98>
     3c2:	1c c0       	rjmp	.+56     	; 0x3fc <main+0x100>
			seqSetColorRGB(i, frame->data[i*3+1], frame->data[i*3+2], frame->data[i*3+3]);
		}
		break;
		
		case eSetAnimationSpeed:
		seqSetSpeed(frame->data[0]);
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <seqSetSpeed>
     3ca:	18 c0       	rjmp	.+48     	; 0x3fc <main+0x100>
		break;
		
		case eSetAnimationSoftness:
		seqSetSoftness(frame->data[0]);
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <seqSetSoftness>
     3d2:	14 c0       	rjmp	.+40     	; 0x3fc <main+0x100>
		break;
		
		case eSetAnimationSize:
		seqSetSize(frame->data[0]);
     3d4:	8a 81       	ldd	r24, Y+2	; 0x02
     3d6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <seqSetSize>
     3da:	10 c0       	rjmp	.+32     	; 0x3fc <main+0x100>
		break;
		
		case eSetLedsCount:
		numLeds = frame->data[0];
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	80 93 00 01 	sts	0x0100, r24
     3e2:	0c c0       	rjmp	.+24     	; 0x3fc <main+0x100>
		break;
		
		case eSetAll:
		seqSetFunction(frame->data[0]);
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <seqSetFunction>
		seqSetSpeed(frame->data[1]);
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <seqSetSpeed>
		seqSetSoftness(frame->data[2]);
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <seqSetSoftness>
		seqSetSize(frame->data[3]);
     3f6:	8d 81       	ldd	r24, Y+5	; 0x05
     3f8:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <seqSetSize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3fc:	8f e9       	ldi	r24, 0x9F	; 159
     3fe:	9f e0       	ldi	r25, 0x0F	; 15
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <main+0x104>
     404:	00 c0       	rjmp	.+0      	; 0x406 <main+0x10a>
     406:	00 00       	nop
     408:	96 cf       	rjmp	.-212    	; 0x336 <main+0x3a>

0000040a <seqPingPongFunc>:
}

// ----------------------------------------------------------------------- Static definitions

static void seqPingPongFunc(color_t *leds, int num_leds)
{
     40a:	2f 92       	push	r2
     40c:	3f 92       	push	r3
     40e:	4f 92       	push	r4
     410:	5f 92       	push	r5
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	67 97       	sbiw	r28, 0x17	; 23
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	fc 01       	movw	r30, r24
     440:	5b 01       	movw	r10, r22
	static int8_t led_i = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	
	uint8_t softness = seqSoftness;
     442:	80 90 44 01 	lds	r8, 0x0144
	
	timer++;
     446:	20 91 bc 03 	lds	r18, 0x03BC
     44a:	2f 5f       	subi	r18, 0xFF	; 255
     44c:	20 93 bc 03 	sts	0x03BC, r18
	if(timer < 100/seqSpeed) return;
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	60 91 45 01 	lds	r22, 0x0145
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	84 e6       	ldi	r24, 0x64	; 100
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
     460:	26 17       	cp	r18, r22
     462:	37 07       	cpc	r19, r23
     464:	0c f4       	brge	.+2      	; 0x468 <seqPingPongFunc+0x5e>
     466:	f2 c1       	rjmp	.+996    	; 0x84c <__stack+0x34d>
	else timer = 0;
     468:	10 92 bc 03 	sts	0x03BC, r1
	
	for(int i = 0; i < softness; i++)
	{
		float k = (float)(i+1)/softness;
		k=k*k;
		if(!led_dir) {
     46c:	40 91 bb 03 	lds	r20, 0x03BB
     470:	4d 87       	std	Y+13, r20	; 0x0d
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
		}
		else {
			if(led_i+i >= num_leds || led_i+i < 0) continue;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     472:	80 91 b9 03 	lds	r24, 0x03B9
     476:	48 2f       	mov	r20, r24
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	20 91 ba 03 	lds	r18, 0x03BA
     47e:	02 2e       	mov	r0, r18
     480:	00 0c       	add	r0, r0
     482:	33 0b       	sbc	r19, r19
     484:	19 01       	movw	r2, r18
     486:	22 0c       	add	r2, r2
     488:	33 1c       	adc	r3, r3
     48a:	22 0c       	add	r2, r2
     48c:	33 1c       	adc	r3, r3
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	28 0e       	add	r2, r24
     492:	31 1c       	adc	r3, r1
     494:	2e 0e       	add	r2, r30
     496:	3f 1e       	adc	r3, r31
     498:	91 2c       	mov	r9, r1
	
	timer++;
	if(timer < 100/seqSpeed) return;
	else timer = 0;
	
	for(int i = 0; i < softness; i++)
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	10 e0       	ldi	r17, 0x00	; 0
	{
		float k = (float)(i+1)/softness;
     49e:	c4 01       	movw	r24, r8
     4a0:	09 2c       	mov	r0, r9
     4a2:	00 0c       	add	r0, r0
     4a4:	aa 0b       	sbc	r26, r26
     4a6:	bb 0b       	sbc	r27, r27
     4a8:	8e 87       	std	Y+14, r24	; 0x0e
     4aa:	9f 87       	std	Y+15, r25	; 0x0f
     4ac:	a8 8b       	std	Y+16, r26	; 0x10
     4ae:	b9 8b       	std	Y+17, r27	; 0x11
     4b0:	29 01       	movw	r4, r18
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	49 1a       	sub	r4, r25
     4b6:	51 08       	sbc	r5, r1
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
		}
		else {
			if(led_i+i >= num_leds || led_i+i < 0) continue;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     4b8:	ca 01       	movw	r24, r20
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	dc 01       	movw	r26, r24
     4c4:	ae 5f       	subi	r26, 0xFE	; 254
     4c6:	be 4f       	sbci	r27, 0xFE	; 254
     4c8:	bd 8b       	std	Y+21, r27	; 0x15
     4ca:	ac 8b       	std	Y+20, r26	; 0x14
     4cc:	f9 01       	movw	r30, r18
     4ce:	31 96       	adiw	r30, 0x01	; 1
     4d0:	fb 8b       	std	Y+19, r31	; 0x13
     4d2:	ea 8b       	std	Y+18, r30	; 0x12
     4d4:	c4 01       	movw	r24, r8
     4d6:	41 01       	movw	r8, r2
     4d8:	92 01       	movw	r18, r4
     4da:	25 01       	movw	r4, r10
     4dc:	59 01       	movw	r10, r18
     4de:	3c 01       	movw	r6, r24
	
	timer++;
	if(timer < 100/seqSpeed) return;
	else timer = 0;
	
	for(int i = 0; i < softness; i++)
     4e0:	77 c1       	rjmp	.+750    	; 0x7d0 <__stack+0x2d1>
	{
		float k = (float)(i+1)/softness;
     4e2:	0f 5f       	subi	r16, 0xFF	; 255
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	b8 01       	movw	r22, r16
     4e8:	01 2e       	mov	r0, r17
     4ea:	00 0c       	add	r0, r0
     4ec:	88 0b       	sbc	r24, r24
     4ee:	99 0b       	sbc	r25, r25
     4f0:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     4f4:	6b 01       	movw	r12, r22
     4f6:	7c 01       	movw	r14, r24
     4f8:	6e 85       	ldd	r22, Y+14	; 0x0e
     4fa:	7f 85       	ldd	r23, Y+15	; 0x0f
     4fc:	88 89       	ldd	r24, Y+16	; 0x10
     4fe:	99 89       	ldd	r25, Y+17	; 0x11
     500:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	c7 01       	movw	r24, r14
     50a:	b6 01       	movw	r22, r12
     50c:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
		k=k*k;
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     518:	69 83       	std	Y+1, r22	; 0x01
     51a:	7a 83       	std	Y+2, r23	; 0x02
     51c:	8b 83       	std	Y+3, r24	; 0x03
     51e:	9c 83       	std	Y+4, r25	; 0x04
		if(!led_dir) {
     520:	fd 85       	ldd	r31, Y+13	; 0x0d
     522:	f1 11       	cpse	r31, r1
     524:	a8 c0       	rjmp	.+336    	; 0x676 <__stack+0x177>
     526:	8a 89       	ldd	r24, Y+18	; 0x12
     528:	9b 89       	ldd	r25, Y+19	; 0x13
     52a:	80 1b       	sub	r24, r16
     52c:	91 0b       	sbc	r25, r17
			if(led_i-i < 0 || led_i-i >= num_leds) continue;
     52e:	0a f4       	brpl	.+2      	; 0x532 <__stack+0x33>
     530:	49 c1       	rjmp	.+658    	; 0x7c4 <__stack+0x2c5>
     532:	84 15       	cp	r24, r4
     534:	95 05       	cpc	r25, r5
     536:	0c f0       	brlt	.+2      	; 0x53a <__stack+0x3b>
     538:	45 c1       	rjmp	.+650    	; 0x7c4 <__stack+0x2c5>
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     53a:	ac 89       	ldd	r26, Y+20	; 0x14
     53c:	bd 89       	ldd	r27, Y+21	; 0x15
     53e:	cd 90       	ld	r12, X+
     540:	dd 90       	ld	r13, X+
     542:	ed 90       	ld	r14, X+
     544:	fc 90       	ld	r15, X
     546:	29 81       	ldd	r18, Y+1	; 0x01
     548:	3a 81       	ldd	r19, Y+2	; 0x02
     54a:	4b 81       	ldd	r20, Y+3	; 0x03
     54c:	5c 81       	ldd	r21, Y+4	; 0x04
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e8       	ldi	r24, 0x80	; 128
     554:	9f e3       	ldi	r25, 0x3F	; 63
     556:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
     55a:	6d 83       	std	Y+5, r22	; 0x05
     55c:	7e 83       	std	Y+6, r23	; 0x06
     55e:	8f 83       	std	Y+7, r24	; 0x07
     560:	98 87       	std	Y+8, r25	; 0x08
     562:	9f 8a       	std	Y+23, r9	; 0x17
     564:	8e 8a       	std	Y+22, r8	; 0x16
     566:	c7 01       	movw	r24, r14
     568:	b6 01       	movw	r22, r12
     56a:	77 27       	eor	r23, r23
     56c:	88 27       	eor	r24, r24
     56e:	99 27       	eor	r25, r25
     570:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     574:	29 81       	ldd	r18, Y+1	; 0x01
     576:	3a 81       	ldd	r19, Y+2	; 0x02
     578:	4b 81       	ldd	r20, Y+3	; 0x03
     57a:	5c 81       	ldd	r21, Y+4	; 0x04
     57c:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     580:	69 87       	std	Y+9, r22	; 0x09
     582:	7a 87       	std	Y+10, r23	; 0x0a
     584:	8b 87       	std	Y+11, r24	; 0x0b
     586:	9c 87       	std	Y+12, r25	; 0x0c
     588:	f4 01       	movw	r30, r8
     58a:	62 91       	ld	r22, -Z
     58c:	ff 8b       	std	Y+23, r31	; 0x17
     58e:	ee 8b       	std	Y+22, r30	; 0x16
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	6d 81       	ldd	r22, Y+5	; 0x05
     5a0:	7e 81       	ldd	r23, Y+6	; 0x06
     5a2:	8f 81       	ldd	r24, Y+7	; 0x07
     5a4:	98 85       	ldd	r25, Y+8	; 0x08
     5a6:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	69 85       	ldd	r22, Y+9	; 0x09
     5b0:	7a 85       	ldd	r23, Y+10	; 0x0a
     5b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     5ba:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     5be:	ae 89       	ldd	r26, Y+22	; 0x16
     5c0:	bf 89       	ldd	r27, Y+23	; 0x17
     5c2:	6c 93       	st	X, r22
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
     5c4:	6d 2d       	mov	r22, r13
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     5d0:	29 81       	ldd	r18, Y+1	; 0x01
     5d2:	3a 81       	ldd	r19, Y+2	; 0x02
     5d4:	4b 81       	ldd	r20, Y+3	; 0x03
     5d6:	5c 81       	ldd	r21, Y+4	; 0x04
     5d8:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     5dc:	69 87       	std	Y+9, r22	; 0x09
     5de:	7a 87       	std	Y+10, r23	; 0x0a
     5e0:	8b 87       	std	Y+11, r24	; 0x0b
     5e2:	9c 87       	std	Y+12, r25	; 0x0c
     5e4:	f4 01       	movw	r30, r8
     5e6:	60 81       	ld	r22, Z
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     5f2:	9b 01       	movw	r18, r22
     5f4:	ac 01       	movw	r20, r24
     5f6:	6d 81       	ldd	r22, Y+5	; 0x05
     5f8:	7e 81       	ldd	r23, Y+6	; 0x06
     5fa:	8f 81       	ldd	r24, Y+7	; 0x07
     5fc:	98 85       	ldd	r25, Y+8	; 0x08
     5fe:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	69 85       	ldd	r22, Y+9	; 0x09
     608:	7a 85       	ldd	r23, Y+10	; 0x0a
     60a:	8b 85       	ldd	r24, Y+11	; 0x0b
     60c:	9c 85       	ldd	r25, Y+12	; 0x0c
     60e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     612:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     616:	d4 01       	movw	r26, r8
     618:	6c 93       	st	X, r22
     61a:	f4 01       	movw	r30, r8
     61c:	32 97       	sbiw	r30, 0x02	; 2
     61e:	fa 87       	std	Y+10, r31	; 0x0a
     620:	e9 87       	std	Y+9, r30	; 0x09
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
     622:	6e 2d       	mov	r22, r14
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     62e:	29 81       	ldd	r18, Y+1	; 0x01
     630:	3a 81       	ldd	r19, Y+2	; 0x02
     632:	4b 81       	ldd	r20, Y+3	; 0x03
     634:	5c 81       	ldd	r21, Y+4	; 0x04
     636:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     63a:	6b 01       	movw	r12, r22
     63c:	7c 01       	movw	r14, r24
     63e:	a9 85       	ldd	r26, Y+9	; 0x09
     640:	ba 85       	ldd	r27, Y+10	; 0x0a
     642:	6c 91       	ld	r22, X
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
     652:	6d 81       	ldd	r22, Y+5	; 0x05
     654:	7e 81       	ldd	r23, Y+6	; 0x06
     656:	8f 81       	ldd	r24, Y+7	; 0x07
     658:	98 85       	ldd	r25, Y+8	; 0x08
     65a:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     65e:	9b 01       	movw	r18, r22
     660:	ac 01       	movw	r20, r24
     662:	c7 01       	movw	r24, r14
     664:	b6 01       	movw	r22, r12
     666:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     66a:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     66e:	e9 85       	ldd	r30, Y+9	; 0x09
     670:	fa 85       	ldd	r31, Y+10	; 0x0a
     672:	60 83       	st	Z, r22
     674:	a7 c0       	rjmp	.+334    	; 0x7c4 <__stack+0x2c5>
     676:	c5 01       	movw	r24, r10
     678:	80 0f       	add	r24, r16
     67a:	91 1f       	adc	r25, r17
		}
		else {
			if(led_i+i >= num_leds || led_i+i < 0) continue;
     67c:	84 15       	cp	r24, r4
     67e:	95 05       	cpc	r25, r5
     680:	0c f0       	brlt	.+2      	; 0x684 <__stack+0x185>
     682:	a0 c0       	rjmp	.+320    	; 0x7c4 <__stack+0x2c5>
     684:	99 23       	and	r25, r25
     686:	0c f4       	brge	.+2      	; 0x68a <__stack+0x18b>
     688:	9d c0       	rjmp	.+314    	; 0x7c4 <__stack+0x2c5>
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     68a:	ac 89       	ldd	r26, Y+20	; 0x14
     68c:	bd 89       	ldd	r27, Y+21	; 0x15
     68e:	cd 90       	ld	r12, X+
     690:	dd 90       	ld	r13, X+
     692:	ed 90       	ld	r14, X+
     694:	fc 90       	ld	r15, X
     696:	29 81       	ldd	r18, Y+1	; 0x01
     698:	3a 81       	ldd	r19, Y+2	; 0x02
     69a:	4b 81       	ldd	r20, Y+3	; 0x03
     69c:	5c 81       	ldd	r21, Y+4	; 0x04
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	9f e3       	ldi	r25, 0x3F	; 63
     6a6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
     6aa:	6d 83       	std	Y+5, r22	; 0x05
     6ac:	7e 83       	std	Y+6, r23	; 0x06
     6ae:	8f 83       	std	Y+7, r24	; 0x07
     6b0:	98 87       	std	Y+8, r25	; 0x08
     6b2:	3f 8a       	std	Y+23, r3	; 0x17
     6b4:	2e 8a       	std	Y+22, r2	; 0x16
     6b6:	c7 01       	movw	r24, r14
     6b8:	b6 01       	movw	r22, r12
     6ba:	77 27       	eor	r23, r23
     6bc:	88 27       	eor	r24, r24
     6be:	99 27       	eor	r25, r25
     6c0:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     6c4:	29 81       	ldd	r18, Y+1	; 0x01
     6c6:	3a 81       	ldd	r19, Y+2	; 0x02
     6c8:	4b 81       	ldd	r20, Y+3	; 0x03
     6ca:	5c 81       	ldd	r21, Y+4	; 0x04
     6cc:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     6d0:	69 87       	std	Y+9, r22	; 0x09
     6d2:	7a 87       	std	Y+10, r23	; 0x0a
     6d4:	8b 87       	std	Y+11, r24	; 0x0b
     6d6:	9c 87       	std	Y+12, r25	; 0x0c
     6d8:	f1 01       	movw	r30, r2
     6da:	62 91       	ld	r22, -Z
     6dc:	ff 8b       	std	Y+23, r31	; 0x17
     6de:	ee 8b       	std	Y+22, r30	; 0x16
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     6ea:	9b 01       	movw	r18, r22
     6ec:	ac 01       	movw	r20, r24
     6ee:	6d 81       	ldd	r22, Y+5	; 0x05
     6f0:	7e 81       	ldd	r23, Y+6	; 0x06
     6f2:	8f 81       	ldd	r24, Y+7	; 0x07
     6f4:	98 85       	ldd	r25, Y+8	; 0x08
     6f6:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
     6fe:	69 85       	ldd	r22, Y+9	; 0x09
     700:	7a 85       	ldd	r23, Y+10	; 0x0a
     702:	8b 85       	ldd	r24, Y+11	; 0x0b
     704:	9c 85       	ldd	r25, Y+12	; 0x0c
     706:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     70a:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     70e:	ae 89       	ldd	r26, Y+22	; 0x16
     710:	bf 89       	ldd	r27, Y+23	; 0x17
     712:	6c 93       	st	X, r22
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
     714:	6d 2d       	mov	r22, r13
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     720:	29 81       	ldd	r18, Y+1	; 0x01
     722:	3a 81       	ldd	r19, Y+2	; 0x02
     724:	4b 81       	ldd	r20, Y+3	; 0x03
     726:	5c 81       	ldd	r21, Y+4	; 0x04
     728:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     72c:	69 87       	std	Y+9, r22	; 0x09
     72e:	7a 87       	std	Y+10, r23	; 0x0a
     730:	8b 87       	std	Y+11, r24	; 0x0b
     732:	9c 87       	std	Y+12, r25	; 0x0c
     734:	f1 01       	movw	r30, r2
     736:	60 81       	ld	r22, Z
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	6d 81       	ldd	r22, Y+5	; 0x05
     748:	7e 81       	ldd	r23, Y+6	; 0x06
     74a:	8f 81       	ldd	r24, Y+7	; 0x07
     74c:	98 85       	ldd	r25, Y+8	; 0x08
     74e:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	69 85       	ldd	r22, Y+9	; 0x09
     758:	7a 85       	ldd	r23, Y+10	; 0x0a
     75a:	8b 85       	ldd	r24, Y+11	; 0x0b
     75c:	9c 85       	ldd	r25, Y+12	; 0x0c
     75e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     762:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     766:	d1 01       	movw	r26, r2
     768:	6c 93       	st	X, r22
     76a:	f1 01       	movw	r30, r2
     76c:	32 97       	sbiw	r30, 0x02	; 2
     76e:	fa 87       	std	Y+10, r31	; 0x0a
     770:	e9 87       	std	Y+9, r30	; 0x09
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
     772:	6e 2d       	mov	r22, r14
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	3a 81       	ldd	r19, Y+2	; 0x02
     782:	4b 81       	ldd	r20, Y+3	; 0x03
     784:	5c 81       	ldd	r21, Y+4	; 0x04
     786:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     78a:	6b 01       	movw	r12, r22
     78c:	7c 01       	movw	r14, r24
     78e:	a9 85       	ldd	r26, Y+9	; 0x09
     790:	ba 85       	ldd	r27, Y+10	; 0x0a
     792:	6c 91       	ld	r22, X
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	6d 81       	ldd	r22, Y+5	; 0x05
     7a4:	7e 81       	ldd	r23, Y+6	; 0x06
     7a6:	8f 81       	ldd	r24, Y+7	; 0x07
     7a8:	98 85       	ldd	r25, Y+8	; 0x08
     7aa:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     7ba:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     7be:	e9 85       	ldd	r30, Y+9	; 0x09
     7c0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7c2:	60 83       	st	Z, r22
     7c4:	f4 e0       	ldi	r31, 0x04	; 4
     7c6:	8f 1a       	sub	r8, r31
     7c8:	91 08       	sbc	r9, r1
     7ca:	44 e0       	ldi	r20, 0x04	; 4
     7cc:	24 0e       	add	r2, r20
     7ce:	31 1c       	adc	r3, r1
	
	timer++;
	if(timer < 100/seqSpeed) return;
	else timer = 0;
	
	for(int i = 0; i < softness; i++)
     7d0:	06 15       	cp	r16, r6
     7d2:	17 05       	cpc	r17, r7
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <__stack+0x2d9>
     7d6:	85 ce       	rjmp	.-758    	; 0x4e2 <seqPingPongFunc+0xd8>
     7d8:	43 01       	movw	r8, r6
     7da:	52 01       	movw	r10, r4
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     7dc:	40 91 bb 03 	lds	r20, 0x03BB
     7e0:	44 23       	and	r20, r20
     7e2:	31 f0       	breq	.+12     	; 0x7f0 <__stack+0x2f1>
     7e4:	80 91 ba 03 	lds	r24, 0x03BA
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 93 ba 03 	sts	0x03BA, r24
     7ee:	05 c0       	rjmp	.+10     	; 0x7fa <__stack+0x2fb>
	else led_i++;
     7f0:	80 91 ba 03 	lds	r24, 0x03BA
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 93 ba 03 	sts	0x03BA, r24
	if(led_i >= num_leds + softness || led_i < -softness) {
     7fa:	20 91 ba 03 	lds	r18, 0x03BA
     7fe:	02 2e       	mov	r0, r18
     800:	00 0c       	add	r0, r0
     802:	33 0b       	sbc	r19, r19
     804:	c5 01       	movw	r24, r10
     806:	88 0d       	add	r24, r8
     808:	99 1d       	adc	r25, r9
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	3c f4       	brge	.+14     	; 0x81e <__stack+0x31f>
     810:	88 27       	eor	r24, r24
     812:	99 27       	eor	r25, r25
     814:	88 19       	sub	r24, r8
     816:	99 09       	sbc	r25, r9
     818:	28 17       	cp	r18, r24
     81a:	39 07       	cpc	r19, r25
     81c:	bc f4       	brge	.+46     	; 0x84c <__stack+0x34d>
		color_i = (color_i+1)%numColors;
     81e:	80 91 b9 03 	lds	r24, 0x03B9
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	60 91 42 01 	lds	r22, 0x0142
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
     830:	80 93 b9 03 	sts	0x03B9, r24
		led_dir = led_dir == 1 ? 0 : 1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	41 30       	cpi	r20, 0x01	; 1
     838:	09 f4       	brne	.+2      	; 0x83c <__stack+0x33d>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	80 93 bb 03 	sts	0x03BB, r24
		led_i = 0 + led_dir*num_leds-1;
     840:	8a 9d       	mul	r24, r10
     842:	80 2d       	mov	r24, r0
     844:	11 24       	eor	r1, r1
     846:	81 50       	subi	r24, 0x01	; 1
     848:	80 93 ba 03 	sts	0x03BA, r24
	}
}
     84c:	67 96       	adiw	r28, 0x17	; 23
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	9f 90       	pop	r9
     86e:	8f 90       	pop	r8
     870:	7f 90       	pop	r7
     872:	6f 90       	pop	r6
     874:	5f 90       	pop	r5
     876:	4f 90       	pop	r4
     878:	3f 90       	pop	r3
     87a:	2f 90       	pop	r2
     87c:	08 95       	ret

0000087e <seqDoublePingPongFunc>:

static void seqDoublePingPongFunc(color_t *leds, int num_leds)
{
     87e:	2f 92       	push	r2
     880:	3f 92       	push	r3
     882:	4f 92       	push	r4
     884:	5f 92       	push	r5
     886:	6f 92       	push	r6
     888:	7f 92       	push	r7
     88a:	8f 92       	push	r8
     88c:	9f 92       	push	r9
     88e:	af 92       	push	r10
     890:	bf 92       	push	r11
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	6f 97       	sbiw	r28, 0x1f	; 31
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	1c 01       	movw	r2, r24
     8b4:	8b 01       	movw	r16, r22
	static int8_t led_i = 0;
	static int8_t led_dir = 0;
	static uint8_t color_i = 0;
	static uint8_t timer = 0;
	
	uint8_t softness = seqSoftness;
     8b6:	40 91 44 01 	lds	r20, 0x0144
	
	timer++;
     8ba:	20 91 c0 03 	lds	r18, 0x03C0
     8be:	2f 5f       	subi	r18, 0xFF	; 255
     8c0:	20 93 c0 03 	sts	0x03C0, r18
	if(timer < 100/seqSpeed) return;
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	e0 91 45 01 	lds	r30, 0x0145
     8ca:	6e 2f       	mov	r22, r30
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	84 e6       	ldi	r24, 0x64	; 100
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
     8d6:	26 17       	cp	r18, r22
     8d8:	37 07       	cpc	r19, r23
     8da:	0c f4       	brge	.+2      	; 0x8de <seqDoublePingPongFunc+0x60>
     8dc:	c0 c2       	rjmp	.+1408   	; 0xe5e <seqDoublePingPongFunc+0x5e0>
	else timer = 0;
     8de:	10 92 c0 03 	sts	0x03C0, r1
	
	for(int i = 0; i < softness; i++)
	{
		float k = (float)(i+1)/softness;
		if(!led_dir) {
     8e2:	20 91 bf 03 	lds	r18, 0x03BF
     8e6:	29 87       	std	Y+9, r18	; 0x09
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
		}
		else {
			if(led_i+i > num_leds/2 || led_i+i < 0) continue;
     8e8:	20 91 be 03 	lds	r18, 0x03BE
     8ec:	c8 01       	movw	r24, r16
     8ee:	11 23       	and	r17, r17
     8f0:	0c f4       	brge	.+2      	; 0x8f4 <seqDoublePingPongFunc+0x76>
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	1f 8f       	std	Y+31, r17	; 0x1f
     8f6:	0e 8f       	std	Y+30, r16	; 0x1e
     8f8:	b1 01       	movw	r22, r2
     8fa:	dc 01       	movw	r26, r24
     8fc:	b5 95       	asr	r27
     8fe:	a7 95       	ror	r26
     900:	bf 8b       	std	Y+23, r27	; 0x17
     902:	ae 8b       	std	Y+22, r26	; 0x16
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     904:	80 91 bd 03 	lds	r24, 0x03BD
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 2e       	mov	r0, r18
     90c:	00 0c       	add	r0, r0
     90e:	33 0b       	sbc	r19, r19
     910:	f9 01       	movw	r30, r18
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	32 96       	adiw	r30, 0x02	; 2
     91c:	41 01       	movw	r8, r2
     91e:	8e 0e       	add	r8, r30
     920:	9f 1e       	adc	r9, r31
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
			
			leds[num_leds-1-led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.r;
     922:	18 01       	movw	r2, r16
     924:	b1 e0       	ldi	r27, 0x01	; 1
     926:	2b 1a       	sub	r2, r27
     928:	31 08       	sbc	r3, r1
     92a:	22 1a       	sub	r2, r18
     92c:	33 0a       	sbc	r3, r19
     92e:	22 0c       	add	r2, r2
     930:	33 1c       	adc	r3, r3
     932:	22 0c       	add	r2, r2
     934:	33 1c       	adc	r3, r3
     936:	e2 e0       	ldi	r30, 0x02	; 2
     938:	2e 0e       	add	r2, r30
     93a:	31 1c       	adc	r3, r1
     93c:	26 0e       	add	r2, r22
     93e:	37 1e       	adc	r3, r23
     940:	64 2e       	mov	r6, r20
     942:	71 2c       	mov	r7, r1
	
	timer++;
	if(timer < 100/seqSpeed) return;
	else timer = 0;
	
	for(int i = 0; i < softness; i++)
     944:	21 01       	movw	r4, r2
     946:	54 01       	movw	r10, r8
     948:	00 e0       	ldi	r16, 0x00	; 0
     94a:	10 e0       	ldi	r17, 0x00	; 0
	{
		float k = (float)(i+1)/softness;
     94c:	a3 01       	movw	r20, r6
     94e:	07 2c       	mov	r0, r7
     950:	00 0c       	add	r0, r0
     952:	66 0b       	sbc	r22, r22
     954:	77 0b       	sbc	r23, r23
     956:	4a 87       	std	Y+10, r20	; 0x0a
     958:	5b 87       	std	Y+11, r21	; 0x0b
     95a:	6c 87       	std	Y+12, r22	; 0x0c
     95c:	7d 87       	std	Y+13, r23	; 0x0d
     95e:	b9 01       	movw	r22, r18
     960:	61 50       	subi	r22, 0x01	; 1
     962:	71 09       	sbc	r23, r1
     964:	79 8f       	std	Y+25, r23	; 0x19
     966:	68 8f       	std	Y+24, r22	; 0x18
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
		}
		else {
			if(led_i+i > num_leds/2 || led_i+i < 0) continue;
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	dc 01       	movw	r26, r24
     972:	ae 5f       	subi	r26, 0xFE	; 254
     974:	be 4f       	sbci	r27, 0xFE	; 254
     976:	bd 8f       	std	Y+29, r27	; 0x1d
     978:	ac 8f       	std	Y+28, r26	; 0x1c
     97a:	f9 01       	movw	r30, r18
     97c:	31 96       	adiw	r30, 0x01	; 1
     97e:	fb 8f       	std	Y+27, r31	; 0x1b
     980:	ea 8f       	std	Y+26, r30	; 0x1a
     982:	41 01       	movw	r8, r2
     984:	15 01       	movw	r2, r10
	
	timer++;
	if(timer < 100/seqSpeed) return;
	else timer = 0;
	
	for(int i = 0; i < softness; i++)
     986:	22 c2       	rjmp	.+1092   	; 0xdcc <seqDoublePingPongFunc+0x54e>
	{
		float k = (float)(i+1)/softness;
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
     98c:	b8 01       	movw	r22, r16
     98e:	01 2e       	mov	r0, r17
     990:	00 0c       	add	r0, r0
     992:	88 0b       	sbc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     99a:	6b 01       	movw	r12, r22
     99c:	7c 01       	movw	r14, r24
     99e:	6a 85       	ldd	r22, Y+10	; 0x0a
     9a0:	7b 85       	ldd	r23, Y+11	; 0x0b
     9a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     9a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     9a6:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     9aa:	9b 01       	movw	r18, r22
     9ac:	ac 01       	movw	r20, r24
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
     9b6:	6d 83       	std	Y+5, r22	; 0x05
     9b8:	7e 83       	std	Y+6, r23	; 0x06
     9ba:	8f 83       	std	Y+7, r24	; 0x07
     9bc:	98 87       	std	Y+8, r25	; 0x08
		if(!led_dir) {
     9be:	f9 85       	ldd	r31, Y+9	; 0x09
     9c0:	f1 11       	cpse	r31, r1
     9c2:	fc c0       	rjmp	.+504    	; 0xbbc <seqDoublePingPongFunc+0x33e>
     9c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9c8:	80 1b       	sub	r24, r16
     9ca:	91 0b       	sbc	r25, r17
			if(led_i-i < 0 || led_i-i > num_leds/2) continue;
     9cc:	0a f4       	brpl	.+2      	; 0x9d0 <seqDoublePingPongFunc+0x152>
     9ce:	f2 c1       	rjmp	.+996    	; 0xdb4 <seqDoublePingPongFunc+0x536>
     9d0:	2e 89       	ldd	r18, Y+22	; 0x16
     9d2:	3f 89       	ldd	r19, Y+23	; 0x17
     9d4:	28 17       	cp	r18, r24
     9d6:	39 07       	cpc	r19, r25
     9d8:	0c f4       	brge	.+2      	; 0x9dc <seqDoublePingPongFunc+0x15e>
     9da:	ec c1       	rjmp	.+984    	; 0xdb4 <seqDoublePingPongFunc+0x536>
			leds[led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.r;
     9dc:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9de:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9e0:	cd 90       	ld	r12, X+
     9e2:	dd 90       	ld	r13, X+
     9e4:	ed 90       	ld	r14, X+
     9e6:	fc 90       	ld	r15, X
     9e8:	c7 01       	movw	r24, r14
     9ea:	b6 01       	movw	r22, r12
     9ec:	77 27       	eor	r23, r23
     9ee:	88 27       	eor	r24, r24
     9f0:	99 27       	eor	r25, r25
     9f2:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     9f6:	2d 81       	ldd	r18, Y+5	; 0x05
     9f8:	3e 81       	ldd	r19, Y+6	; 0x06
     9fa:	4f 81       	ldd	r20, Y+7	; 0x07
     9fc:	58 85       	ldd	r21, Y+8	; 0x08
     9fe:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     a02:	6e 87       	std	Y+14, r22	; 0x0e
     a04:	7f 87       	std	Y+15, r23	; 0x0f
     a06:	88 8b       	std	Y+16, r24	; 0x10
     a08:	99 8b       	std	Y+17, r25	; 0x11
     a0a:	2d 81       	ldd	r18, Y+5	; 0x05
     a0c:	3e 81       	ldd	r19, Y+6	; 0x06
     a0e:	4f 81       	ldd	r20, Y+7	; 0x07
     a10:	58 85       	ldd	r21, Y+8	; 0x08
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e8       	ldi	r24, 0x80	; 128
     a18:	9f e3       	ldi	r25, 0x3F	; 63
     a1a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
     a1e:	69 83       	std	Y+1, r22	; 0x01
     a20:	7a 83       	std	Y+2, r23	; 0x02
     a22:	8b 83       	std	Y+3, r24	; 0x03
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	f1 01       	movw	r30, r2
     a28:	62 91       	ld	r22, -Z
     a2a:	fb 8b       	std	Y+19, r31	; 0x13
     a2c:	ea 8b       	std	Y+18, r30	; 0x12
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     a38:	9b 01       	movw	r18, r22
     a3a:	ac 01       	movw	r20, r24
     a3c:	69 81       	ldd	r22, Y+1	; 0x01
     a3e:	7a 81       	ldd	r23, Y+2	; 0x02
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     a48:	9b 01       	movw	r18, r22
     a4a:	ac 01       	movw	r20, r24
     a4c:	6e 85       	ldd	r22, Y+14	; 0x0e
     a4e:	7f 85       	ldd	r23, Y+15	; 0x0f
     a50:	88 89       	ldd	r24, Y+16	; 0x10
     a52:	99 89       	ldd	r25, Y+17	; 0x11
     a54:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     a58:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     a5c:	aa 89       	ldd	r26, Y+18	; 0x12
     a5e:	bb 89       	ldd	r27, Y+19	; 0x13
     a60:	6c 93       	st	X, r22
			leds[led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.g;
     a62:	6d 2d       	mov	r22, r13
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     a6e:	2d 81       	ldd	r18, Y+5	; 0x05
     a70:	3e 81       	ldd	r19, Y+6	; 0x06
     a72:	4f 81       	ldd	r20, Y+7	; 0x07
     a74:	58 85       	ldd	r21, Y+8	; 0x08
     a76:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     a7a:	6a 8b       	std	Y+18, r22	; 0x12
     a7c:	7b 8b       	std	Y+19, r23	; 0x13
     a7e:	8c 8b       	std	Y+20, r24	; 0x14
     a80:	9d 8b       	std	Y+21, r25	; 0x15
     a82:	f1 01       	movw	r30, r2
     a84:	60 81       	ld	r22, Z
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	69 81       	ldd	r22, Y+1	; 0x01
     a96:	7a 81       	ldd	r23, Y+2	; 0x02
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     aa0:	9b 01       	movw	r18, r22
     aa2:	ac 01       	movw	r20, r24
     aa4:	6a 89       	ldd	r22, Y+18	; 0x12
     aa6:	7b 89       	ldd	r23, Y+19	; 0x13
     aa8:	8c 89       	ldd	r24, Y+20	; 0x14
     aaa:	9d 89       	ldd	r25, Y+21	; 0x15
     aac:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     ab0:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     ab4:	d1 01       	movw	r26, r2
     ab6:	6c 93       	st	X, r22
			leds[led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i-i].rgb.b;
     ab8:	6e 2d       	mov	r22, r14
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     ac4:	2d 81       	ldd	r18, Y+5	; 0x05
     ac6:	3e 81       	ldd	r19, Y+6	; 0x06
     ac8:	4f 81       	ldd	r20, Y+7	; 0x07
     aca:	58 85       	ldd	r21, Y+8	; 0x08
     acc:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     ad0:	6b 01       	movw	r12, r22
     ad2:	7c 01       	movw	r14, r24
     ad4:	f1 01       	movw	r30, r2
     ad6:	32 97       	sbiw	r30, 0x02	; 2
     ad8:	fe 83       	std	Y+6, r31	; 0x06
     ada:	ed 83       	std	Y+5, r30	; 0x05
     adc:	60 81       	ld	r22, Z
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     ae8:	9b 01       	movw	r18, r22
     aea:	ac 01       	movw	r20, r24
     aec:	69 81       	ldd	r22, Y+1	; 0x01
     aee:	7a 81       	ldd	r23, Y+2	; 0x02
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	9c 81       	ldd	r25, Y+4	; 0x04
     af4:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	c7 01       	movw	r24, r14
     afe:	b6 01       	movw	r22, r12
     b00:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     b04:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     b08:	ad 81       	ldd	r26, Y+5	; 0x05
     b0a:	be 81       	ldd	r27, Y+6	; 0x06
     b0c:	6c 93       	st	X, r22
			
			leds[num_leds-1-led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.r;
     b0e:	f4 01       	movw	r30, r8
     b10:	62 91       	ld	r22, -Z
     b12:	fe 83       	std	Y+6, r31	; 0x06
     b14:	ed 83       	std	Y+5, r30	; 0x05
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	69 81       	ldd	r22, Y+1	; 0x01
     b26:	7a 81       	ldd	r23, Y+2	; 0x02
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	6e 85       	ldd	r22, Y+14	; 0x0e
     b36:	7f 85       	ldd	r23, Y+15	; 0x0f
     b38:	88 89       	ldd	r24, Y+16	; 0x10
     b3a:	99 89       	ldd	r25, Y+17	; 0x11
     b3c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     b40:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     b44:	ad 81       	ldd	r26, Y+5	; 0x05
     b46:	be 81       	ldd	r27, Y+6	; 0x06
     b48:	6c 93       	st	X, r22
			leds[num_leds-1-led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.g;
     b4a:	f4 01       	movw	r30, r8
     b4c:	60 81       	ld	r22, Z
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	69 81       	ldd	r22, Y+1	; 0x01
     b5e:	7a 81       	ldd	r23, Y+2	; 0x02
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     b68:	9b 01       	movw	r18, r22
     b6a:	ac 01       	movw	r20, r24
     b6c:	6a 89       	ldd	r22, Y+18	; 0x12
     b6e:	7b 89       	ldd	r23, Y+19	; 0x13
     b70:	8c 89       	ldd	r24, Y+20	; 0x14
     b72:	9d 89       	ldd	r25, Y+21	; 0x15
     b74:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     b78:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     b7c:	d4 01       	movw	r26, r8
     b7e:	6c 93       	st	X, r22
     b80:	f4 01       	movw	r30, r8
     b82:	32 97       	sbiw	r30, 0x02	; 2
     b84:	fe 83       	std	Y+6, r31	; 0x06
     b86:	ed 83       	std	Y+5, r30	; 0x05
			leds[num_leds-1-led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i+i].rgb.b;
     b88:	60 81       	ld	r22, Z
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	69 81       	ldd	r22, Y+1	; 0x01
     b9a:	7a 81       	ldd	r23, Y+2	; 0x02
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	c7 01       	movw	r24, r14
     baa:	b6 01       	movw	r22, r12
     bac:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     bb0:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     bb4:	ad 81       	ldd	r26, Y+5	; 0x05
     bb6:	be 81       	ldd	r27, Y+6	; 0x06
     bb8:	6c 93       	st	X, r22
     bba:	fc c0       	rjmp	.+504    	; 0xdb4 <seqDoublePingPongFunc+0x536>
     bbc:	88 8d       	ldd	r24, Y+24	; 0x18
     bbe:	99 8d       	ldd	r25, Y+25	; 0x19
     bc0:	80 0f       	add	r24, r16
     bc2:	91 1f       	adc	r25, r17
		}
		else {
			if(led_i+i > num_leds/2 || led_i+i < 0) continue;
     bc4:	ee 89       	ldd	r30, Y+22	; 0x16
     bc6:	ff 89       	ldd	r31, Y+23	; 0x17
     bc8:	e8 17       	cp	r30, r24
     bca:	f9 07       	cpc	r31, r25
     bcc:	0c f4       	brge	.+2      	; 0xbd0 <seqDoublePingPongFunc+0x352>
     bce:	f2 c0       	rjmp	.+484    	; 0xdb4 <seqDoublePingPongFunc+0x536>
     bd0:	99 23       	and	r25, r25
     bd2:	0c f4       	brge	.+2      	; 0xbd6 <seqDoublePingPongFunc+0x358>
     bd4:	ef c0       	rjmp	.+478    	; 0xdb4 <seqDoublePingPongFunc+0x536>
			leds[led_i+i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.r;
     bd6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bd8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bda:	cd 90       	ld	r12, X+
     bdc:	dd 90       	ld	r13, X+
     bde:	ed 90       	ld	r14, X+
     be0:	fc 90       	ld	r15, X
     be2:	c7 01       	movw	r24, r14
     be4:	b6 01       	movw	r22, r12
     be6:	77 27       	eor	r23, r23
     be8:	88 27       	eor	r24, r24
     bea:	99 27       	eor	r25, r25
     bec:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     bf0:	2d 81       	ldd	r18, Y+5	; 0x05
     bf2:	3e 81       	ldd	r19, Y+6	; 0x06
     bf4:	4f 81       	ldd	r20, Y+7	; 0x07
     bf6:	58 85       	ldd	r21, Y+8	; 0x08
     bf8:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     bfc:	6e 87       	std	Y+14, r22	; 0x0e
     bfe:	7f 87       	std	Y+15, r23	; 0x0f
     c00:	88 8b       	std	Y+16, r24	; 0x10
     c02:	99 8b       	std	Y+17, r25	; 0x11
     c04:	2d 81       	ldd	r18, Y+5	; 0x05
     c06:	3e 81       	ldd	r19, Y+6	; 0x06
     c08:	4f 81       	ldd	r20, Y+7	; 0x07
     c0a:	58 85       	ldd	r21, Y+8	; 0x08
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	9f e3       	ldi	r25, 0x3F	; 63
     c14:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
     c18:	69 83       	std	Y+1, r22	; 0x01
     c1a:	7a 83       	std	Y+2, r23	; 0x02
     c1c:	8b 83       	std	Y+3, r24	; 0x03
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	f5 01       	movw	r30, r10
     c22:	62 91       	ld	r22, -Z
     c24:	fb 8b       	std	Y+19, r31	; 0x13
     c26:	ea 8b       	std	Y+18, r30	; 0x12
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	69 81       	ldd	r22, Y+1	; 0x01
     c38:	7a 81       	ldd	r23, Y+2	; 0x02
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	6e 85       	ldd	r22, Y+14	; 0x0e
     c48:	7f 85       	ldd	r23, Y+15	; 0x0f
     c4a:	88 89       	ldd	r24, Y+16	; 0x10
     c4c:	99 89       	ldd	r25, Y+17	; 0x11
     c4e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     c52:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     c56:	aa 89       	ldd	r26, Y+18	; 0x12
     c58:	bb 89       	ldd	r27, Y+19	; 0x13
     c5a:	6c 93       	st	X, r22
			leds[led_i+i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.g;
     c5c:	6d 2d       	mov	r22, r13
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     c68:	2d 81       	ldd	r18, Y+5	; 0x05
     c6a:	3e 81       	ldd	r19, Y+6	; 0x06
     c6c:	4f 81       	ldd	r20, Y+7	; 0x07
     c6e:	58 85       	ldd	r21, Y+8	; 0x08
     c70:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     c74:	6a 8b       	std	Y+18, r22	; 0x12
     c76:	7b 8b       	std	Y+19, r23	; 0x13
     c78:	8c 8b       	std	Y+20, r24	; 0x14
     c7a:	9d 8b       	std	Y+21, r25	; 0x15
     c7c:	f5 01       	movw	r30, r10
     c7e:	60 81       	ld	r22, Z
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     c8a:	9b 01       	movw	r18, r22
     c8c:	ac 01       	movw	r20, r24
     c8e:	69 81       	ldd	r22, Y+1	; 0x01
     c90:	7a 81       	ldd	r23, Y+2	; 0x02
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	6a 89       	ldd	r22, Y+18	; 0x12
     ca0:	7b 89       	ldd	r23, Y+19	; 0x13
     ca2:	8c 89       	ldd	r24, Y+20	; 0x14
     ca4:	9d 89       	ldd	r25, Y+21	; 0x15
     ca6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     caa:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     cae:	d5 01       	movw	r26, r10
     cb0:	6c 93       	st	X, r22
			leds[led_i+i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[led_i+i].rgb.b;
     cb2:	6e 2d       	mov	r22, r14
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     cbe:	2d 81       	ldd	r18, Y+5	; 0x05
     cc0:	3e 81       	ldd	r19, Y+6	; 0x06
     cc2:	4f 81       	ldd	r20, Y+7	; 0x07
     cc4:	58 85       	ldd	r21, Y+8	; 0x08
     cc6:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     cca:	6b 01       	movw	r12, r22
     ccc:	7c 01       	movw	r14, r24
     cce:	f5 01       	movw	r30, r10
     cd0:	32 97       	sbiw	r30, 0x02	; 2
     cd2:	fe 83       	std	Y+6, r31	; 0x06
     cd4:	ed 83       	std	Y+5, r30	; 0x05
     cd6:	60 81       	ld	r22, Z
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     ce2:	9b 01       	movw	r18, r22
     ce4:	ac 01       	movw	r20, r24
     ce6:	69 81       	ldd	r22, Y+1	; 0x01
     ce8:	7a 81       	ldd	r23, Y+2	; 0x02
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     cf2:	9b 01       	movw	r18, r22
     cf4:	ac 01       	movw	r20, r24
     cf6:	c7 01       	movw	r24, r14
     cf8:	b6 01       	movw	r22, r12
     cfa:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     cfe:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     d02:	ad 81       	ldd	r26, Y+5	; 0x05
     d04:	be 81       	ldd	r27, Y+6	; 0x06
     d06:	6c 93       	st	X, r22
			
			leds[num_leds-1-led_i-i].rgb.r = k*((colors[color_i]>>0)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.r;
     d08:	f2 01       	movw	r30, r4
     d0a:	62 91       	ld	r22, -Z
     d0c:	fe 83       	std	Y+6, r31	; 0x06
     d0e:	ed 83       	std	Y+5, r30	; 0x05
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	69 81       	ldd	r22, Y+1	; 0x01
     d20:	7a 81       	ldd	r23, Y+2	; 0x02
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	6e 85       	ldd	r22, Y+14	; 0x0e
     d30:	7f 85       	ldd	r23, Y+15	; 0x0f
     d32:	88 89       	ldd	r24, Y+16	; 0x10
     d34:	99 89       	ldd	r25, Y+17	; 0x11
     d36:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     d3a:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     d3e:	ad 81       	ldd	r26, Y+5	; 0x05
     d40:	be 81       	ldd	r27, Y+6	; 0x06
     d42:	6c 93       	st	X, r22
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
     d44:	f2 01       	movw	r30, r4
     d46:	60 81       	ld	r22, Z
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     d52:	9b 01       	movw	r18, r22
     d54:	ac 01       	movw	r20, r24
     d56:	69 81       	ldd	r22, Y+1	; 0x01
     d58:	7a 81       	ldd	r23, Y+2	; 0x02
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	6a 89       	ldd	r22, Y+18	; 0x12
     d68:	7b 89       	ldd	r23, Y+19	; 0x13
     d6a:	8c 89       	ldd	r24, Y+20	; 0x14
     d6c:	9d 89       	ldd	r25, Y+21	; 0x15
     d6e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     d72:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     d76:	d2 01       	movw	r26, r4
     d78:	6c 93       	st	X, r22
     d7a:	f2 01       	movw	r30, r4
     d7c:	32 97       	sbiw	r30, 0x02	; 2
     d7e:	fe 83       	std	Y+6, r31	; 0x06
     d80:	ed 83       	std	Y+5, r30	; 0x05
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
     d82:	60 81       	ld	r22, Z
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	69 81       	ldd	r22, Y+1	; 0x01
     d94:	7a 81       	ldd	r23, Y+2	; 0x02
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	c7 01       	movw	r24, r14
     da4:	b6 01       	movw	r22, r12
     da6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     daa:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     dae:	ad 81       	ldd	r26, Y+5	; 0x05
     db0:	be 81       	ldd	r27, Y+6	; 0x06
     db2:	6c 93       	st	X, r22
     db4:	b4 e0       	ldi	r27, 0x04	; 4
     db6:	2b 1a       	sub	r2, r27
     db8:	31 08       	sbc	r3, r1
     dba:	e4 e0       	ldi	r30, 0x04	; 4
     dbc:	8e 0e       	add	r8, r30
     dbe:	91 1c       	adc	r9, r1
     dc0:	f4 e0       	ldi	r31, 0x04	; 4
     dc2:	af 0e       	add	r10, r31
     dc4:	b1 1c       	adc	r11, r1
     dc6:	24 e0       	ldi	r18, 0x04	; 4
     dc8:	42 1a       	sub	r4, r18
     dca:	51 08       	sbc	r5, r1
	
	timer++;
	if(timer < 100/seqSpeed) return;
	else timer = 0;
	
	for(int i = 0; i < softness; i++)
     dcc:	06 15       	cp	r16, r6
     dce:	17 05       	cpc	r17, r7
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <seqDoublePingPongFunc+0x556>
     dd2:	da cd       	rjmp	.-1100   	; 0x988 <seqDoublePingPongFunc+0x10a>
			leds[num_leds-1-led_i-i].rgb.g = k*((colors[color_i]>>8)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.g;
			leds[num_leds-1-led_i-i].rgb.b = k*((colors[color_i]>>16)&0xFF) + (1.0f-k)*leds[num_leds-1-led_i-i].rgb.b;
		}
	}
	
	if(led_dir) led_i--;
     dd4:	40 91 bf 03 	lds	r20, 0x03BF
     dd8:	44 23       	and	r20, r20
     dda:	31 f0       	breq	.+12     	; 0xde8 <seqDoublePingPongFunc+0x56a>
     ddc:	80 91 be 03 	lds	r24, 0x03BE
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	80 93 be 03 	sts	0x03BE, r24
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <seqDoublePingPongFunc+0x574>
	else led_i++;
     de8:	80 91 be 03 	lds	r24, 0x03BE
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	80 93 be 03 	sts	0x03BE, r24
	if(led_i >= num_leds/2 + softness || led_i < -softness) {
     df2:	20 91 be 03 	lds	r18, 0x03BE
     df6:	02 2e       	mov	r0, r18
     df8:	00 0c       	add	r0, r0
     dfa:	33 0b       	sbc	r19, r19
     dfc:	8e 89       	ldd	r24, Y+22	; 0x16
     dfe:	9f 89       	ldd	r25, Y+23	; 0x17
     e00:	86 0d       	add	r24, r6
     e02:	97 1d       	adc	r25, r7
     e04:	28 17       	cp	r18, r24
     e06:	39 07       	cpc	r19, r25
     e08:	3c f4       	brge	.+14     	; 0xe18 <seqDoublePingPongFunc+0x59a>
     e0a:	88 27       	eor	r24, r24
     e0c:	99 27       	eor	r25, r25
     e0e:	86 19       	sub	r24, r6
     e10:	97 09       	sbc	r25, r7
     e12:	28 17       	cp	r18, r24
     e14:	39 07       	cpc	r19, r25
     e16:	1c f5       	brge	.+70     	; 0xe5e <seqDoublePingPongFunc+0x5e0>
		color_i = (color_i+1)%numColors;
     e18:	80 91 bd 03 	lds	r24, 0x03BD
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	60 91 42 01 	lds	r22, 0x0142
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
     e2a:	80 93 bd 03 	sts	0x03BD, r24
		led_dir = led_dir == 1 ? 0 : 1;
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	41 30       	cpi	r20, 0x01	; 1
     e32:	09 f4       	brne	.+2      	; 0xe36 <seqDoublePingPongFunc+0x5b8>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	20 93 bf 03 	sts	0x03BF, r18
		led_i = 0 + led_dir*num_leds/2-1;
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     e3e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     e40:	24 9f       	mul	r18, r20
     e42:	c0 01       	movw	r24, r0
     e44:	25 9f       	mul	r18, r21
     e46:	90 0d       	add	r25, r0
     e48:	34 9f       	mul	r19, r20
     e4a:	90 0d       	add	r25, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	99 23       	and	r25, r25
     e50:	0c f4       	brge	.+2      	; 0xe54 <seqDoublePingPongFunc+0x5d6>
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	95 95       	asr	r25
     e56:	87 95       	ror	r24
     e58:	81 50       	subi	r24, 0x01	; 1
     e5a:	80 93 be 03 	sts	0x03BE, r24
	}
}
     e5e:	6f 96       	adiw	r28, 0x1f	; 31
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	3f 90       	pop	r3
     e8c:	2f 90       	pop	r2
     e8e:	08 95       	ret

00000e90 <seqFadeFunc>:

static void seqFadeFunc(color_t *leds, int num_leds)
{
     e90:	2f 92       	push	r2
     e92:	3f 92       	push	r3
     e94:	4f 92       	push	r4
     e96:	5f 92       	push	r5
     e98:	6f 92       	push	r6
     e9a:	7f 92       	push	r7
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	8c 01       	movw	r16, r24
     eb6:	eb 01       	movw	r28, r22
	static uint8_t color_i = 0;
	static int8_t led_dir = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
     eb8:	60 91 45 01 	lds	r22, 0x0145
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e4       	ldi	r19, 0x40	; 64
     eca:	4c e9       	ldi	r20, 0x9C	; 156
     ecc:	55 e4       	ldi	r21, 0x45	; 69
     ece:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
     ed2:	2b 01       	movw	r4, r22
     ed4:	3c 01       	movw	r6, r24
	
	for(int i = 0; i < num_leds; i++)
     ed6:	1c 16       	cp	r1, r28
     ed8:	1d 06       	cpc	r1, r29
     eda:	0c f0       	brlt	.+2      	; 0xede <seqFadeFunc+0x4e>
     edc:	53 c0       	rjmp	.+166    	; 0xf84 <seqFadeFunc+0xf4>
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     ede:	e0 91 c6 03 	lds	r30, 0x03C6
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ee 5f       	subi	r30, 0xFE	; 254
     eee:	fe 4f       	sbci	r31, 0xFE	; 254
     ef0:	80 80       	ld	r8, Z
     ef2:	91 80       	ldd	r9, Z+1	; 0x01
     ef4:	a2 80       	ldd	r10, Z+2	; 0x02
     ef6:	b3 80       	ldd	r11, Z+3	; 0x03
     ef8:	c0 90 c2 03 	lds	r12, 0x03C2
     efc:	d0 90 c3 03 	lds	r13, 0x03C3
     f00:	e0 90 c4 03 	lds	r14, 0x03C4
     f04:	f0 90 c5 03 	lds	r15, 0x03C5
     f08:	c5 01       	movw	r24, r10
     f0a:	b4 01       	movw	r22, r8
     f0c:	77 27       	eor	r23, r23
     f0e:	88 27       	eor	r24, r24
     f10:	99 27       	eor	r25, r25
     f12:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     f16:	a7 01       	movw	r20, r14
     f18:	96 01       	movw	r18, r12
     f1a:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     f1e:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     f22:	26 2e       	mov	r2, r22
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     f24:	69 2d       	mov	r22, r9
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     f30:	9b 01       	movw	r18, r22
     f32:	ac 01       	movw	r20, r24
     f34:	c7 01       	movw	r24, r14
     f36:	b6 01       	movw	r22, r12
     f38:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     f3c:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     f40:	36 2e       	mov	r3, r22
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     f42:	6a 2d       	mov	r22, r10
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	c7 01       	movw	r24, r14
     f54:	b6 01       	movw	r22, r12
     f56:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
     f5a:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
     f5e:	f8 01       	movw	r30, r16
     f60:	32 96       	adiw	r30, 0x02	; 2
     f62:	cc 0f       	add	r28, r28
     f64:	dd 1f       	adc	r29, r29
     f66:	cc 0f       	add	r28, r28
     f68:	dd 1f       	adc	r29, r29
     f6a:	22 96       	adiw	r28, 0x02	; 2
     f6c:	0c 0f       	add	r16, r28
     f6e:	1d 1f       	adc	r17, r29
     f70:	df 01       	movw	r26, r30
     f72:	11 97       	sbiw	r26, 0x01	; 1
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
     f74:	2c 92       	st	X, r2
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
     f76:	30 82       	st	Z, r3
     f78:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
     f7a:	6c 93       	st	X, r22
     f7c:	34 96       	adiw	r30, 0x04	; 4
	static int8_t led_dir = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
     f7e:	e0 17       	cp	r30, r16
     f80:	f1 07       	cpc	r31, r17
     f82:	b1 f7       	brne	.-20     	; 0xf70 <seqFadeFunc+0xe0>
		leds[i].rgb.r = k*((colors[color_i]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[color_i]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[color_i]>>16)&0xFF);
	}
	
	if(!led_dir) k+=speed;
     f84:	80 91 c1 03 	lds	r24, 0x03C1
     f88:	81 11       	cpse	r24, r1
     f8a:	15 c0       	rjmp	.+42     	; 0xfb6 <seqFadeFunc+0x126>
     f8c:	a3 01       	movw	r20, r6
     f8e:	92 01       	movw	r18, r4
     f90:	60 91 c2 03 	lds	r22, 0x03C2
     f94:	70 91 c3 03 	lds	r23, 0x03C3
     f98:	80 91 c4 03 	lds	r24, 0x03C4
     f9c:	90 91 c5 03 	lds	r25, 0x03C5
     fa0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
     fa4:	60 93 c2 03 	sts	0x03C2, r22
     fa8:	70 93 c3 03 	sts	0x03C3, r23
     fac:	80 93 c4 03 	sts	0x03C4, r24
     fb0:	90 93 c5 03 	sts	0x03C5, r25
     fb4:	14 c0       	rjmp	.+40     	; 0xfde <seqFadeFunc+0x14e>
	else k-=speed;
     fb6:	a3 01       	movw	r20, r6
     fb8:	92 01       	movw	r18, r4
     fba:	60 91 c2 03 	lds	r22, 0x03C2
     fbe:	70 91 c3 03 	lds	r23, 0x03C3
     fc2:	80 91 c4 03 	lds	r24, 0x03C4
     fc6:	90 91 c5 03 	lds	r25, 0x03C5
     fca:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
     fce:	60 93 c2 03 	sts	0x03C2, r22
     fd2:	70 93 c3 03 	sts	0x03C3, r23
     fd6:	80 93 c4 03 	sts	0x03C4, r24
     fda:	90 93 c5 03 	sts	0x03C5, r25
	if(k >= 1.0f) {
     fde:	c0 90 c2 03 	lds	r12, 0x03C2
     fe2:	d0 90 c3 03 	lds	r13, 0x03C3
     fe6:	e0 90 c4 03 	lds	r14, 0x03C4
     fea:	f0 90 c5 03 	lds	r15, 0x03C5
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	c7 01       	movw	r24, r14
     ff8:	b6 01       	movw	r22, r12
     ffa:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__gesf2>
     ffe:	88 23       	and	r24, r24
    1000:	84 f0       	brlt	.+32     	; 0x1022 <seqFadeFunc+0x192>
		led_dir = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	80 93 c1 03 	sts	0x03C1, r24
		k = 1.0f;
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e8       	ldi	r26, 0x80	; 128
    100e:	bf e3       	ldi	r27, 0x3F	; 63
    1010:	80 93 c2 03 	sts	0x03C2, r24
    1014:	90 93 c3 03 	sts	0x03C3, r25
    1018:	a0 93 c4 03 	sts	0x03C4, r26
    101c:	b0 93 c5 03 	sts	0x03C5, r27
    1020:	22 c0       	rjmp	.+68     	; 0x1066 <seqFadeFunc+0x1d6>
	}
	if(k <= 0.0f && led_dir) {
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	c7 01       	movw	r24, r14
    102a:	b6 01       	movw	r22, r12
    102c:	0e 94 12 10 	call	0x2024	; 0x2024 <__cmpsf2>
    1030:	18 16       	cp	r1, r24
    1032:	cc f0       	brlt	.+50     	; 0x1066 <seqFadeFunc+0x1d6>
    1034:	80 91 c1 03 	lds	r24, 0x03C1
    1038:	88 23       	and	r24, r24
    103a:	a9 f0       	breq	.+42     	; 0x1066 <seqFadeFunc+0x1d6>
		color_i = (color_i+1)%numColors;
    103c:	80 91 c6 03 	lds	r24, 0x03C6
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	60 91 42 01 	lds	r22, 0x0142
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    104e:	80 93 c6 03 	sts	0x03C6, r24
		led_dir = 0;
    1052:	10 92 c1 03 	sts	0x03C1, r1
		k = 0.0f;
    1056:	10 92 c2 03 	sts	0x03C2, r1
    105a:	10 92 c3 03 	sts	0x03C3, r1
    105e:	10 92 c4 03 	sts	0x03C4, r1
    1062:	10 92 c5 03 	sts	0x03C5, r1
	}
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	4f 90       	pop	r4
    1086:	3f 90       	pop	r3
    1088:	2f 90       	pop	r2
    108a:	08 95       	ret

0000108c <seqSoftSwitchFunc>:

static void seqSoftSwitchFunc(color_t *leds, int num_leds)
{
    108c:	2f 92       	push	r2
    108e:	3f 92       	push	r3
    1090:	4f 92       	push	r4
    1092:	5f 92       	push	r5
    1094:	6f 92       	push	r6
    1096:	7f 92       	push	r7
    1098:	8f 92       	push	r8
    109a:	9f 92       	push	r9
    109c:	af 92       	push	r10
    109e:	bf 92       	push	r11
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	2d 97       	sbiw	r28, 0x0d	; 13
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	1c 01       	movw	r2, r24
    10c2:	8b 01       	movw	r16, r22
	static uint8_t color_i = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
    10c4:	60 91 45 01 	lds	r22, 0x0145
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e4       	ldi	r19, 0x40	; 64
    10d6:	4c e9       	ldi	r20, 0x9C	; 156
    10d8:	55 e4       	ldi	r21, 0x45	; 69
    10da:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
    10de:	69 87       	std	Y+9, r22	; 0x09
    10e0:	7a 87       	std	Y+10, r23	; 0x0a
    10e2:	8b 87       	std	Y+11, r24	; 0x0b
    10e4:	9c 87       	std	Y+12, r25	; 0x0c
	
	for(int i = 0; i < num_leds; i++)
    10e6:	10 16       	cp	r1, r16
    10e8:	11 06       	cpc	r1, r17
    10ea:	0c f0       	brlt	.+2      	; 0x10ee <seqSoftSwitchFunc+0x62>
    10ec:	c2 c0       	rjmp	.+388    	; 0x1272 <seqSoftSwitchFunc+0x1e6>
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
    10ee:	80 91 c8 03 	lds	r24, 0x03C8
    10f2:	90 91 c9 03 	lds	r25, 0x03C9
    10f6:	a0 91 ca 03 	lds	r26, 0x03CA
    10fa:	b0 91 cb 03 	lds	r27, 0x03CB
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	ab 83       	std	Y+3, r26	; 0x03
    1104:	bc 83       	std	Y+4, r27	; 0x04
    1106:	9c 01       	movw	r18, r24
    1108:	ad 01       	movw	r20, r26
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e8       	ldi	r24, 0x80	; 128
    1110:	9f e3       	ldi	r25, 0x3F	; 63
    1112:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    1116:	6d 83       	std	Y+5, r22	; 0x05
    1118:	7e 83       	std	Y+6, r23	; 0x06
    111a:	8f 83       	std	Y+7, r24	; 0x07
    111c:	98 87       	std	Y+8, r25	; 0x08
    111e:	80 91 c7 03 	lds	r24, 0x03C7
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	fc 01       	movw	r30, r24
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	ee 5f       	subi	r30, 0xFE	; 254
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 80       	ld	r8, Z
    1134:	91 80       	ldd	r9, Z+1	; 0x01
    1136:	a2 80       	ldd	r10, Z+2	; 0x02
    1138:	b3 80       	ldd	r11, Z+3	; 0x03
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	60 91 42 01 	lds	r22, 0x0142
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    1146:	fc 01       	movw	r30, r24
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	ee 5f       	subi	r30, 0xFE	; 254
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	c0 80       	ld	r12, Z
    1156:	d1 80       	ldd	r13, Z+1	; 0x01
    1158:	e2 80       	ldd	r14, Z+2	; 0x02
    115a:	f3 80       	ldd	r15, Z+3	; 0x03
    115c:	c5 01       	movw	r24, r10
    115e:	b4 01       	movw	r22, r8
    1160:	77 27       	eor	r23, r23
    1162:	88 27       	eor	r24, r24
    1164:	99 27       	eor	r25, r25
    1166:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    116a:	9b 01       	movw	r18, r22
    116c:	ac 01       	movw	r20, r24
    116e:	6d 81       	ldd	r22, Y+5	; 0x05
    1170:	7e 81       	ldd	r23, Y+6	; 0x06
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    117a:	2b 01       	movw	r4, r22
    117c:	3c 01       	movw	r6, r24
    117e:	c7 01       	movw	r24, r14
    1180:	b6 01       	movw	r22, r12
    1182:	77 27       	eor	r23, r23
    1184:	88 27       	eor	r24, r24
    1186:	99 27       	eor	r25, r25
    1188:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    118c:	9b 01       	movw	r18, r22
    118e:	ac 01       	movw	r20, r24
    1190:	69 81       	ldd	r22, Y+1	; 0x01
    1192:	7a 81       	ldd	r23, Y+2	; 0x02
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	c3 01       	movw	r24, r6
    11a2:	b2 01       	movw	r22, r4
    11a4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    11a8:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    11ac:	6d 87       	std	Y+13, r22	; 0x0d
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
    11ae:	69 2d       	mov	r22, r9
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	6d 81       	ldd	r22, Y+5	; 0x05
    11c0:	7e 81       	ldd	r23, Y+6	; 0x06
    11c2:	8f 81       	ldd	r24, Y+7	; 0x07
    11c4:	98 85       	ldd	r25, Y+8	; 0x08
    11c6:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    11ca:	2b 01       	movw	r4, r22
    11cc:	3c 01       	movw	r6, r24
    11ce:	6d 2d       	mov	r22, r13
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	69 81       	ldd	r22, Y+1	; 0x01
    11e0:	7a 81       	ldd	r23, Y+2	; 0x02
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	c3 01       	movw	r24, r6
    11f0:	b2 01       	movw	r22, r4
    11f2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    11f6:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    11fa:	76 2e       	mov	r7, r22
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
    11fc:	6a 2d       	mov	r22, r10
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	6d 81       	ldd	r22, Y+5	; 0x05
    120e:	7e 81       	ldd	r23, Y+6	; 0x06
    1210:	8f 81       	ldd	r24, Y+7	; 0x07
    1212:	98 85       	ldd	r25, Y+8	; 0x08
    1214:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1218:	4b 01       	movw	r8, r22
    121a:	5c 01       	movw	r10, r24
    121c:	6e 2d       	mov	r22, r14
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	69 81       	ldd	r22, Y+1	; 0x01
    122e:	7a 81       	ldd	r23, Y+2	; 0x02
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	c5 01       	movw	r24, r10
    123e:	b4 01       	movw	r22, r8
    1240:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1244:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    1248:	f1 01       	movw	r30, r2
    124a:	32 96       	adiw	r30, 0x02	; 2
    124c:	00 0f       	add	r16, r16
    124e:	11 1f       	adc	r17, r17
    1250:	00 0f       	add	r16, r16
    1252:	11 1f       	adc	r17, r17
    1254:	0e 5f       	subi	r16, 0xFE	; 254
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	20 0e       	add	r2, r16
    125a:	31 1e       	adc	r3, r17
    125c:	8d 85       	ldd	r24, Y+13	; 0x0d
    125e:	df 01       	movw	r26, r30
    1260:	11 97       	sbiw	r26, 0x01	; 1
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
	{
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
    1262:	8c 93       	st	X, r24
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
    1264:	70 82       	st	Z, r7
    1266:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
    1268:	6c 93       	st	X, r22
    126a:	34 96       	adiw	r30, 0x04	; 4
	static uint8_t color_i = 0;
	static float k = 0.0f;
	
	float speed = seqSpeed / 5000.0f;
	
	for(int i = 0; i < num_leds; i++)
    126c:	e2 15       	cp	r30, r2
    126e:	f3 05       	cpc	r31, r3
    1270:	b1 f7       	brne	.-20     	; 0x125e <seqSoftSwitchFunc+0x1d2>
		leds[i].rgb.r = (1.0f-k)*((colors[color_i]>>0)&0xFF) + k*((colors[(color_i+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = (1.0f-k)*((colors[color_i]>>8)&0xFF) + k*((colors[(color_i+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = (1.0f-k)*((colors[color_i]>>16)&0xFF) + k*((colors[(color_i+1)%numColors]>>16)&0xFF);
	}
	
	k += speed;
    1272:	20 91 c8 03 	lds	r18, 0x03C8
    1276:	30 91 c9 03 	lds	r19, 0x03C9
    127a:	40 91 ca 03 	lds	r20, 0x03CA
    127e:	50 91 cb 03 	lds	r21, 0x03CB
    1282:	69 85       	ldd	r22, Y+9	; 0x09
    1284:	7a 85       	ldd	r23, Y+10	; 0x0a
    1286:	8b 85       	ldd	r24, Y+11	; 0x0b
    1288:	9c 85       	ldd	r25, Y+12	; 0x0c
    128a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    128e:	60 93 c8 03 	sts	0x03C8, r22
    1292:	70 93 c9 03 	sts	0x03C9, r23
    1296:	80 93 ca 03 	sts	0x03CA, r24
    129a:	90 93 cb 03 	sts	0x03CB, r25
	if(k >= 1.0f) {
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__gesf2>
    12aa:	88 23       	and	r24, r24
    12ac:	9c f0       	brlt	.+38     	; 0x12d4 <seqSoftSwitchFunc+0x248>
		color_i = (color_i+1)%numColors;
    12ae:	80 91 c7 03 	lds	r24, 0x03C7
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	60 91 42 01 	lds	r22, 0x0142
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    12c0:	80 93 c7 03 	sts	0x03C7, r24
		k = 0;
    12c4:	10 92 c8 03 	sts	0x03C8, r1
    12c8:	10 92 c9 03 	sts	0x03C9, r1
    12cc:	10 92 ca 03 	sts	0x03CA, r1
    12d0:	10 92 cb 03 	sts	0x03CB, r1
	}
}
    12d4:	2d 96       	adiw	r28, 0x0d	; 13
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	8f 90       	pop	r8
    12f8:	7f 90       	pop	r7
    12fa:	6f 90       	pop	r6
    12fc:	5f 90       	pop	r5
    12fe:	4f 90       	pop	r4
    1300:	3f 90       	pop	r3
    1302:	2f 90       	pop	r2
    1304:	08 95       	ret

00001306 <seqStaticColor>:

static void seqStaticColor(color_t *leds, int num_leds)
{
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
	for(int i = 0; i < num_leds; i++)
    130a:	16 16       	cp	r1, r22
    130c:	17 06       	cpc	r1, r23
    130e:	b4 f4       	brge	.+44     	; 0x133c <seqStaticColor+0x36>
	leds[i].val = colors[0];
    1310:	00 91 02 01 	lds	r16, 0x0102
    1314:	10 91 03 01 	lds	r17, 0x0103
    1318:	20 91 04 01 	lds	r18, 0x0104
    131c:	30 91 05 01 	lds	r19, 0x0105
    1320:	fc 01       	movw	r30, r24
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	86 0f       	add	r24, r22
    132c:	97 1f       	adc	r25, r23
    132e:	01 93       	st	Z+, r16
    1330:	11 93       	st	Z+, r17
    1332:	21 93       	st	Z+, r18
    1334:	31 93       	st	Z+, r19
	}
}

static void seqStaticColor(color_t *leds, int num_leds)
{
	for(int i = 0; i < num_leds; i++)
    1336:	e8 17       	cp	r30, r24
    1338:	f9 07       	cpc	r31, r25
    133a:	c9 f7       	brne	.-14     	; 0x132e <seqStaticColor+0x28>
	leds[i].val = colors[0];
}
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <seqParticles>:
	if(pos > 2*M_PI)
	pos -= 2*M_PI;
}

static void seqParticles(color_t *leds, int num_leds)
{
    1342:	2f 92       	push	r2
    1344:	3f 92       	push	r3
    1346:	4f 92       	push	r4
    1348:	5f 92       	push	r5
    134a:	6f 92       	push	r6
    134c:	7f 92       	push	r7
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	a6 97       	sbiw	r28, 0x26	; 38
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	9e 8f       	std	Y+30, r25	; 0x1e
    1378:	8d 8f       	std	Y+29, r24	; 0x1d
    137a:	7a a3       	std	Y+34, r23	; 0x22
    137c:	69 a3       	std	Y+33, r22	; 0x21
	static float pos = 0;
	static int length = 0;
	static int color_id = 0;
	static uint8_t decremented = 0;
	
	float speed = seqSpeed / 50.0f;
    137e:	60 91 45 01 	lds	r22, 0x0145
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	48 e4       	ldi	r20, 0x48	; 72
    1392:	52 e4       	ldi	r21, 0x42	; 66
    1394:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
    1398:	6b a3       	std	Y+35, r22	; 0x23
    139a:	7c a3       	std	Y+36, r23	; 0x24
    139c:	8d a3       	std	Y+37, r24	; 0x25
    139e:	9e a3       	std	Y+38, r25	; 0x26
	float size = seqSize;
    13a0:	60 91 43 01 	lds	r22, 0x0143
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    13ae:	69 8b       	std	Y+17, r22	; 0x11
    13b0:	7a 8b       	std	Y+18, r23	; 0x12
    13b2:	8b 8b       	std	Y+19, r24	; 0x13
    13b4:	9c 8b       	std	Y+20, r25	; 0x14
	
	if(length <= 0) {
    13b6:	80 91 d7 03 	lds	r24, 0x03D7
    13ba:	90 91 d8 03 	lds	r25, 0x03D8
    13be:	18 16       	cp	r1, r24
    13c0:	19 06       	cpc	r1, r25
    13c2:	d4 f0       	brlt	.+52     	; 0x13f8 <seqParticles+0xb6>
		length = num_leds;
    13c4:	29 a1       	ldd	r18, Y+33	; 0x21
    13c6:	3a a1       	ldd	r19, Y+34	; 0x22
    13c8:	30 93 d8 03 	sts	0x03D8, r19
    13cc:	20 93 d7 03 	sts	0x03D7, r18
		color_id = (color_id+1) % numColors;
    13d0:	80 91 d5 03 	lds	r24, 0x03D5
    13d4:	90 91 d6 03 	lds	r25, 0x03D6
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	60 91 42 01 	lds	r22, 0x0142
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    13e4:	90 93 d6 03 	sts	0x03D6, r25
    13e8:	80 93 d5 03 	sts	0x03D5, r24
	}
	
	for(int i = 0; i < length; i++) {
    13ec:	38 a3       	std	Y+32, r19	; 0x20
    13ee:	2f 8f       	std	Y+31, r18	; 0x1f
    13f0:	12 16       	cp	r1, r18
    13f2:	13 06       	cpc	r1, r19
    13f4:	0c f0       	brlt	.+2      	; 0x13f8 <seqParticles+0xb6>
    13f6:	36 c1       	rjmp	.+620    	; 0x1664 <seqParticles+0x322>
		float dist = pos-i;
    13f8:	60 91 d1 03 	lds	r22, 0x03D1
    13fc:	70 91 d2 03 	lds	r23, 0x03D2
    1400:	80 91 d3 03 	lds	r24, 0x03D3
    1404:	90 91 d4 03 	lds	r25, 0x03D4
    1408:	6d 8b       	std	Y+21, r22	; 0x15
    140a:	7e 8b       	std	Y+22, r23	; 0x16
    140c:	8f 8b       	std	Y+23, r24	; 0x17
    140e:	98 8f       	std	Y+24, r25	; 0x18
		dist = dist < 0 ? -dist : dist;
		if(dist < size) {
			float k = dist / size;
			leds[i].rgb.r = k*((colors[color_id]>>0)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    1410:	80 91 d5 03 	lds	r24, 0x03D5
    1414:	90 91 d6 03 	lds	r25, 0x03D6
    1418:	dc 01       	movw	r26, r24
    141a:	11 96       	adiw	r26, 0x01	; 1
    141c:	ba 8f       	std	Y+26, r27	; 0x1a
    141e:	a9 8f       	std	Y+25, r26	; 0x19
    1420:	20 91 42 01 	lds	r18, 0x0142
    1424:	e2 2f       	mov	r30, r18
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	fc 8f       	std	Y+28, r31	; 0x1c
    142a:	eb 8f       	std	Y+27, r30	; 0x1b
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    142c:	20 91 d7 03 	lds	r18, 0x03D7
    1430:	30 91 d8 03 	lds	r19, 0x03D8
    1434:	38 a3       	std	Y+32, r19	; 0x20
    1436:	2f 8f       	std	Y+31, r18	; 0x1f
    1438:	2d 8c       	ldd	r2, Y+29	; 0x1d
    143a:	3e 8c       	ldd	r3, Y+30	; 0x1e
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	23 1a       	sub	r2, r19
    1440:	33 0a       	sbc	r3, r19
    1442:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1444:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1446:	32 01       	movw	r6, r4
    1448:	42 e0       	ldi	r20, 0x02	; 2
    144a:	64 0e       	add	r6, r20
    144c:	71 1c       	adc	r7, r1
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	10 e0       	ldi	r17, 0x00	; 0
			float k = dist / size;
			leds[i].rgb.r = k*((colors[color_id]>>0)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
			leds[i].rgb.g = k*((colors[color_id]>>8)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>8)&0xFF);
			leds[i].rgb.b = k*((colors[color_id]>>16)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>16)&0xFF);
			} else {
			leds[i].rgb.r = ((colors[color_id]>>0)&0xFF);
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	bc 01       	movw	r22, r24
    145c:	6e 5f       	subi	r22, 0xFE	; 254
    145e:	7e 4f       	sbci	r23, 0xFE	; 254
    1460:	af 8c       	ldd	r10, Y+31	; 0x1f
    1462:	b8 a0       	ldd	r11, Y+32	; 0x20
    1464:	41 01       	movw	r8, r2
    1466:	13 01       	movw	r2, r6
    1468:	32 01       	movw	r6, r4
    146a:	2b 01       	movw	r4, r22
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
		float dist = pos-i;
    146c:	b8 01       	movw	r22, r16
    146e:	01 2e       	mov	r0, r17
    1470:	00 0c       	add	r0, r0
    1472:	88 0b       	sbc	r24, r24
    1474:	99 0b       	sbc	r25, r25
    1476:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    147a:	9b 01       	movw	r18, r22
    147c:	ac 01       	movw	r20, r24
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	8f 89       	ldd	r24, Y+23	; 0x17
    1484:	98 8d       	ldd	r25, Y+24	; 0x18
    1486:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    148a:	6b 01       	movw	r12, r22
    148c:	7c 01       	movw	r14, r24
		dist = dist < 0 ? -dist : dist;
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	a9 01       	movw	r20, r18
    1494:	0e 94 12 10 	call	0x2024	; 0x2024 <__cmpsf2>
    1498:	88 23       	and	r24, r24
    149a:	24 f4       	brge	.+8      	; 0x14a4 <seqParticles+0x162>
    149c:	f7 fa       	bst	r15, 7
    149e:	f0 94       	com	r15
    14a0:	f7 f8       	bld	r15, 7
    14a2:	f0 94       	com	r15
		if(dist < size) {
    14a4:	29 89       	ldd	r18, Y+17	; 0x11
    14a6:	3a 89       	ldd	r19, Y+18	; 0x12
    14a8:	4b 89       	ldd	r20, Y+19	; 0x13
    14aa:	5c 89       	ldd	r21, Y+20	; 0x14
    14ac:	c7 01       	movw	r24, r14
    14ae:	b6 01       	movw	r22, r12
    14b0:	0e 94 12 10 	call	0x2024	; 0x2024 <__cmpsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	0c f0       	brlt	.+2      	; 0x14ba <seqParticles+0x178>
    14b8:	bc c0       	rjmp	.+376    	; 0x1632 <seqParticles+0x2f0>
			float k = dist / size;
    14ba:	29 89       	ldd	r18, Y+17	; 0x11
    14bc:	3a 89       	ldd	r19, Y+18	; 0x12
    14be:	4b 89       	ldd	r20, Y+19	; 0x13
    14c0:	5c 89       	ldd	r21, Y+20	; 0x14
    14c2:	c7 01       	movw	r24, r14
    14c4:	b6 01       	movw	r22, r12
    14c6:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
    14ca:	69 83       	std	Y+1, r22	; 0x01
    14cc:	7a 83       	std	Y+2, r23	; 0x02
    14ce:	8b 83       	std	Y+3, r24	; 0x03
    14d0:	9c 83       	std	Y+4, r25	; 0x04
			leds[i].rgb.r = k*((colors[color_id]>>0)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    14d2:	d2 01       	movw	r26, r4
    14d4:	8d 91       	ld	r24, X+
    14d6:	9d 91       	ld	r25, X+
    14d8:	0d 90       	ld	r0, X+
    14da:	bc 91       	ld	r27, X
    14dc:	a0 2d       	mov	r26, r0
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	af 83       	std	Y+7, r26	; 0x07
    14e4:	b8 87       	std	Y+8, r27	; 0x08
    14e6:	29 81       	ldd	r18, Y+1	; 0x01
    14e8:	3a 81       	ldd	r19, Y+2	; 0x02
    14ea:	4b 81       	ldd	r20, Y+3	; 0x03
    14ec:	5c 81       	ldd	r21, Y+4	; 0x04
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	9f e3       	ldi	r25, 0x3F	; 63
    14f6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    14fa:	69 87       	std	Y+9, r22	; 0x09
    14fc:	7a 87       	std	Y+10, r23	; 0x0a
    14fe:	8b 87       	std	Y+11, r24	; 0x0b
    1500:	9c 87       	std	Y+12, r25	; 0x0c
    1502:	89 8d       	ldd	r24, Y+25	; 0x19
    1504:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1506:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1508:	7c 8d       	ldd	r23, Y+28	; 0x1c
    150a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    150e:	7c 01       	movw	r14, r24
    1510:	6d 81       	ldd	r22, Y+5	; 0x05
    1512:	7e 81       	ldd	r23, Y+6	; 0x06
    1514:	8f 81       	ldd	r24, Y+7	; 0x07
    1516:	98 85       	ldd	r25, Y+8	; 0x08
    1518:	77 27       	eor	r23, r23
    151a:	88 27       	eor	r24, r24
    151c:	99 27       	eor	r25, r25
    151e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1522:	29 81       	ldd	r18, Y+1	; 0x01
    1524:	3a 81       	ldd	r19, Y+2	; 0x02
    1526:	4b 81       	ldd	r20, Y+3	; 0x03
    1528:	5c 81       	ldd	r21, Y+4	; 0x04
    152a:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    152e:	6d 87       	std	Y+13, r22	; 0x0d
    1530:	7e 87       	std	Y+14, r23	; 0x0e
    1532:	8f 87       	std	Y+15, r24	; 0x0f
    1534:	98 8b       	std	Y+16, r25	; 0x10
    1536:	c7 01       	movw	r24, r14
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	8e 5f       	subi	r24, 0xFE	; 254
    1542:	9e 4f       	sbci	r25, 0xFE	; 254
    1544:	fc 01       	movw	r30, r24
    1546:	c0 80       	ld	r12, Z
    1548:	d1 80       	ldd	r13, Z+1	; 0x01
    154a:	e2 80       	ldd	r14, Z+2	; 0x02
    154c:	f3 80       	ldd	r15, Z+3	; 0x03
    154e:	c7 01       	movw	r24, r14
    1550:	b6 01       	movw	r22, r12
    1552:	77 27       	eor	r23, r23
    1554:	88 27       	eor	r24, r24
    1556:	99 27       	eor	r25, r25
    1558:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    155c:	9b 01       	movw	r18, r22
    155e:	ac 01       	movw	r20, r24
    1560:	69 85       	ldd	r22, Y+9	; 0x09
    1562:	7a 85       	ldd	r23, Y+10	; 0x0a
    1564:	8b 85       	ldd	r24, Y+11	; 0x0b
    1566:	9c 85       	ldd	r25, Y+12	; 0x0c
    1568:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	6d 85       	ldd	r22, Y+13	; 0x0d
    1572:	7e 85       	ldd	r23, Y+14	; 0x0e
    1574:	8f 85       	ldd	r24, Y+15	; 0x0f
    1576:	98 89       	ldd	r25, Y+16	; 0x10
    1578:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    157c:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    1580:	d4 01       	movw	r26, r8
    1582:	6c 93       	st	X, r22
			leds[i].rgb.g = k*((colors[color_id]>>8)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>8)&0xFF);
    1584:	be 81       	ldd	r27, Y+6	; 0x06
    1586:	6b 2f       	mov	r22, r27
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1592:	29 81       	ldd	r18, Y+1	; 0x01
    1594:	3a 81       	ldd	r19, Y+2	; 0x02
    1596:	4b 81       	ldd	r20, Y+3	; 0x03
    1598:	5c 81       	ldd	r21, Y+4	; 0x04
    159a:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    159e:	6d 87       	std	Y+13, r22	; 0x0d
    15a0:	7e 87       	std	Y+14, r23	; 0x0e
    15a2:	8f 87       	std	Y+15, r24	; 0x0f
    15a4:	98 8b       	std	Y+16, r25	; 0x10
    15a6:	6d 2d       	mov	r22, r13
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	69 85       	ldd	r22, Y+9	; 0x09
    15b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    15bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    15be:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    15c2:	9b 01       	movw	r18, r22
    15c4:	ac 01       	movw	r20, r24
    15c6:	6d 85       	ldd	r22, Y+13	; 0x0d
    15c8:	7e 85       	ldd	r23, Y+14	; 0x0e
    15ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    15cc:	98 89       	ldd	r25, Y+16	; 0x10
    15ce:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    15d2:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    15d6:	f1 01       	movw	r30, r2
    15d8:	60 83       	st	Z, r22
			leds[i].rgb.b = k*((colors[color_id]>>16)&0xFF) + (1.0f-k)*((colors[(color_id+1)%numColors]>>16)&0xFF);
    15da:	ff 81       	ldd	r31, Y+7	; 0x07
    15dc:	6f 2f       	mov	r22, r31
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    15e8:	29 81       	ldd	r18, Y+1	; 0x01
    15ea:	3a 81       	ldd	r19, Y+2	; 0x02
    15ec:	4b 81       	ldd	r20, Y+3	; 0x03
    15ee:	5c 81       	ldd	r21, Y+4	; 0x04
    15f0:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    15f4:	69 83       	std	Y+1, r22	; 0x01
    15f6:	7a 83       	std	Y+2, r23	; 0x02
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	6e 2d       	mov	r22, r14
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1608:	9b 01       	movw	r18, r22
    160a:	ac 01       	movw	r20, r24
    160c:	69 85       	ldd	r22, Y+9	; 0x09
    160e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1610:	8b 85       	ldd	r24, Y+11	; 0x0b
    1612:	9c 85       	ldd	r25, Y+12	; 0x0c
    1614:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1618:	9b 01       	movw	r18, r22
    161a:	ac 01       	movw	r20, r24
    161c:	69 81       	ldd	r22, Y+1	; 0x01
    161e:	7a 81       	ldd	r23, Y+2	; 0x02
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1628:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    162c:	d3 01       	movw	r26, r6
    162e:	6c 93       	st	X, r22
    1630:	0a c0       	rjmp	.+20     	; 0x1646 <seqParticles+0x304>
			} else {
			leds[i].rgb.r = ((colors[color_id]>>0)&0xFF);
    1632:	f2 01       	movw	r30, r4
    1634:	20 81       	ld	r18, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	d4 01       	movw	r26, r8
    163c:	2c 93       	st	X, r18
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
    163e:	f1 01       	movw	r30, r2
    1640:	90 83       	st	Z, r25
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
    1642:	d3 01       	movw	r26, r6
    1644:	8c 93       	st	X, r24
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    1646:	0f 5f       	subi	r16, 0xFF	; 255
    1648:	1f 4f       	sbci	r17, 0xFF	; 255
    164a:	b4 e0       	ldi	r27, 0x04	; 4
    164c:	8b 0e       	add	r8, r27
    164e:	91 1c       	adc	r9, r1
    1650:	e4 e0       	ldi	r30, 0x04	; 4
    1652:	6e 0e       	add	r6, r30
    1654:	71 1c       	adc	r7, r1
    1656:	f4 e0       	ldi	r31, 0x04	; 4
    1658:	2f 0e       	add	r2, r31
    165a:	31 1c       	adc	r3, r1
    165c:	0a 15       	cp	r16, r10
    165e:	1b 05       	cpc	r17, r11
    1660:	0c f4       	brge	.+2      	; 0x1664 <seqParticles+0x322>
    1662:	04 cf       	rjmp	.-504    	; 0x146c <seqParticles+0x12a>
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    1664:	29 a1       	ldd	r18, Y+33	; 0x21
    1666:	3a a1       	ldd	r19, Y+34	; 0x22
    1668:	4f 8d       	ldd	r20, Y+31	; 0x1f
    166a:	58 a1       	ldd	r21, Y+32	; 0x20
    166c:	42 17       	cp	r20, r18
    166e:	53 07       	cpc	r21, r19
    1670:	94 f5       	brge	.+100    	; 0x16d6 <seqParticles+0x394>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
    1672:	80 91 d5 03 	lds	r24, 0x03D5
    1676:	90 91 d6 03 	lds	r25, 0x03D6
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	60 91 42 01 	lds	r22, 0x0142
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    1686:	fc 01       	movw	r30, r24
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	ee 5f       	subi	r30, 0xFE	; 254
    1692:	fe 4f       	sbci	r31, 0xFE	; 254
    1694:	40 81       	ld	r20, Z
    1696:	31 81       	ldd	r19, Z+1	; 0x01
    1698:	22 81       	ldd	r18, Z+2	; 0x02
    169a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    169c:	f8 a1       	ldd	r31, Y+32	; 0x20
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	32 96       	adiw	r30, 0x02	; 2
    16a8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    16aa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    16ac:	e6 0f       	add	r30, r22
    16ae:	f7 1f       	adc	r31, r23
    16b0:	89 a1       	ldd	r24, Y+33	; 0x21
    16b2:	9a a1       	ldd	r25, Y+34	; 0x22
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	02 96       	adiw	r24, 0x02	; 2
    16be:	86 0f       	add	r24, r22
    16c0:	97 1f       	adc	r25, r23
    16c2:	df 01       	movw	r26, r30
    16c4:	11 97       	sbiw	r26, 0x01	; 1
    16c6:	4c 93       	st	X, r20
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
    16c8:	30 83       	st	Z, r19
    16ca:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
    16cc:	2c 93       	st	X, r18
    16ce:	34 96       	adiw	r30, 0x04	; 4
			leds[i].rgb.g = ((colors[color_id]>>8)&0xFF);
			leds[i].rgb.b = ((colors[color_id]>>16)&0xFF);
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    16d0:	e8 17       	cp	r30, r24
    16d2:	f9 07       	cpc	r31, r25
    16d4:	b1 f7       	brne	.-20     	; 0x16c2 <seqParticles+0x380>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
	}
	
	pos += speed;
    16d6:	20 91 d1 03 	lds	r18, 0x03D1
    16da:	30 91 d2 03 	lds	r19, 0x03D2
    16de:	40 91 d3 03 	lds	r20, 0x03D3
    16e2:	50 91 d4 03 	lds	r21, 0x03D4
    16e6:	6b a1       	ldd	r22, Y+35	; 0x23
    16e8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ea:	8d a1       	ldd	r24, Y+37	; 0x25
    16ec:	9e a1       	ldd	r25, Y+38	; 0x26
    16ee:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    16f2:	6b 01       	movw	r12, r22
    16f4:	7c 01       	movw	r14, r24
    16f6:	60 93 d1 03 	sts	0x03D1, r22
    16fa:	70 93 d2 03 	sts	0x03D2, r23
    16fe:	80 93 d3 03 	sts	0x03D3, r24
    1702:	90 93 d4 03 	sts	0x03D4, r25
	if(pos >= length) {
    1706:	af 8d       	ldd	r26, Y+31	; 0x1f
    1708:	b8 a1       	ldd	r27, Y+32	; 0x20
    170a:	bd 01       	movw	r22, r26
    170c:	bb 0f       	add	r27, r27
    170e:	88 0b       	sbc	r24, r24
    1710:	99 0b       	sbc	r25, r25
    1712:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    1716:	9b 01       	movw	r18, r22
    1718:	ac 01       	movw	r20, r24
    171a:	c7 01       	movw	r24, r14
    171c:	b6 01       	movw	r22, r12
    171e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__gesf2>
    1722:	88 23       	and	r24, r24
    1724:	ac f1       	brlt	.+106    	; 0x1790 <seqParticles+0x44e>
		if(!decremented) {
    1726:	80 91 d0 03 	lds	r24, 0x03D0
    172a:	81 11       	cpse	r24, r1
    172c:	0a c0       	rjmp	.+20     	; 0x1742 <seqParticles+0x400>
			length--;
    172e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1730:	98 a1       	ldd	r25, Y+32	; 0x20
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	90 93 d8 03 	sts	0x03D8, r25
    1738:	80 93 d7 03 	sts	0x03D7, r24
			decremented = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 d0 03 	sts	0x03D0, r24
		}
		if(pos >= length+size) {
    1742:	60 91 d7 03 	lds	r22, 0x03D7
    1746:	70 91 d8 03 	lds	r23, 0x03D8
    174a:	07 2e       	mov	r0, r23
    174c:	00 0c       	add	r0, r0
    174e:	88 0b       	sbc	r24, r24
    1750:	99 0b       	sbc	r25, r25
    1752:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    1756:	29 89       	ldd	r18, Y+17	; 0x11
    1758:	3a 89       	ldd	r19, Y+18	; 0x12
    175a:	4b 89       	ldd	r20, Y+19	; 0x13
    175c:	5c 89       	ldd	r21, Y+20	; 0x14
    175e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1762:	9b 01       	movw	r18, r22
    1764:	ac 01       	movw	r20, r24
    1766:	c7 01       	movw	r24, r14
    1768:	b6 01       	movw	r22, r12
    176a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__gesf2>
    176e:	88 23       	and	r24, r24
    1770:	7c f0       	brlt	.+30     	; 0x1790 <seqParticles+0x44e>
			pos = -size;
    1772:	89 89       	ldd	r24, Y+17	; 0x11
    1774:	9a 89       	ldd	r25, Y+18	; 0x12
    1776:	ab 89       	ldd	r26, Y+19	; 0x13
    1778:	bc 89       	ldd	r27, Y+20	; 0x14
    177a:	b0 58       	subi	r27, 0x80	; 128
    177c:	80 93 d1 03 	sts	0x03D1, r24
    1780:	90 93 d2 03 	sts	0x03D2, r25
    1784:	a0 93 d3 03 	sts	0x03D3, r26
    1788:	b0 93 d4 03 	sts	0x03D4, r27
			decremented = 0;
    178c:	10 92 d0 03 	sts	0x03D0, r1
		}
	}
}
    1790:	a6 96       	adiw	r28, 0x26	; 38
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	9f 90       	pop	r9
    17b2:	8f 90       	pop	r8
    17b4:	7f 90       	pop	r7
    17b6:	6f 90       	pop	r6
    17b8:	5f 90       	pop	r5
    17ba:	4f 90       	pop	r4
    17bc:	3f 90       	pop	r3
    17be:	2f 90       	pop	r2
    17c0:	08 95       	ret

000017c2 <seqParticlesDark>:

static void seqParticlesDark(color_t *leds, int num_leds)
{
    17c2:	2f 92       	push	r2
    17c4:	3f 92       	push	r3
    17c6:	4f 92       	push	r4
    17c8:	5f 92       	push	r5
    17ca:	6f 92       	push	r6
    17cc:	7f 92       	push	r7
    17ce:	8f 92       	push	r8
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	66 97       	sbiw	r28, 0x16	; 22
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	9e 87       	std	Y+14, r25	; 0x0e
    17f8:	8d 87       	std	Y+13, r24	; 0x0d
    17fa:	78 8b       	std	Y+16, r23	; 0x10
    17fc:	6f 87       	std	Y+15, r22	; 0x0f
	static float pos = 0;
	static int length = 0;
	static int color_id = 0;
	static uint8_t decremented = 0;
	
	float speed = seqSpeed / 50.0f;
    17fe:	60 91 45 01 	lds	r22, 0x0145
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	48 e4       	ldi	r20, 0x48	; 72
    1812:	52 e4       	ldi	r21, 0x42	; 66
    1814:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
    1818:	69 8b       	std	Y+17, r22	; 0x11
    181a:	7a 8b       	std	Y+18, r23	; 0x12
    181c:	8b 8b       	std	Y+19, r24	; 0x13
    181e:	9c 8b       	std	Y+20, r25	; 0x14
	float size = seqSize;
    1820:	60 91 43 01 	lds	r22, 0x0143
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    182e:	69 83       	std	Y+1, r22	; 0x01
    1830:	7a 83       	std	Y+2, r23	; 0x02
    1832:	8b 83       	std	Y+3, r24	; 0x03
    1834:	9c 83       	std	Y+4, r25	; 0x04
	
	if(length <= 0) {
    1836:	80 91 e0 03 	lds	r24, 0x03E0
    183a:	90 91 e1 03 	lds	r25, 0x03E1
    183e:	18 16       	cp	r1, r24
    1840:	19 06       	cpc	r1, r25
    1842:	cc f0       	brlt	.+50     	; 0x1876 <seqParticlesDark+0xb4>
		length = num_leds;
    1844:	2f 85       	ldd	r18, Y+15	; 0x0f
    1846:	38 89       	ldd	r19, Y+16	; 0x10
    1848:	30 93 e1 03 	sts	0x03E1, r19
    184c:	20 93 e0 03 	sts	0x03E0, r18
		color_id = (color_id+1) % numColors;
    1850:	80 91 de 03 	lds	r24, 0x03DE
    1854:	90 91 df 03 	lds	r25, 0x03DF
    1858:	01 96       	adiw	r24, 0x01	; 1
    185a:	60 91 42 01 	lds	r22, 0x0142
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    1864:	90 93 df 03 	sts	0x03DF, r25
    1868:	80 93 de 03 	sts	0x03DE, r24
	}
	
	for(int i = 0; i < length; i++) {
    186c:	39 01       	movw	r6, r18
    186e:	12 16       	cp	r1, r18
    1870:	13 06       	cpc	r1, r19
    1872:	0c f0       	brlt	.+2      	; 0x1876 <seqParticlesDark+0xb4>
    1874:	c3 c0       	rjmp	.+390    	; 0x19fc <seqParticlesDark+0x23a>
		float dist = pos-i;
    1876:	60 91 da 03 	lds	r22, 0x03DA
    187a:	70 91 db 03 	lds	r23, 0x03DB
    187e:	80 91 dc 03 	lds	r24, 0x03DC
    1882:	90 91 dd 03 	lds	r25, 0x03DD
    1886:	6d 83       	std	Y+5, r22	; 0x05
    1888:	7e 83       	std	Y+6, r23	; 0x06
    188a:	8f 83       	std	Y+7, r24	; 0x07
    188c:	98 87       	std	Y+8, r25	; 0x08
		dist = dist < 0 ? -dist : dist;
		if(dist < size) {
			float k = dist / size;
			leds[i].rgb.r = (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    188e:	80 91 de 03 	lds	r24, 0x03DE
    1892:	90 91 df 03 	lds	r25, 0x03DF
    1896:	dc 01       	movw	r26, r24
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	ba 87       	std	Y+10, r27	; 0x0a
    189c:	a9 87       	std	Y+9, r26	; 0x09
    189e:	80 91 42 01 	lds	r24, 0x0142
    18a2:	e8 2f       	mov	r30, r24
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	fc 87       	std	Y+12, r31	; 0x0c
    18a8:	eb 87       	std	Y+11, r30	; 0x0b
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    18aa:	60 90 e0 03 	lds	r6, 0x03E0
    18ae:	70 90 e1 03 	lds	r7, 0x03E1
    18b2:	0d 85       	ldd	r16, Y+13	; 0x0d
    18b4:	1e 85       	ldd	r17, Y+14	; 0x0e
    18b6:	0f 5f       	subi	r16, 0xFF	; 255
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	4d 84       	ldd	r4, Y+13	; 0x0d
    18bc:	5e 84       	ldd	r5, Y+14	; 0x0e
    18be:	12 01       	movw	r2, r4
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	2f 0e       	add	r2, r31
    18c4:	31 1c       	adc	r3, r1
    18c6:	e1 2c       	mov	r14, r1
    18c8:	f1 2c       	mov	r15, r1
    18ca:	fe 8a       	std	Y+22, r15	; 0x16
    18cc:	ed 8a       	std	Y+21, r14	; 0x15
		float dist = pos-i;
    18ce:	2d 89       	ldd	r18, Y+21	; 0x15
    18d0:	3e 89       	ldd	r19, Y+22	; 0x16
    18d2:	b9 01       	movw	r22, r18
    18d4:	33 0f       	add	r19, r19
    18d6:	88 0b       	sbc	r24, r24
    18d8:	99 0b       	sbc	r25, r25
    18da:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	6d 81       	ldd	r22, Y+5	; 0x05
    18e4:	7e 81       	ldd	r23, Y+6	; 0x06
    18e6:	8f 81       	ldd	r24, Y+7	; 0x07
    18e8:	98 85       	ldd	r25, Y+8	; 0x08
    18ea:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    18ee:	6b 01       	movw	r12, r22
    18f0:	7c 01       	movw	r14, r24
		dist = dist < 0 ? -dist : dist;
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	0e 94 12 10 	call	0x2024	; 0x2024 <__cmpsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	24 f4       	brge	.+8      	; 0x1908 <seqParticlesDark+0x146>
    1900:	f7 fa       	bst	r15, 7
    1902:	f0 94       	com	r15
    1904:	f7 f8       	bld	r15, 7
    1906:	f0 94       	com	r15
		if(dist < size) {
    1908:	29 81       	ldd	r18, Y+1	; 0x01
    190a:	3a 81       	ldd	r19, Y+2	; 0x02
    190c:	4b 81       	ldd	r20, Y+3	; 0x03
    190e:	5c 81       	ldd	r21, Y+4	; 0x04
    1910:	c7 01       	movw	r24, r14
    1912:	b6 01       	movw	r22, r12
    1914:	0e 94 12 10 	call	0x2024	; 0x2024 <__cmpsf2>
    1918:	88 23       	and	r24, r24
    191a:	0c f0       	brlt	.+2      	; 0x191e <seqParticlesDark+0x15c>
    191c:	55 c0       	rjmp	.+170    	; 0x19c8 <seqParticlesDark+0x206>
			float k = dist / size;
    191e:	29 81       	ldd	r18, Y+1	; 0x01
    1920:	3a 81       	ldd	r19, Y+2	; 0x02
    1922:	4b 81       	ldd	r20, Y+3	; 0x03
    1924:	5c 81       	ldd	r21, Y+4	; 0x04
    1926:	c7 01       	movw	r24, r14
    1928:	b6 01       	movw	r22, r12
    192a:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
    192e:	9b 01       	movw	r18, r22
    1930:	ac 01       	movw	r20, r24
			leds[i].rgb.r = (1.0f-k)*((colors[(color_id+1)%numColors]>>0)&0xFF);
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	80 e8       	ldi	r24, 0x80	; 128
    1938:	9f e3       	ldi	r25, 0x3F	; 63
    193a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    193e:	6b 01       	movw	r12, r22
    1940:	7c 01       	movw	r14, r24
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	6b 85       	ldd	r22, Y+11	; 0x0b
    1948:	7c 85       	ldd	r23, Y+12	; 0x0c
    194a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    194e:	fc 01       	movw	r30, r24
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	ee 5f       	subi	r30, 0xFE	; 254
    195a:	fe 4f       	sbci	r31, 0xFE	; 254
    195c:	80 80       	ld	r8, Z
    195e:	91 80       	ldd	r9, Z+1	; 0x01
    1960:	a2 80       	ldd	r10, Z+2	; 0x02
    1962:	b3 80       	ldd	r11, Z+3	; 0x03
    1964:	c5 01       	movw	r24, r10
    1966:	b4 01       	movw	r22, r8
    1968:	77 27       	eor	r23, r23
    196a:	88 27       	eor	r24, r24
    196c:	99 27       	eor	r25, r25
    196e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	c7 01       	movw	r24, r14
    1978:	b6 01       	movw	r22, r12
    197a:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    197e:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    1982:	d8 01       	movw	r26, r16
    1984:	6c 93       	st	X, r22
			leds[i].rgb.g = (1.0f-k)*((colors[(color_id+1)%numColors]>>8)&0xFF);
    1986:	69 2d       	mov	r22, r9
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1992:	9b 01       	movw	r18, r22
    1994:	ac 01       	movw	r20, r24
    1996:	c7 01       	movw	r24, r14
    1998:	b6 01       	movw	r22, r12
    199a:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    199e:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    19a2:	f1 01       	movw	r30, r2
    19a4:	60 83       	st	Z, r22
			leds[i].rgb.b = (1.0f-k)*((colors[(color_id+1)%numColors]>>16)&0xFF);
    19a6:	6a 2d       	mov	r22, r10
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	c7 01       	movw	r24, r14
    19b8:	b6 01       	movw	r22, r12
    19ba:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    19be:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    19c2:	d2 01       	movw	r26, r4
    19c4:	6c 93       	st	X, r22
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <seqParticlesDark+0x212>
		}
		else {
			leds[i].rgb.r = 0;
    19c8:	f8 01       	movw	r30, r16
    19ca:	10 82       	st	Z, r1
			leds[i].rgb.g = 0;
    19cc:	d1 01       	movw	r26, r2
    19ce:	1c 92       	st	X, r1
			leds[i].rgb.b = 0;
    19d0:	f2 01       	movw	r30, r4
    19d2:	10 82       	st	Z, r1
	if(length <= 0) {
		length = num_leds;
		color_id = (color_id+1) % numColors;
	}
	
	for(int i = 0; i < length; i++) {
    19d4:	2d 89       	ldd	r18, Y+21	; 0x15
    19d6:	3e 89       	ldd	r19, Y+22	; 0x16
    19d8:	2f 5f       	subi	r18, 0xFF	; 255
    19da:	3f 4f       	sbci	r19, 0xFF	; 255
    19dc:	3e 8b       	std	Y+22, r19	; 0x16
    19de:	2d 8b       	std	Y+21, r18	; 0x15
    19e0:	0c 5f       	subi	r16, 0xFC	; 252
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	34 e0       	ldi	r19, 0x04	; 4
    19e6:	43 0e       	add	r4, r19
    19e8:	51 1c       	adc	r5, r1
    19ea:	64 e0       	ldi	r22, 0x04	; 4
    19ec:	26 0e       	add	r2, r22
    19ee:	31 1c       	adc	r3, r1
    19f0:	8d 89       	ldd	r24, Y+21	; 0x15
    19f2:	9e 89       	ldd	r25, Y+22	; 0x16
    19f4:	86 15       	cp	r24, r6
    19f6:	97 05       	cpc	r25, r7
    19f8:	0c f4       	brge	.+2      	; 0x19fc <seqParticlesDark+0x23a>
    19fa:	69 cf       	rjmp	.-302    	; 0x18ce <seqParticlesDark+0x10c>
			leds[i].rgb.g = 0;
			leds[i].rgb.b = 0;
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    19fc:	af 85       	ldd	r26, Y+15	; 0x0f
    19fe:	b8 89       	ldd	r27, Y+16	; 0x10
    1a00:	6a 16       	cp	r6, r26
    1a02:	7b 06       	cpc	r7, r27
    1a04:	8c f5       	brge	.+98     	; 0x1a68 <seqParticlesDark+0x2a6>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
    1a06:	80 91 de 03 	lds	r24, 0x03DE
    1a0a:	90 91 df 03 	lds	r25, 0x03DF
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	60 91 42 01 	lds	r22, 0x0142
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__divmodhi4>
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	ee 5f       	subi	r30, 0xFE	; 254
    1a26:	fe 4f       	sbci	r31, 0xFE	; 254
    1a28:	40 81       	ld	r20, Z
    1a2a:	31 81       	ldd	r19, Z+1	; 0x01
    1a2c:	22 81       	ldd	r18, Z+2	; 0x02
    1a2e:	f3 01       	movw	r30, r6
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	32 96       	adiw	r30, 0x02	; 2
    1a3a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a3e:	e6 0f       	add	r30, r22
    1a40:	f7 1f       	adc	r31, r23
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	98 89       	ldd	r25, Y+16	; 0x10
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	02 96       	adiw	r24, 0x02	; 2
    1a50:	86 0f       	add	r24, r22
    1a52:	97 1f       	adc	r25, r23
    1a54:	df 01       	movw	r26, r30
    1a56:	11 97       	sbiw	r26, 0x01	; 1
    1a58:	4c 93       	st	X, r20
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
    1a5a:	30 83       	st	Z, r19
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
    1a5e:	2c 93       	st	X, r18
    1a60:	34 96       	adiw	r30, 0x04	; 4
			leds[i].rgb.g = 0;
			leds[i].rgb.b = 0;
		}
	}
	
	for(int i = length; i < num_leds; i++) {
    1a62:	e8 17       	cp	r30, r24
    1a64:	f9 07       	cpc	r31, r25
    1a66:	b1 f7       	brne	.-20     	; 0x1a54 <seqParticlesDark+0x292>
		leds[i].rgb.r = ((colors[(color_id+1)%numColors]>>0)&0xFF);
		leds[i].rgb.g = ((colors[(color_id+1)%numColors]>>8)&0xFF);
		leds[i].rgb.b = ((colors[(color_id+1)%numColors]>>16)&0xFF);
	}
	
	pos += speed;
    1a68:	20 91 da 03 	lds	r18, 0x03DA
    1a6c:	30 91 db 03 	lds	r19, 0x03DB
    1a70:	40 91 dc 03 	lds	r20, 0x03DC
    1a74:	50 91 dd 03 	lds	r21, 0x03DD
    1a78:	69 89       	ldd	r22, Y+17	; 0x11
    1a7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1a84:	6b 01       	movw	r12, r22
    1a86:	7c 01       	movw	r14, r24
    1a88:	60 93 da 03 	sts	0x03DA, r22
    1a8c:	70 93 db 03 	sts	0x03DB, r23
    1a90:	80 93 dc 03 	sts	0x03DC, r24
    1a94:	90 93 dd 03 	sts	0x03DD, r25
	if(pos >= length) {
    1a98:	b3 01       	movw	r22, r6
    1a9a:	07 2c       	mov	r0, r7
    1a9c:	00 0c       	add	r0, r0
    1a9e:	88 0b       	sbc	r24, r24
    1aa0:	99 0b       	sbc	r25, r25
    1aa2:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	c7 01       	movw	r24, r14
    1aac:	b6 01       	movw	r22, r12
    1aae:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__gesf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	a4 f1       	brlt	.+104    	; 0x1b1e <seqParticlesDark+0x35c>
		if(!decremented) {
    1ab6:	80 91 d9 03 	lds	r24, 0x03D9
    1aba:	81 11       	cpse	r24, r1
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <seqParticlesDark+0x30e>
			length--;
    1abe:	c3 01       	movw	r24, r6
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	90 93 e1 03 	sts	0x03E1, r25
    1ac6:	80 93 e0 03 	sts	0x03E0, r24
			decremented = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 d9 03 	sts	0x03D9, r24
		}
		if(pos >= length+size) {
    1ad0:	60 91 e0 03 	lds	r22, 0x03E0
    1ad4:	70 91 e1 03 	lds	r23, 0x03E1
    1ad8:	07 2e       	mov	r0, r23
    1ada:	00 0c       	add	r0, r0
    1adc:	88 0b       	sbc	r24, r24
    1ade:	99 0b       	sbc	r25, r25
    1ae0:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    1ae4:	29 81       	ldd	r18, Y+1	; 0x01
    1ae6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ae8:	4b 81       	ldd	r20, Y+3	; 0x03
    1aea:	5c 81       	ldd	r21, Y+4	; 0x04
    1aec:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1af0:	9b 01       	movw	r18, r22
    1af2:	ac 01       	movw	r20, r24
    1af4:	c7 01       	movw	r24, r14
    1af6:	b6 01       	movw	r22, r12
    1af8:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__gesf2>
    1afc:	88 23       	and	r24, r24
    1afe:	7c f0       	brlt	.+30     	; 0x1b1e <seqParticlesDark+0x35c>
			pos = -size;
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	ab 81       	ldd	r26, Y+3	; 0x03
    1b06:	bc 81       	ldd	r27, Y+4	; 0x04
    1b08:	b0 58       	subi	r27, 0x80	; 128
    1b0a:	80 93 da 03 	sts	0x03DA, r24
    1b0e:	90 93 db 03 	sts	0x03DB, r25
    1b12:	a0 93 dc 03 	sts	0x03DC, r26
    1b16:	b0 93 dd 03 	sts	0x03DD, r27
			decremented = 0;
    1b1a:	10 92 d9 03 	sts	0x03D9, r1
		}
	}
    1b1e:	66 96       	adiw	r28, 0x16	; 22
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	cf 90       	pop	r12
    1b3a:	bf 90       	pop	r11
    1b3c:	af 90       	pop	r10
    1b3e:	9f 90       	pop	r9
    1b40:	8f 90       	pop	r8
    1b42:	7f 90       	pop	r7
    1b44:	6f 90       	pop	r6
    1b46:	5f 90       	pop	r5
    1b48:	4f 90       	pop	r4
    1b4a:	3f 90       	pop	r3
    1b4c:	2f 90       	pop	r2
    1b4e:	08 95       	ret

00001b50 <seqRunning2>:
	for(int i = 0; i < num_leds; i++)
	leds[i].val = colors[0];
}

static void seqRunning2(color_t *leds, int num_leds)
{
    1b50:	2f 92       	push	r2
    1b52:	3f 92       	push	r3
    1b54:	4f 92       	push	r4
    1b56:	5f 92       	push	r5
    1b58:	6f 92       	push	r6
    1b5a:	7f 92       	push	r7
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	a8 97       	sbiw	r28, 0x28	; 40
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	8c 01       	movw	r16, r24
    1b86:	3b 01       	movw	r6, r22
	static float pos = 0;
	
	float speed = seqSpeed / 500.0f;
    1b88:	60 91 45 01 	lds	r22, 0x0145
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a ef       	ldi	r20, 0xFA	; 250
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
    1ba2:	6d a3       	std	Y+37, r22	; 0x25
    1ba4:	7e a3       	std	Y+38, r23	; 0x26
    1ba6:	8f a3       	std	Y+39, r24	; 0x27
    1ba8:	98 a7       	std	Y+40, r25	; 0x28
	float size = seqSize;
    1baa:	60 91 43 01 	lds	r22, 0x0143
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
	
	for(int i = 0; i < num_leds; i++)
    1bb8:	16 14       	cp	r1, r6
    1bba:	17 04       	cpc	r1, r7
    1bbc:	0c f0       	brlt	.+2      	; 0x1bc0 <seqRunning2+0x70>
    1bbe:	05 c1       	rjmp	.+522    	; 0x1dca <seqRunning2+0x27a>
	{
		float a = i*(1.0f/size)+pos;
    1bc0:	9b 01       	movw	r18, r22
    1bc2:	ac 01       	movw	r20, r24
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	80 e8       	ldi	r24, 0x80	; 128
    1bca:	9f e3       	ldi	r25, 0x3F	; 63
    1bcc:	0e 94 17 10 	call	0x202e	; 0x202e <__divsf3>
    1bd0:	6d 83       	std	Y+5, r22	; 0x05
    1bd2:	7e 83       	std	Y+6, r23	; 0x06
    1bd4:	8f 83       	std	Y+7, r24	; 0x07
    1bd6:	98 87       	std	Y+8, r25	; 0x08
    1bd8:	80 91 cc 03 	lds	r24, 0x03CC
    1bdc:	90 91 cd 03 	lds	r25, 0x03CD
    1be0:	a0 91 ce 03 	lds	r26, 0x03CE
    1be4:	b0 91 cf 03 	lds	r27, 0x03CF
    1be8:	89 87       	std	Y+9, r24	; 0x09
    1bea:	9a 87       	std	Y+10, r25	; 0x0a
    1bec:	ab 87       	std	Y+11, r26	; 0x0b
    1bee:	bc 87       	std	Y+12, r27	; 0x0c
		float k = (sin(a)+1.0f) * 0.5f;
		
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
    1bf0:	0f 2e       	mov	r0, r31
    1bf2:	f2 e0       	ldi	r31, 0x02	; 2
    1bf4:	af 2e       	mov	r10, r31
    1bf6:	f1 e0       	ldi	r31, 0x01	; 1
    1bf8:	bf 2e       	mov	r11, r31
    1bfa:	f0 2d       	mov	r31, r0
    1bfc:	d5 01       	movw	r26, r10
    1bfe:	cd 90       	ld	r12, X+
    1c00:	dd 90       	ld	r13, X+
    1c02:	ed 90       	ld	r14, X+
    1c04:	fc 90       	ld	r15, X
    1c06:	c7 01       	movw	r24, r14
    1c08:	b6 01       	movw	r22, r12
    1c0a:	77 27       	eor	r23, r23
    1c0c:	88 27       	eor	r24, r24
    1c0e:	99 27       	eor	r25, r25
    1c10:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1c14:	6d 87       	std	Y+13, r22	; 0x0d
    1c16:	7e 87       	std	Y+14, r23	; 0x0e
    1c18:	8f 87       	std	Y+15, r24	; 0x0f
    1c1a:	98 8b       	std	Y+16, r25	; 0x10
    1c1c:	f5 01       	movw	r30, r10
    1c1e:	84 80       	ldd	r8, Z+4	; 0x04
    1c20:	95 80       	ldd	r9, Z+5	; 0x05
    1c22:	a6 80       	ldd	r10, Z+6	; 0x06
    1c24:	b7 80       	ldd	r11, Z+7	; 0x07
    1c26:	c5 01       	movw	r24, r10
    1c28:	b4 01       	movw	r22, r8
    1c2a:	77 27       	eor	r23, r23
    1c2c:	88 27       	eor	r24, r24
    1c2e:	99 27       	eor	r25, r25
    1c30:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1c34:	69 8b       	std	Y+17, r22	; 0x11
    1c36:	7a 8b       	std	Y+18, r23	; 0x12
    1c38:	8b 8b       	std	Y+19, r24	; 0x13
    1c3a:	9c 8b       	std	Y+20, r25	; 0x14
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
    1c3c:	6d 2d       	mov	r22, r13
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1c48:	6d 8b       	std	Y+21, r22	; 0x15
    1c4a:	7e 8b       	std	Y+22, r23	; 0x16
    1c4c:	8f 8b       	std	Y+23, r24	; 0x17
    1c4e:	98 8f       	std	Y+24, r25	; 0x18
    1c50:	69 2d       	mov	r22, r9
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1c5c:	69 8f       	std	Y+25, r22	; 0x19
    1c5e:	7a 8f       	std	Y+26, r23	; 0x1a
    1c60:	8b 8f       	std	Y+27, r24	; 0x1b
    1c62:	9c 8f       	std	Y+28, r25	; 0x1c
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
    1c64:	6e 2d       	mov	r22, r14
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1c70:	6d 8f       	std	Y+29, r22	; 0x1d
    1c72:	7e 8f       	std	Y+30, r23	; 0x1e
    1c74:	8f 8f       	std	Y+31, r24	; 0x1f
    1c76:	98 a3       	std	Y+32, r25	; 0x20
    1c78:	6a 2d       	mov	r22, r10
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 b8 10 	call	0x2170	; 0x2170 <__floatunsisf>
    1c84:	69 a3       	std	Y+33, r22	; 0x21
    1c86:	7a a3       	std	Y+34, r23	; 0x22
    1c88:	8b a3       	std	Y+35, r24	; 0x23
    1c8a:	9c a3       	std	Y+36, r25	; 0x24
    1c8c:	0e 5f       	subi	r16, 0xFE	; 254
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	21 2c       	mov	r2, r1
    1c92:	31 2c       	mov	r3, r1
    1c94:	53 01       	movw	r10, r6
	float speed = seqSpeed / 500.0f;
	float size = seqSize;
	
	for(int i = 0; i < num_leds; i++)
	{
		float a = i*(1.0f/size)+pos;
    1c96:	b1 01       	movw	r22, r2
    1c98:	03 2c       	mov	r0, r3
    1c9a:	00 0c       	add	r0, r0
    1c9c:	88 0b       	sbc	r24, r24
    1c9e:	99 0b       	sbc	r25, r25
    1ca0:	0e 94 ba 10 	call	0x2174	; 0x2174 <__floatsisf>
    1ca4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca8:	4f 81       	ldd	r20, Y+7	; 0x07
    1caa:	58 85       	ldd	r21, Y+8	; 0x08
    1cac:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1cb0:	29 85       	ldd	r18, Y+9	; 0x09
    1cb2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cb4:	4b 85       	ldd	r20, Y+11	; 0x0b
    1cb6:	5c 85       	ldd	r21, Y+12	; 0x0c
    1cb8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
		float k = (sin(a)+1.0f) * 0.5f;
    1cbc:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <sin>
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1cd8:	6b 01       	movw	r12, r22
    1cda:	7c 01       	movw	r14, r24
		
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
    1cdc:	9b 01       	movw	r18, r22
    1cde:	ac 01       	movw	r20, r24
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	80 e8       	ldi	r24, 0x80	; 128
    1ce6:	9f e3       	ldi	r25, 0x3F	; 63
    1ce8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    1cec:	69 83       	std	Y+1, r22	; 0x01
    1cee:	7a 83       	std	Y+2, r23	; 0x02
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	48 01       	movw	r8, r16
    1cf6:	f1 e0       	ldi	r31, 0x01	; 1
    1cf8:	8f 1a       	sub	r8, r31
    1cfa:	91 08       	sbc	r9, r1
    1cfc:	a7 01       	movw	r20, r14
    1cfe:	96 01       	movw	r18, r12
    1d00:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d02:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d06:	98 89       	ldd	r25, Y+16	; 0x10
    1d08:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1d0c:	2b 01       	movw	r4, r22
    1d0e:	3c 01       	movw	r6, r24
    1d10:	29 89       	ldd	r18, Y+17	; 0x11
    1d12:	3a 89       	ldd	r19, Y+18	; 0x12
    1d14:	4b 89       	ldd	r20, Y+19	; 0x13
    1d16:	5c 89       	ldd	r21, Y+20	; 0x14
    1d18:	69 81       	ldd	r22, Y+1	; 0x01
    1d1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1d24:	9b 01       	movw	r18, r22
    1d26:	ac 01       	movw	r20, r24
    1d28:	c3 01       	movw	r24, r6
    1d2a:	b2 01       	movw	r22, r4
    1d2c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1d30:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    1d34:	d4 01       	movw	r26, r8
    1d36:	6c 93       	st	X, r22
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
    1d38:	a7 01       	movw	r20, r14
    1d3a:	96 01       	movw	r18, r12
    1d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d40:	8f 89       	ldd	r24, Y+23	; 0x17
    1d42:	98 8d       	ldd	r25, Y+24	; 0x18
    1d44:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1d48:	2b 01       	movw	r4, r22
    1d4a:	3c 01       	movw	r6, r24
    1d4c:	29 8d       	ldd	r18, Y+25	; 0x19
    1d4e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1d50:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1d52:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1d54:	69 81       	ldd	r22, Y+1	; 0x01
    1d56:	7a 81       	ldd	r23, Y+2	; 0x02
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1d60:	9b 01       	movw	r18, r22
    1d62:	ac 01       	movw	r20, r24
    1d64:	c3 01       	movw	r24, r6
    1d66:	b2 01       	movw	r22, r4
    1d68:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1d6c:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    1d70:	f8 01       	movw	r30, r16
    1d72:	60 83       	st	Z, r22
    1d74:	48 01       	movw	r8, r16
    1d76:	f2 e0       	ldi	r31, 0x02	; 2
    1d78:	8f 1a       	sub	r8, r31
    1d7a:	91 08       	sbc	r9, r1
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
    1d7c:	a7 01       	movw	r20, r14
    1d7e:	96 01       	movw	r18, r12
    1d80:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d82:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d86:	98 a1       	ldd	r25, Y+32	; 0x20
    1d88:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1d8c:	6b 01       	movw	r12, r22
    1d8e:	7c 01       	movw	r14, r24
    1d90:	29 a1       	ldd	r18, Y+33	; 0x21
    1d92:	3a a1       	ldd	r19, Y+34	; 0x22
    1d94:	4b a1       	ldd	r20, Y+35	; 0x23
    1d96:	5c a1       	ldd	r21, Y+36	; 0x24
    1d98:	69 81       	ldd	r22, Y+1	; 0x01
    1d9a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    1da4:	9b 01       	movw	r18, r22
    1da6:	ac 01       	movw	r20, r24
    1da8:	c7 01       	movw	r24, r14
    1daa:	b6 01       	movw	r22, r12
    1dac:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1db0:	0e 94 89 10 	call	0x2112	; 0x2112 <__fixunssfsi>
    1db4:	d4 01       	movw	r26, r8
    1db6:	6c 93       	st	X, r22
	static float pos = 0;
	
	float speed = seqSpeed / 500.0f;
	float size = seqSize;
	
	for(int i = 0; i < num_leds; i++)
    1db8:	bf ef       	ldi	r27, 0xFF	; 255
    1dba:	2b 1a       	sub	r2, r27
    1dbc:	3b 0a       	sbc	r3, r27
    1dbe:	0c 5f       	subi	r16, 0xFC	; 252
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	2a 14       	cp	r2, r10
    1dc4:	3b 04       	cpc	r3, r11
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <seqRunning2+0x27a>
    1dc8:	66 cf       	rjmp	.-308    	; 0x1c96 <seqRunning2+0x146>
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
	}
	
	pos += speed;
    1dca:	20 91 cc 03 	lds	r18, 0x03CC
    1dce:	30 91 cd 03 	lds	r19, 0x03CD
    1dd2:	40 91 ce 03 	lds	r20, 0x03CE
    1dd6:	50 91 cf 03 	lds	r21, 0x03CF
    1dda:	6d a1       	ldd	r22, Y+37	; 0x25
    1ddc:	7e a1       	ldd	r23, Y+38	; 0x26
    1dde:	8f a1       	ldd	r24, Y+39	; 0x27
    1de0:	98 a5       	ldd	r25, Y+40	; 0x28
    1de2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__addsf3>
    1de6:	6b 01       	movw	r12, r22
    1de8:	7c 01       	movw	r14, r24
	if(pos > 2*M_PI)
    1dea:	2b ed       	ldi	r18, 0xDB	; 219
    1dec:	3f e0       	ldi	r19, 0x0F	; 15
    1dee:	49 ec       	ldi	r20, 0xC9	; 201
    1df0:	50 e4       	ldi	r21, 0x40	; 64
    1df2:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__gesf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f0       	brlt	.+18     	; 0x1e0c <seqRunning2+0x2bc>
		leds[i].rgb.r = k*((colors[0]>>0)&0xFF) +  (1.0f-k)*((colors[1]>>0)&0xFF);
		leds[i].rgb.g = k*((colors[0]>>8)&0xFF) +  (1.0f-k)*((colors[1]>>8)&0xFF);
		leds[i].rgb.b = k*((colors[0]>>16)&0xFF) +  (1.0f-k)*((colors[1]>>16)&0xFF);
	}
	
	pos += speed;
    1dfa:	c0 92 cc 03 	sts	0x03CC, r12
    1dfe:	d0 92 cd 03 	sts	0x03CD, r13
    1e02:	e0 92 ce 03 	sts	0x03CE, r14
    1e06:	f0 92 cf 03 	sts	0x03CF, r15
    1e0a:	10 c0       	rjmp	.+32     	; 0x1e2c <seqRunning2+0x2dc>
	if(pos > 2*M_PI)
	pos -= 2*M_PI;
    1e0c:	2b ed       	ldi	r18, 0xDB	; 219
    1e0e:	3f e0       	ldi	r19, 0x0F	; 15
    1e10:	49 ec       	ldi	r20, 0xC9	; 201
    1e12:	50 e4       	ldi	r21, 0x40	; 64
    1e14:	c7 01       	movw	r24, r14
    1e16:	b6 01       	movw	r22, r12
    1e18:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__subsf3>
    1e1c:	60 93 cc 03 	sts	0x03CC, r22
    1e20:	70 93 cd 03 	sts	0x03CD, r23
    1e24:	80 93 ce 03 	sts	0x03CE, r24
    1e28:	90 93 cf 03 	sts	0x03CF, r25
}
    1e2c:	a8 96       	adiw	r28, 0x28	; 40
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	cf 90       	pop	r12
    1e48:	bf 90       	pop	r11
    1e4a:	af 90       	pop	r10
    1e4c:	9f 90       	pop	r9
    1e4e:	8f 90       	pop	r8
    1e50:	7f 90       	pop	r7
    1e52:	6f 90       	pop	r6
    1e54:	5f 90       	pop	r5
    1e56:	4f 90       	pop	r4
    1e58:	3f 90       	pop	r3
    1e5a:	2f 90       	pop	r2
    1e5c:	08 95       	ret

00001e5e <seqSetFunction>:

// ----------------------------------------------------------------------- Definitions

void seqSetFunction(seqType_t type)
{
	seqType = type;
    1e5e:	80 93 01 01 	sts	0x0101, r24
    1e62:	08 95       	ret

00001e64 <seqSetSpeed>:
}

void seqSetSpeed(uint8_t speed)
{
	if(speed > SEQ_MAX_SPEED) seqSpeed = SEQ_MAX_SPEED;
    1e64:	85 36       	cpi	r24, 0x65	; 101
    1e66:	20 f0       	brcs	.+8      	; 0x1e70 <seqSetSpeed+0xc>
    1e68:	84 e6       	ldi	r24, 0x64	; 100
    1e6a:	80 93 45 01 	sts	0x0145, r24
    1e6e:	08 95       	ret
	else if(speed < SEQ_MIN_SPEED) seqSpeed = SEQ_MIN_SPEED;
	else seqSpeed = speed;
    1e70:	80 93 45 01 	sts	0x0145, r24
    1e74:	08 95       	ret

00001e76 <seqSetSoftness>:
}

void seqSetSoftness(uint8_t softness)
{
	if(softness > SEQ_MAX_SOFTNESS) seqSoftness = SEQ_MAX_SOFTNESS;
    1e76:	85 36       	cpi	r24, 0x65	; 101
    1e78:	20 f0       	brcs	.+8      	; 0x1e82 <seqSetSoftness+0xc>
    1e7a:	84 e6       	ldi	r24, 0x64	; 100
    1e7c:	80 93 44 01 	sts	0x0144, r24
    1e80:	08 95       	ret
	else if(softness < SEQ_MIN_SOFTNESS) seqSoftness = SEQ_MIN_SOFTNESS;
	else seqSoftness = softness;
    1e82:	80 93 44 01 	sts	0x0144, r24
    1e86:	08 95       	ret

00001e88 <seqSetSize>:

void seqSetSize(uint8_t size)
{
	if(size > SEQ_MAX_SIZE) seqSize = SEQ_MAX_SIZE;
	else if(size < SEQ_MIN_SIZE) seqSize = SEQ_MIN_SIZE;
	seqSize = size;
    1e88:	80 93 43 01 	sts	0x0143, r24
    1e8c:	08 95       	ret

00001e8e <seqUpdate>:
}

void seqUpdate(color_t *leds, int num_leds)
{
	functions[seqType](leds, num_leds);
    1e8e:	e0 91 01 01 	lds	r30, 0x0101
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	ea 5b       	subi	r30, 0xBA	; 186
    1e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9c:	01 90       	ld	r0, Z+
    1e9e:	f0 81       	ld	r31, Z
    1ea0:	e0 2d       	mov	r30, r0
    1ea2:	09 95       	icall
    1ea4:	08 95       	ret

00001ea6 <seqSetColorRGB>:
	colors[i] = c;
}

void seqSetColorRGB(uint8_t i, uint8_t r, uint8_t g, uint8_t b)
{
	if(i >= numColors)
    1ea6:	90 91 42 01 	lds	r25, 0x0142
    1eaa:	89 17       	cp	r24, r25
    1eac:	60 f4       	brcc	.+24     	; 0x1ec6 <seqSetColorRGB+0x20>
	
	color_t color;
	color.rgb.r = r;
	color.rgb.b = b;
	color.rgb.g = g;
	colors[i] = color.val;
    1eae:	e8 2f       	mov	r30, r24
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	ee 5f       	subi	r30, 0xFE	; 254
    1ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebe:	20 83       	st	Z, r18
    1ec0:	61 83       	std	Z+1, r22	; 0x01
    1ec2:	42 83       	std	Z+2, r20	; 0x02
    1ec4:	13 82       	std	Z+3, r1	; 0x03
    1ec6:	08 95       	ret

00001ec8 <wsInit>:

// ----------------------------------------------------------------------- Definitions

void wsInit()
{
	WS_DDR |= WS_BIT;
    1ec8:	53 9a       	sbi	0x0a, 3	; 10
    1eca:	08 95       	ret

00001ecc <wsSend>:
}

void wsSend(color_t *leds, int num_leds)
{
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	eb 01       	movw	r28, r22
	for(uint8_t j = 0; j < num_leds; j++)
    1ed6:	1c 16       	cp	r1, r28
    1ed8:	1d 06       	cpc	r1, r29
    1eda:	34 f1       	brlt	.+76     	; 0x1f28 <wsSend+0x5c>
    1edc:	31 c0       	rjmp	.+98     	; 0x1f40 <wsSend+0x74>
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1ede:	40 81       	ld	r20, Z
    1ee0:	51 81       	ldd	r21, Z+1	; 0x01
    1ee2:	62 81       	ldd	r22, Z+2	; 0x02
    1ee4:	73 81       	ldd	r23, Z+3	; 0x03
    1ee6:	02 2e       	mov	r0, r18
    1ee8:	04 c0       	rjmp	.+8      	; 0x1ef2 <wsSend+0x26>
    1eea:	76 95       	lsr	r23
    1eec:	67 95       	ror	r22
    1eee:	57 95       	ror	r21
    1ef0:	47 95       	ror	r20
    1ef2:	0a 94       	dec	r0
    1ef4:	d2 f7       	brpl	.-12     	; 0x1eea <wsSend+0x1e>
    1ef6:	40 ff       	sbrs	r20, 0
    1ef8:	07 c0       	rjmp	.+14     	; 0x1f08 <wsSend+0x3c>
				WS_PORT |= WS_BIT;
    1efa:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1efc:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1efe:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1f00:	5b 9a       	sbi	0x0b, 3	; 11
				WS_PORT |= WS_BIT;
    1f02:	5b 9a       	sbi	0x0b, 3	; 11
				//WS_PORT |= WS_BIT;
				
				//WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
				WS_PORT &= ~WS_BIT;
    1f04:	5b 98       	cbi	0x0b, 3	; 11
    1f06:	06 c0       	rjmp	.+12     	; 0x1f14 <wsSend+0x48>
				} else {
				//WS_PORT |= WS_BIT;
				//WS_PORT |= WS_BIT;
				WS_PORT |= WS_BIT;
    1f08:	5b 9a       	sbi	0x0b, 3	; 11
				
				WS_PORT &= ~WS_BIT;
    1f0a:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1f0c:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1f0e:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1f10:	5b 98       	cbi	0x0b, 3	; 11
				WS_PORT &= ~WS_BIT;
    1f12:	5b 98       	cbi	0x0b, 3	; 11
    1f14:	21 50       	subi	r18, 0x01	; 1
    1f16:	31 09       	sbc	r19, r1
    1f18:	10 f7       	brcc	.-60     	; 0x1ede <wsSend+0x12>
	WS_DDR |= WS_BIT;
}

void wsSend(color_t *leds, int num_leds)
{
	for(uint8_t j = 0; j < num_leds; j++)
    1f1a:	9f 5f       	subi	r25, 0xFF	; 255
    1f1c:	29 2f       	mov	r18, r25
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	2c 17       	cp	r18, r28
    1f22:	3d 07       	cpc	r19, r29
    1f24:	24 f0       	brlt	.+8      	; 0x1f2e <wsSend+0x62>
    1f26:	0c c0       	rjmp	.+24     	; 0x1f40 <wsSend+0x74>
    1f28:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(uint8_t i = 0; i < 24; i++)
		{
			if(leds[j].val & ((uint_fast32_t)1<<(23-i))) {
    1f2a:	17 e1       	ldi	r17, 0x17	; 23
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	fd 01       	movw	r30, r26
    1f30:	24 e0       	ldi	r18, 0x04	; 4
    1f32:	92 9f       	mul	r25, r18
    1f34:	e0 0d       	add	r30, r0
    1f36:	f1 1d       	adc	r31, r1
    1f38:	11 24       	eor	r1, r1
    1f3a:	21 2f       	mov	r18, r17
    1f3c:	38 2f       	mov	r19, r24
    1f3e:	cf cf       	rjmp	.-98     	; 0x1ede <wsSend+0x12>
				WS_PORT &= ~WS_BIT;
				//WS_PORT &= ~WS_BIT;
			}
		}
	}
	WS_PORT = 0;
    1f40:	1b b8       	out	0x0b, r1	; 11
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	08 95       	ret

00001f4a <__subsf3>:
    1f4a:	50 58       	subi	r21, 0x80	; 128

00001f4c <__addsf3>:
    1f4c:	bb 27       	eor	r27, r27
    1f4e:	aa 27       	eor	r26, r26
    1f50:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__addsf3x>
    1f54:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__fp_round>
    1f58:	0e 94 22 11 	call	0x2244	; 0x2244 <__fp_pscA>
    1f5c:	38 f0       	brcs	.+14     	; 0x1f6c <__addsf3+0x20>
    1f5e:	0e 94 29 11 	call	0x2252	; 0x2252 <__fp_pscB>
    1f62:	20 f0       	brcs	.+8      	; 0x1f6c <__addsf3+0x20>
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <__addsf3+0x28>
    1f66:	9f 3f       	cpi	r25, 0xFF	; 255
    1f68:	19 f4       	brne	.+6      	; 0x1f70 <__addsf3+0x24>
    1f6a:	26 f4       	brtc	.+8      	; 0x1f74 <__addsf3+0x28>
    1f6c:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__fp_nan>
    1f70:	0e f4       	brtc	.+2      	; 0x1f74 <__addsf3+0x28>
    1f72:	e0 95       	com	r30
    1f74:	e7 fb       	bst	r30, 7
    1f76:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__fp_inf>

00001f7a <__addsf3x>:
    1f7a:	e9 2f       	mov	r30, r25
    1f7c:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_split3>
    1f80:	58 f3       	brcs	.-42     	; 0x1f58 <__addsf3+0xc>
    1f82:	ba 17       	cp	r27, r26
    1f84:	62 07       	cpc	r22, r18
    1f86:	73 07       	cpc	r23, r19
    1f88:	84 07       	cpc	r24, r20
    1f8a:	95 07       	cpc	r25, r21
    1f8c:	20 f0       	brcs	.+8      	; 0x1f96 <__addsf3x+0x1c>
    1f8e:	79 f4       	brne	.+30     	; 0x1fae <__addsf3x+0x34>
    1f90:	a6 f5       	brtc	.+104    	; 0x1ffa <__addsf3x+0x80>
    1f92:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__fp_zero>
    1f96:	0e f4       	brtc	.+2      	; 0x1f9a <__addsf3x+0x20>
    1f98:	e0 95       	com	r30
    1f9a:	0b 2e       	mov	r0, r27
    1f9c:	ba 2f       	mov	r27, r26
    1f9e:	a0 2d       	mov	r26, r0
    1fa0:	0b 01       	movw	r0, r22
    1fa2:	b9 01       	movw	r22, r18
    1fa4:	90 01       	movw	r18, r0
    1fa6:	0c 01       	movw	r0, r24
    1fa8:	ca 01       	movw	r24, r20
    1faa:	a0 01       	movw	r20, r0
    1fac:	11 24       	eor	r1, r1
    1fae:	ff 27       	eor	r31, r31
    1fb0:	59 1b       	sub	r21, r25
    1fb2:	99 f0       	breq	.+38     	; 0x1fda <__addsf3x+0x60>
    1fb4:	59 3f       	cpi	r21, 0xF9	; 249
    1fb6:	50 f4       	brcc	.+20     	; 0x1fcc <__addsf3x+0x52>
    1fb8:	50 3e       	cpi	r21, 0xE0	; 224
    1fba:	68 f1       	brcs	.+90     	; 0x2016 <__addsf3x+0x9c>
    1fbc:	1a 16       	cp	r1, r26
    1fbe:	f0 40       	sbci	r31, 0x00	; 0
    1fc0:	a2 2f       	mov	r26, r18
    1fc2:	23 2f       	mov	r18, r19
    1fc4:	34 2f       	mov	r19, r20
    1fc6:	44 27       	eor	r20, r20
    1fc8:	58 5f       	subi	r21, 0xF8	; 248
    1fca:	f3 cf       	rjmp	.-26     	; 0x1fb2 <__addsf3x+0x38>
    1fcc:	46 95       	lsr	r20
    1fce:	37 95       	ror	r19
    1fd0:	27 95       	ror	r18
    1fd2:	a7 95       	ror	r26
    1fd4:	f0 40       	sbci	r31, 0x00	; 0
    1fd6:	53 95       	inc	r21
    1fd8:	c9 f7       	brne	.-14     	; 0x1fcc <__addsf3x+0x52>
    1fda:	7e f4       	brtc	.+30     	; 0x1ffa <__addsf3x+0x80>
    1fdc:	1f 16       	cp	r1, r31
    1fde:	ba 0b       	sbc	r27, r26
    1fe0:	62 0b       	sbc	r22, r18
    1fe2:	73 0b       	sbc	r23, r19
    1fe4:	84 0b       	sbc	r24, r20
    1fe6:	ba f0       	brmi	.+46     	; 0x2016 <__addsf3x+0x9c>
    1fe8:	91 50       	subi	r25, 0x01	; 1
    1fea:	a1 f0       	breq	.+40     	; 0x2014 <__addsf3x+0x9a>
    1fec:	ff 0f       	add	r31, r31
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	66 1f       	adc	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	c2 f7       	brpl	.-16     	; 0x1fe8 <__addsf3x+0x6e>
    1ff8:	0e c0       	rjmp	.+28     	; 0x2016 <__addsf3x+0x9c>
    1ffa:	ba 0f       	add	r27, r26
    1ffc:	62 1f       	adc	r22, r18
    1ffe:	73 1f       	adc	r23, r19
    2000:	84 1f       	adc	r24, r20
    2002:	48 f4       	brcc	.+18     	; 0x2016 <__addsf3x+0x9c>
    2004:	87 95       	ror	r24
    2006:	77 95       	ror	r23
    2008:	67 95       	ror	r22
    200a:	b7 95       	ror	r27
    200c:	f7 95       	ror	r31
    200e:	9e 3f       	cpi	r25, 0xFE	; 254
    2010:	08 f0       	brcs	.+2      	; 0x2014 <__addsf3x+0x9a>
    2012:	b0 cf       	rjmp	.-160    	; 0x1f74 <__addsf3+0x28>
    2014:	93 95       	inc	r25
    2016:	88 0f       	add	r24, r24
    2018:	08 f0       	brcs	.+2      	; 0x201c <__addsf3x+0xa2>
    201a:	99 27       	eor	r25, r25
    201c:	ee 0f       	add	r30, r30
    201e:	97 95       	ror	r25
    2020:	87 95       	ror	r24
    2022:	08 95       	ret

00002024 <__cmpsf2>:
    2024:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__fp_cmp>
    2028:	08 f4       	brcc	.+2      	; 0x202c <__cmpsf2+0x8>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	08 95       	ret

0000202e <__divsf3>:
    202e:	0e 94 2b 10 	call	0x2056	; 0x2056 <__divsf3x>
    2032:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__fp_round>
    2036:	0e 94 29 11 	call	0x2252	; 0x2252 <__fp_pscB>
    203a:	58 f0       	brcs	.+22     	; 0x2052 <__divsf3+0x24>
    203c:	0e 94 22 11 	call	0x2244	; 0x2244 <__fp_pscA>
    2040:	40 f0       	brcs	.+16     	; 0x2052 <__divsf3+0x24>
    2042:	29 f4       	brne	.+10     	; 0x204e <__divsf3+0x20>
    2044:	5f 3f       	cpi	r21, 0xFF	; 255
    2046:	29 f0       	breq	.+10     	; 0x2052 <__divsf3+0x24>
    2048:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__fp_inf>
    204c:	51 11       	cpse	r21, r1
    204e:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__fp_szero>
    2052:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__fp_nan>

00002056 <__divsf3x>:
    2056:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_split3>
    205a:	68 f3       	brcs	.-38     	; 0x2036 <__divsf3+0x8>

0000205c <__divsf3_pse>:
    205c:	99 23       	and	r25, r25
    205e:	b1 f3       	breq	.-20     	; 0x204c <__divsf3+0x1e>
    2060:	55 23       	and	r21, r21
    2062:	91 f3       	breq	.-28     	; 0x2048 <__divsf3+0x1a>
    2064:	95 1b       	sub	r25, r21
    2066:	55 0b       	sbc	r21, r21
    2068:	bb 27       	eor	r27, r27
    206a:	aa 27       	eor	r26, r26
    206c:	62 17       	cp	r22, r18
    206e:	73 07       	cpc	r23, r19
    2070:	84 07       	cpc	r24, r20
    2072:	38 f0       	brcs	.+14     	; 0x2082 <__divsf3_pse+0x26>
    2074:	9f 5f       	subi	r25, 0xFF	; 255
    2076:	5f 4f       	sbci	r21, 0xFF	; 255
    2078:	22 0f       	add	r18, r18
    207a:	33 1f       	adc	r19, r19
    207c:	44 1f       	adc	r20, r20
    207e:	aa 1f       	adc	r26, r26
    2080:	a9 f3       	breq	.-22     	; 0x206c <__divsf3_pse+0x10>
    2082:	35 d0       	rcall	.+106    	; 0x20ee <__divsf3_pse+0x92>
    2084:	0e 2e       	mov	r0, r30
    2086:	3a f0       	brmi	.+14     	; 0x2096 <__divsf3_pse+0x3a>
    2088:	e0 e8       	ldi	r30, 0x80	; 128
    208a:	32 d0       	rcall	.+100    	; 0x20f0 <__divsf3_pse+0x94>
    208c:	91 50       	subi	r25, 0x01	; 1
    208e:	50 40       	sbci	r21, 0x00	; 0
    2090:	e6 95       	lsr	r30
    2092:	00 1c       	adc	r0, r0
    2094:	ca f7       	brpl	.-14     	; 0x2088 <__divsf3_pse+0x2c>
    2096:	2b d0       	rcall	.+86     	; 0x20ee <__divsf3_pse+0x92>
    2098:	fe 2f       	mov	r31, r30
    209a:	29 d0       	rcall	.+82     	; 0x20ee <__divsf3_pse+0x92>
    209c:	66 0f       	add	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	bb 1f       	adc	r27, r27
    20a4:	26 17       	cp	r18, r22
    20a6:	37 07       	cpc	r19, r23
    20a8:	48 07       	cpc	r20, r24
    20aa:	ab 07       	cpc	r26, r27
    20ac:	b0 e8       	ldi	r27, 0x80	; 128
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <__divsf3_pse+0x56>
    20b0:	bb 0b       	sbc	r27, r27
    20b2:	80 2d       	mov	r24, r0
    20b4:	bf 01       	movw	r22, r30
    20b6:	ff 27       	eor	r31, r31
    20b8:	93 58       	subi	r25, 0x83	; 131
    20ba:	5f 4f       	sbci	r21, 0xFF	; 255
    20bc:	3a f0       	brmi	.+14     	; 0x20cc <__divsf3_pse+0x70>
    20be:	9e 3f       	cpi	r25, 0xFE	; 254
    20c0:	51 05       	cpc	r21, r1
    20c2:	78 f0       	brcs	.+30     	; 0x20e2 <__divsf3_pse+0x86>
    20c4:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__fp_inf>
    20c8:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__fp_szero>
    20cc:	5f 3f       	cpi	r21, 0xFF	; 255
    20ce:	e4 f3       	brlt	.-8      	; 0x20c8 <__divsf3_pse+0x6c>
    20d0:	98 3e       	cpi	r25, 0xE8	; 232
    20d2:	d4 f3       	brlt	.-12     	; 0x20c8 <__divsf3_pse+0x6c>
    20d4:	86 95       	lsr	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	b7 95       	ror	r27
    20dc:	f7 95       	ror	r31
    20de:	9f 5f       	subi	r25, 0xFF	; 255
    20e0:	c9 f7       	brne	.-14     	; 0x20d4 <__divsf3_pse+0x78>
    20e2:	88 0f       	add	r24, r24
    20e4:	91 1d       	adc	r25, r1
    20e6:	96 95       	lsr	r25
    20e8:	87 95       	ror	r24
    20ea:	97 f9       	bld	r25, 7
    20ec:	08 95       	ret
    20ee:	e1 e0       	ldi	r30, 0x01	; 1
    20f0:	66 0f       	add	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	bb 1f       	adc	r27, r27
    20f8:	62 17       	cp	r22, r18
    20fa:	73 07       	cpc	r23, r19
    20fc:	84 07       	cpc	r24, r20
    20fe:	ba 07       	cpc	r27, r26
    2100:	20 f0       	brcs	.+8      	; 0x210a <__divsf3_pse+0xae>
    2102:	62 1b       	sub	r22, r18
    2104:	73 0b       	sbc	r23, r19
    2106:	84 0b       	sbc	r24, r20
    2108:	ba 0b       	sbc	r27, r26
    210a:	ee 1f       	adc	r30, r30
    210c:	88 f7       	brcc	.-30     	; 0x20f0 <__divsf3_pse+0x94>
    210e:	e0 95       	com	r30
    2110:	08 95       	ret

00002112 <__fixunssfsi>:
    2112:	0e 94 49 11 	call	0x2292	; 0x2292 <__fp_splitA>
    2116:	88 f0       	brcs	.+34     	; 0x213a <__fixunssfsi+0x28>
    2118:	9f 57       	subi	r25, 0x7F	; 127
    211a:	98 f0       	brcs	.+38     	; 0x2142 <__fixunssfsi+0x30>
    211c:	b9 2f       	mov	r27, r25
    211e:	99 27       	eor	r25, r25
    2120:	b7 51       	subi	r27, 0x17	; 23
    2122:	b0 f0       	brcs	.+44     	; 0x2150 <__fixunssfsi+0x3e>
    2124:	e1 f0       	breq	.+56     	; 0x215e <__fixunssfsi+0x4c>
    2126:	66 0f       	add	r22, r22
    2128:	77 1f       	adc	r23, r23
    212a:	88 1f       	adc	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	1a f0       	brmi	.+6      	; 0x2136 <__fixunssfsi+0x24>
    2130:	ba 95       	dec	r27
    2132:	c9 f7       	brne	.-14     	; 0x2126 <__fixunssfsi+0x14>
    2134:	14 c0       	rjmp	.+40     	; 0x215e <__fixunssfsi+0x4c>
    2136:	b1 30       	cpi	r27, 0x01	; 1
    2138:	91 f0       	breq	.+36     	; 0x215e <__fixunssfsi+0x4c>
    213a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__fp_zero>
    213e:	b1 e0       	ldi	r27, 0x01	; 1
    2140:	08 95       	ret
    2142:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__fp_zero>
    2146:	67 2f       	mov	r22, r23
    2148:	78 2f       	mov	r23, r24
    214a:	88 27       	eor	r24, r24
    214c:	b8 5f       	subi	r27, 0xF8	; 248
    214e:	39 f0       	breq	.+14     	; 0x215e <__fixunssfsi+0x4c>
    2150:	b9 3f       	cpi	r27, 0xF9	; 249
    2152:	cc f3       	brlt	.-14     	; 0x2146 <__fixunssfsi+0x34>
    2154:	86 95       	lsr	r24
    2156:	77 95       	ror	r23
    2158:	67 95       	ror	r22
    215a:	b3 95       	inc	r27
    215c:	d9 f7       	brne	.-10     	; 0x2154 <__fixunssfsi+0x42>
    215e:	3e f4       	brtc	.+14     	; 0x216e <__fixunssfsi+0x5c>
    2160:	90 95       	com	r25
    2162:	80 95       	com	r24
    2164:	70 95       	com	r23
    2166:	61 95       	neg	r22
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	8f 4f       	sbci	r24, 0xFF	; 255
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	08 95       	ret

00002170 <__floatunsisf>:
    2170:	e8 94       	clt
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <__floatsisf+0x12>

00002174 <__floatsisf>:
    2174:	97 fb       	bst	r25, 7
    2176:	3e f4       	brtc	.+14     	; 0x2186 <__floatsisf+0x12>
    2178:	90 95       	com	r25
    217a:	80 95       	com	r24
    217c:	70 95       	com	r23
    217e:	61 95       	neg	r22
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	8f 4f       	sbci	r24, 0xFF	; 255
    2184:	9f 4f       	sbci	r25, 0xFF	; 255
    2186:	99 23       	and	r25, r25
    2188:	a9 f0       	breq	.+42     	; 0x21b4 <__floatsisf+0x40>
    218a:	f9 2f       	mov	r31, r25
    218c:	96 e9       	ldi	r25, 0x96	; 150
    218e:	bb 27       	eor	r27, r27
    2190:	93 95       	inc	r25
    2192:	f6 95       	lsr	r31
    2194:	87 95       	ror	r24
    2196:	77 95       	ror	r23
    2198:	67 95       	ror	r22
    219a:	b7 95       	ror	r27
    219c:	f1 11       	cpse	r31, r1
    219e:	f8 cf       	rjmp	.-16     	; 0x2190 <__floatsisf+0x1c>
    21a0:	fa f4       	brpl	.+62     	; 0x21e0 <__floatsisf+0x6c>
    21a2:	bb 0f       	add	r27, r27
    21a4:	11 f4       	brne	.+4      	; 0x21aa <__floatsisf+0x36>
    21a6:	60 ff       	sbrs	r22, 0
    21a8:	1b c0       	rjmp	.+54     	; 0x21e0 <__floatsisf+0x6c>
    21aa:	6f 5f       	subi	r22, 0xFF	; 255
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	8f 4f       	sbci	r24, 0xFF	; 255
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	16 c0       	rjmp	.+44     	; 0x21e0 <__floatsisf+0x6c>
    21b4:	88 23       	and	r24, r24
    21b6:	11 f0       	breq	.+4      	; 0x21bc <__floatsisf+0x48>
    21b8:	96 e9       	ldi	r25, 0x96	; 150
    21ba:	11 c0       	rjmp	.+34     	; 0x21de <__floatsisf+0x6a>
    21bc:	77 23       	and	r23, r23
    21be:	21 f0       	breq	.+8      	; 0x21c8 <__floatsisf+0x54>
    21c0:	9e e8       	ldi	r25, 0x8E	; 142
    21c2:	87 2f       	mov	r24, r23
    21c4:	76 2f       	mov	r23, r22
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <__floatsisf+0x5e>
    21c8:	66 23       	and	r22, r22
    21ca:	71 f0       	breq	.+28     	; 0x21e8 <__floatsisf+0x74>
    21cc:	96 e8       	ldi	r25, 0x86	; 134
    21ce:	86 2f       	mov	r24, r22
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	2a f0       	brmi	.+10     	; 0x21e0 <__floatsisf+0x6c>
    21d6:	9a 95       	dec	r25
    21d8:	66 0f       	add	r22, r22
    21da:	77 1f       	adc	r23, r23
    21dc:	88 1f       	adc	r24, r24
    21de:	da f7       	brpl	.-10     	; 0x21d6 <__floatsisf+0x62>
    21e0:	88 0f       	add	r24, r24
    21e2:	96 95       	lsr	r25
    21e4:	87 95       	ror	r24
    21e6:	97 f9       	bld	r25, 7
    21e8:	08 95       	ret

000021ea <__fp_cmp>:
    21ea:	99 0f       	add	r25, r25
    21ec:	00 08       	sbc	r0, r0
    21ee:	55 0f       	add	r21, r21
    21f0:	aa 0b       	sbc	r26, r26
    21f2:	e0 e8       	ldi	r30, 0x80	; 128
    21f4:	fe ef       	ldi	r31, 0xFE	; 254
    21f6:	16 16       	cp	r1, r22
    21f8:	17 06       	cpc	r1, r23
    21fa:	e8 07       	cpc	r30, r24
    21fc:	f9 07       	cpc	r31, r25
    21fe:	c0 f0       	brcs	.+48     	; 0x2230 <__fp_cmp+0x46>
    2200:	12 16       	cp	r1, r18
    2202:	13 06       	cpc	r1, r19
    2204:	e4 07       	cpc	r30, r20
    2206:	f5 07       	cpc	r31, r21
    2208:	98 f0       	brcs	.+38     	; 0x2230 <__fp_cmp+0x46>
    220a:	62 1b       	sub	r22, r18
    220c:	73 0b       	sbc	r23, r19
    220e:	84 0b       	sbc	r24, r20
    2210:	95 0b       	sbc	r25, r21
    2212:	39 f4       	brne	.+14     	; 0x2222 <__fp_cmp+0x38>
    2214:	0a 26       	eor	r0, r26
    2216:	61 f0       	breq	.+24     	; 0x2230 <__fp_cmp+0x46>
    2218:	23 2b       	or	r18, r19
    221a:	24 2b       	or	r18, r20
    221c:	25 2b       	or	r18, r21
    221e:	21 f4       	brne	.+8      	; 0x2228 <__fp_cmp+0x3e>
    2220:	08 95       	ret
    2222:	0a 26       	eor	r0, r26
    2224:	09 f4       	brne	.+2      	; 0x2228 <__fp_cmp+0x3e>
    2226:	a1 40       	sbci	r26, 0x01	; 1
    2228:	a6 95       	lsr	r26
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	81 1d       	adc	r24, r1
    222e:	81 1d       	adc	r24, r1
    2230:	08 95       	ret

00002232 <__fp_inf>:
    2232:	97 f9       	bld	r25, 7
    2234:	9f 67       	ori	r25, 0x7F	; 127
    2236:	80 e8       	ldi	r24, 0x80	; 128
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	08 95       	ret

0000223e <__fp_nan>:
    223e:	9f ef       	ldi	r25, 0xFF	; 255
    2240:	80 ec       	ldi	r24, 0xC0	; 192
    2242:	08 95       	ret

00002244 <__fp_pscA>:
    2244:	00 24       	eor	r0, r0
    2246:	0a 94       	dec	r0
    2248:	16 16       	cp	r1, r22
    224a:	17 06       	cpc	r1, r23
    224c:	18 06       	cpc	r1, r24
    224e:	09 06       	cpc	r0, r25
    2250:	08 95       	ret

00002252 <__fp_pscB>:
    2252:	00 24       	eor	r0, r0
    2254:	0a 94       	dec	r0
    2256:	12 16       	cp	r1, r18
    2258:	13 06       	cpc	r1, r19
    225a:	14 06       	cpc	r1, r20
    225c:	05 06       	cpc	r0, r21
    225e:	08 95       	ret

00002260 <__fp_round>:
    2260:	09 2e       	mov	r0, r25
    2262:	03 94       	inc	r0
    2264:	00 0c       	add	r0, r0
    2266:	11 f4       	brne	.+4      	; 0x226c <__fp_round+0xc>
    2268:	88 23       	and	r24, r24
    226a:	52 f0       	brmi	.+20     	; 0x2280 <__fp_round+0x20>
    226c:	bb 0f       	add	r27, r27
    226e:	40 f4       	brcc	.+16     	; 0x2280 <__fp_round+0x20>
    2270:	bf 2b       	or	r27, r31
    2272:	11 f4       	brne	.+4      	; 0x2278 <__fp_round+0x18>
    2274:	60 ff       	sbrs	r22, 0
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <__fp_round+0x20>
    2278:	6f 5f       	subi	r22, 0xFF	; 255
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	8f 4f       	sbci	r24, 0xFF	; 255
    227e:	9f 4f       	sbci	r25, 0xFF	; 255
    2280:	08 95       	ret

00002282 <__fp_split3>:
    2282:	57 fd       	sbrc	r21, 7
    2284:	90 58       	subi	r25, 0x80	; 128
    2286:	44 0f       	add	r20, r20
    2288:	55 1f       	adc	r21, r21
    228a:	59 f0       	breq	.+22     	; 0x22a2 <__fp_splitA+0x10>
    228c:	5f 3f       	cpi	r21, 0xFF	; 255
    228e:	71 f0       	breq	.+28     	; 0x22ac <__fp_splitA+0x1a>
    2290:	47 95       	ror	r20

00002292 <__fp_splitA>:
    2292:	88 0f       	add	r24, r24
    2294:	97 fb       	bst	r25, 7
    2296:	99 1f       	adc	r25, r25
    2298:	61 f0       	breq	.+24     	; 0x22b2 <__fp_splitA+0x20>
    229a:	9f 3f       	cpi	r25, 0xFF	; 255
    229c:	79 f0       	breq	.+30     	; 0x22bc <__fp_splitA+0x2a>
    229e:	87 95       	ror	r24
    22a0:	08 95       	ret
    22a2:	12 16       	cp	r1, r18
    22a4:	13 06       	cpc	r1, r19
    22a6:	14 06       	cpc	r1, r20
    22a8:	55 1f       	adc	r21, r21
    22aa:	f2 cf       	rjmp	.-28     	; 0x2290 <__fp_split3+0xe>
    22ac:	46 95       	lsr	r20
    22ae:	f1 df       	rcall	.-30     	; 0x2292 <__fp_splitA>
    22b0:	08 c0       	rjmp	.+16     	; 0x22c2 <__fp_splitA+0x30>
    22b2:	16 16       	cp	r1, r22
    22b4:	17 06       	cpc	r1, r23
    22b6:	18 06       	cpc	r1, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	f1 cf       	rjmp	.-30     	; 0x229e <__fp_splitA+0xc>
    22bc:	86 95       	lsr	r24
    22be:	71 05       	cpc	r23, r1
    22c0:	61 05       	cpc	r22, r1
    22c2:	08 94       	sec
    22c4:	08 95       	ret

000022c6 <__fp_zero>:
    22c6:	e8 94       	clt

000022c8 <__fp_szero>:
    22c8:	bb 27       	eor	r27, r27
    22ca:	66 27       	eor	r22, r22
    22cc:	77 27       	eor	r23, r23
    22ce:	cb 01       	movw	r24, r22
    22d0:	97 f9       	bld	r25, 7
    22d2:	08 95       	ret

000022d4 <__gesf2>:
    22d4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__fp_cmp>
    22d8:	08 f4       	brcc	.+2      	; 0x22dc <__gesf2+0x8>
    22da:	8f ef       	ldi	r24, 0xFF	; 255
    22dc:	08 95       	ret

000022de <__mulsf3>:
    22de:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3x>
    22e2:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__fp_round>
    22e6:	0e 94 22 11 	call	0x2244	; 0x2244 <__fp_pscA>
    22ea:	38 f0       	brcs	.+14     	; 0x22fa <__mulsf3+0x1c>
    22ec:	0e 94 29 11 	call	0x2252	; 0x2252 <__fp_pscB>
    22f0:	20 f0       	brcs	.+8      	; 0x22fa <__mulsf3+0x1c>
    22f2:	95 23       	and	r25, r21
    22f4:	11 f0       	breq	.+4      	; 0x22fa <__mulsf3+0x1c>
    22f6:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__fp_inf>
    22fa:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__fp_nan>
    22fe:	11 24       	eor	r1, r1
    2300:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__fp_szero>

00002304 <__mulsf3x>:
    2304:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_split3>
    2308:	70 f3       	brcs	.-36     	; 0x22e6 <__mulsf3+0x8>

0000230a <__mulsf3_pse>:
    230a:	95 9f       	mul	r25, r21
    230c:	c1 f3       	breq	.-16     	; 0x22fe <__mulsf3+0x20>
    230e:	95 0f       	add	r25, r21
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	55 1f       	adc	r21, r21
    2314:	62 9f       	mul	r22, r18
    2316:	f0 01       	movw	r30, r0
    2318:	72 9f       	mul	r23, r18
    231a:	bb 27       	eor	r27, r27
    231c:	f0 0d       	add	r31, r0
    231e:	b1 1d       	adc	r27, r1
    2320:	63 9f       	mul	r22, r19
    2322:	aa 27       	eor	r26, r26
    2324:	f0 0d       	add	r31, r0
    2326:	b1 1d       	adc	r27, r1
    2328:	aa 1f       	adc	r26, r26
    232a:	64 9f       	mul	r22, r20
    232c:	66 27       	eor	r22, r22
    232e:	b0 0d       	add	r27, r0
    2330:	a1 1d       	adc	r26, r1
    2332:	66 1f       	adc	r22, r22
    2334:	82 9f       	mul	r24, r18
    2336:	22 27       	eor	r18, r18
    2338:	b0 0d       	add	r27, r0
    233a:	a1 1d       	adc	r26, r1
    233c:	62 1f       	adc	r22, r18
    233e:	73 9f       	mul	r23, r19
    2340:	b0 0d       	add	r27, r0
    2342:	a1 1d       	adc	r26, r1
    2344:	62 1f       	adc	r22, r18
    2346:	83 9f       	mul	r24, r19
    2348:	a0 0d       	add	r26, r0
    234a:	61 1d       	adc	r22, r1
    234c:	22 1f       	adc	r18, r18
    234e:	74 9f       	mul	r23, r20
    2350:	33 27       	eor	r19, r19
    2352:	a0 0d       	add	r26, r0
    2354:	61 1d       	adc	r22, r1
    2356:	23 1f       	adc	r18, r19
    2358:	84 9f       	mul	r24, r20
    235a:	60 0d       	add	r22, r0
    235c:	21 1d       	adc	r18, r1
    235e:	82 2f       	mov	r24, r18
    2360:	76 2f       	mov	r23, r22
    2362:	6a 2f       	mov	r22, r26
    2364:	11 24       	eor	r1, r1
    2366:	9f 57       	subi	r25, 0x7F	; 127
    2368:	50 40       	sbci	r21, 0x00	; 0
    236a:	9a f0       	brmi	.+38     	; 0x2392 <__mulsf3_pse+0x88>
    236c:	f1 f0       	breq	.+60     	; 0x23aa <__mulsf3_pse+0xa0>
    236e:	88 23       	and	r24, r24
    2370:	4a f0       	brmi	.+18     	; 0x2384 <__mulsf3_pse+0x7a>
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	bb 1f       	adc	r27, r27
    2378:	66 1f       	adc	r22, r22
    237a:	77 1f       	adc	r23, r23
    237c:	88 1f       	adc	r24, r24
    237e:	91 50       	subi	r25, 0x01	; 1
    2380:	50 40       	sbci	r21, 0x00	; 0
    2382:	a9 f7       	brne	.-22     	; 0x236e <__mulsf3_pse+0x64>
    2384:	9e 3f       	cpi	r25, 0xFE	; 254
    2386:	51 05       	cpc	r21, r1
    2388:	80 f0       	brcs	.+32     	; 0x23aa <__mulsf3_pse+0xa0>
    238a:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__fp_inf>
    238e:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__fp_szero>
    2392:	5f 3f       	cpi	r21, 0xFF	; 255
    2394:	e4 f3       	brlt	.-8      	; 0x238e <__mulsf3_pse+0x84>
    2396:	98 3e       	cpi	r25, 0xE8	; 232
    2398:	d4 f3       	brlt	.-12     	; 0x238e <__mulsf3_pse+0x84>
    239a:	86 95       	lsr	r24
    239c:	77 95       	ror	r23
    239e:	67 95       	ror	r22
    23a0:	b7 95       	ror	r27
    23a2:	f7 95       	ror	r31
    23a4:	e7 95       	ror	r30
    23a6:	9f 5f       	subi	r25, 0xFF	; 255
    23a8:	c1 f7       	brne	.-16     	; 0x239a <__mulsf3_pse+0x90>
    23aa:	fe 2b       	or	r31, r30
    23ac:	88 0f       	add	r24, r24
    23ae:	91 1d       	adc	r25, r1
    23b0:	96 95       	lsr	r25
    23b2:	87 95       	ror	r24
    23b4:	97 f9       	bld	r25, 7
    23b6:	08 95       	ret

000023b8 <sin>:
    23b8:	9f 93       	push	r25
    23ba:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__fp_rempio2>
    23be:	0f 90       	pop	r0
    23c0:	07 fc       	sbrc	r0, 7
    23c2:	ee 5f       	subi	r30, 0xFE	; 254
    23c4:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__fp_sinus>
    23c8:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__fp_nan>

000023cc <__fp_rempio2>:
    23cc:	0e 94 49 11 	call	0x2292	; 0x2292 <__fp_splitA>
    23d0:	d8 f3       	brcs	.-10     	; 0x23c8 <sin+0x10>
    23d2:	e8 94       	clt
    23d4:	e0 e0       	ldi	r30, 0x00	; 0
    23d6:	bb 27       	eor	r27, r27
    23d8:	9f 57       	subi	r25, 0x7F	; 127
    23da:	f0 f0       	brcs	.+60     	; 0x2418 <__fp_rempio2+0x4c>
    23dc:	2a ed       	ldi	r18, 0xDA	; 218
    23de:	3f e0       	ldi	r19, 0x0F	; 15
    23e0:	49 ec       	ldi	r20, 0xC9	; 201
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <__fp_rempio2+0x24>
    23e4:	ee 0f       	add	r30, r30
    23e6:	bb 0f       	add	r27, r27
    23e8:	66 1f       	adc	r22, r22
    23ea:	77 1f       	adc	r23, r23
    23ec:	88 1f       	adc	r24, r24
    23ee:	28 f0       	brcs	.+10     	; 0x23fa <__fp_rempio2+0x2e>
    23f0:	b2 3a       	cpi	r27, 0xA2	; 162
    23f2:	62 07       	cpc	r22, r18
    23f4:	73 07       	cpc	r23, r19
    23f6:	84 07       	cpc	r24, r20
    23f8:	28 f0       	brcs	.+10     	; 0x2404 <__fp_rempio2+0x38>
    23fa:	b2 5a       	subi	r27, 0xA2	; 162
    23fc:	62 0b       	sbc	r22, r18
    23fe:	73 0b       	sbc	r23, r19
    2400:	84 0b       	sbc	r24, r20
    2402:	e3 95       	inc	r30
    2404:	9a 95       	dec	r25
    2406:	72 f7       	brpl	.-36     	; 0x23e4 <__fp_rempio2+0x18>
    2408:	80 38       	cpi	r24, 0x80	; 128
    240a:	30 f4       	brcc	.+12     	; 0x2418 <__fp_rempio2+0x4c>
    240c:	9a 95       	dec	r25
    240e:	bb 0f       	add	r27, r27
    2410:	66 1f       	adc	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	d2 f7       	brpl	.-12     	; 0x240c <__fp_rempio2+0x40>
    2418:	90 48       	sbci	r25, 0x80	; 128
    241a:	0c 94 25 12 	jmp	0x244a	; 0x244a <__fp_mpack_finite>

0000241e <__fp_sinus>:
    241e:	ef 93       	push	r30
    2420:	e0 ff       	sbrs	r30, 0
    2422:	07 c0       	rjmp	.+14     	; 0x2432 <__fp_sinus+0x14>
    2424:	a2 ea       	ldi	r26, 0xA2	; 162
    2426:	2a ed       	ldi	r18, 0xDA	; 218
    2428:	3f e0       	ldi	r19, 0x0F	; 15
    242a:	49 ec       	ldi	r20, 0xC9	; 201
    242c:	5f eb       	ldi	r21, 0xBF	; 191
    242e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__addsf3x>
    2432:	0e 94 30 11 	call	0x2260	; 0x2260 <__fp_round>
    2436:	0f 90       	pop	r0
    2438:	03 94       	inc	r0
    243a:	01 fc       	sbrc	r0, 1
    243c:	90 58       	subi	r25, 0x80	; 128
    243e:	e6 e7       	ldi	r30, 0x76	; 118
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__fp_powsodd>

00002446 <__fp_mpack>:
    2446:	9f 3f       	cpi	r25, 0xFF	; 255
    2448:	31 f0       	breq	.+12     	; 0x2456 <__fp_mpack_finite+0xc>

0000244a <__fp_mpack_finite>:
    244a:	91 50       	subi	r25, 0x01	; 1
    244c:	20 f4       	brcc	.+8      	; 0x2456 <__fp_mpack_finite+0xc>
    244e:	87 95       	ror	r24
    2450:	77 95       	ror	r23
    2452:	67 95       	ror	r22
    2454:	b7 95       	ror	r27
    2456:	88 0f       	add	r24, r24
    2458:	91 1d       	adc	r25, r1
    245a:	96 95       	lsr	r25
    245c:	87 95       	ror	r24
    245e:	97 f9       	bld	r25, 7
    2460:	08 95       	ret

00002462 <__fp_powsodd>:
    2462:	9f 93       	push	r25
    2464:	8f 93       	push	r24
    2466:	7f 93       	push	r23
    2468:	6f 93       	push	r22
    246a:	ff 93       	push	r31
    246c:	ef 93       	push	r30
    246e:	9b 01       	movw	r18, r22
    2470:	ac 01       	movw	r20, r24
    2472:	0e 94 6f 11 	call	0x22de	; 0x22de <__mulsf3>
    2476:	ef 91       	pop	r30
    2478:	ff 91       	pop	r31
    247a:	0e 94 45 12 	call	0x248a	; 0x248a <__fp_powser>
    247e:	2f 91       	pop	r18
    2480:	3f 91       	pop	r19
    2482:	4f 91       	pop	r20
    2484:	5f 91       	pop	r21
    2486:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__mulsf3>

0000248a <__fp_powser>:
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	1f 93       	push	r17
    2490:	0f 93       	push	r16
    2492:	ff 92       	push	r15
    2494:	ef 92       	push	r14
    2496:	df 92       	push	r13
    2498:	7b 01       	movw	r14, r22
    249a:	8c 01       	movw	r16, r24
    249c:	68 94       	set
    249e:	06 c0       	rjmp	.+12     	; 0x24ac <__fp_powser+0x22>
    24a0:	da 2e       	mov	r13, r26
    24a2:	ef 01       	movw	r28, r30
    24a4:	0e 94 82 11 	call	0x2304	; 0x2304 <__mulsf3x>
    24a8:	fe 01       	movw	r30, r28
    24aa:	e8 94       	clt
    24ac:	a5 91       	lpm	r26, Z+
    24ae:	25 91       	lpm	r18, Z+
    24b0:	35 91       	lpm	r19, Z+
    24b2:	45 91       	lpm	r20, Z+
    24b4:	55 91       	lpm	r21, Z+
    24b6:	a6 f3       	brts	.-24     	; 0x24a0 <__fp_powser+0x16>
    24b8:	ef 01       	movw	r28, r30
    24ba:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__addsf3x>
    24be:	fe 01       	movw	r30, r28
    24c0:	97 01       	movw	r18, r14
    24c2:	a8 01       	movw	r20, r16
    24c4:	da 94       	dec	r13
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <__fp_powser+0x18>
    24c8:	df 90       	pop	r13
    24ca:	ef 90       	pop	r14
    24cc:	ff 90       	pop	r15
    24ce:	0f 91       	pop	r16
    24d0:	1f 91       	pop	r17
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <__divmodhi4>:
    24d8:	97 fb       	bst	r25, 7
    24da:	07 2e       	mov	r0, r23
    24dc:	16 f4       	brtc	.+4      	; 0x24e2 <__divmodhi4+0xa>
    24de:	00 94       	com	r0
    24e0:	07 d0       	rcall	.+14     	; 0x24f0 <__divmodhi4_neg1>
    24e2:	77 fd       	sbrc	r23, 7
    24e4:	09 d0       	rcall	.+18     	; 0x24f8 <__divmodhi4_neg2>
    24e6:	0e 94 a5 12 	call	0x254a	; 0x254a <__udivmodhi4>
    24ea:	07 fc       	sbrc	r0, 7
    24ec:	05 d0       	rcall	.+10     	; 0x24f8 <__divmodhi4_neg2>
    24ee:	3e f4       	brtc	.+14     	; 0x24fe <__divmodhi4_exit>

000024f0 <__divmodhi4_neg1>:
    24f0:	90 95       	com	r25
    24f2:	81 95       	neg	r24
    24f4:	9f 4f       	sbci	r25, 0xFF	; 255
    24f6:	08 95       	ret

000024f8 <__divmodhi4_neg2>:
    24f8:	70 95       	com	r23
    24fa:	61 95       	neg	r22
    24fc:	7f 4f       	sbci	r23, 0xFF	; 255

000024fe <__divmodhi4_exit>:
    24fe:	08 95       	ret

00002500 <__divmodsi4>:
    2500:	05 2e       	mov	r0, r21
    2502:	97 fb       	bst	r25, 7
    2504:	1e f4       	brtc	.+6      	; 0x250c <__divmodsi4+0xc>
    2506:	00 94       	com	r0
    2508:	0e 94 97 12 	call	0x252e	; 0x252e <__negsi2>
    250c:	57 fd       	sbrc	r21, 7
    250e:	07 d0       	rcall	.+14     	; 0x251e <__divmodsi4_neg2>
    2510:	0e 94 b9 12 	call	0x2572	; 0x2572 <__udivmodsi4>
    2514:	07 fc       	sbrc	r0, 7
    2516:	03 d0       	rcall	.+6      	; 0x251e <__divmodsi4_neg2>
    2518:	4e f4       	brtc	.+18     	; 0x252c <__divmodsi4_exit>
    251a:	0c 94 97 12 	jmp	0x252e	; 0x252e <__negsi2>

0000251e <__divmodsi4_neg2>:
    251e:	50 95       	com	r21
    2520:	40 95       	com	r20
    2522:	30 95       	com	r19
    2524:	21 95       	neg	r18
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
    2528:	4f 4f       	sbci	r20, 0xFF	; 255
    252a:	5f 4f       	sbci	r21, 0xFF	; 255

0000252c <__divmodsi4_exit>:
    252c:	08 95       	ret

0000252e <__negsi2>:
    252e:	90 95       	com	r25
    2530:	80 95       	com	r24
    2532:	70 95       	com	r23
    2534:	61 95       	neg	r22
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	8f 4f       	sbci	r24, 0xFF	; 255
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	08 95       	ret

0000253e <__tablejump2__>:
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	05 90       	lpm	r0, Z+
    2544:	f4 91       	lpm	r31, Z
    2546:	e0 2d       	mov	r30, r0
    2548:	09 94       	ijmp

0000254a <__udivmodhi4>:
    254a:	aa 1b       	sub	r26, r26
    254c:	bb 1b       	sub	r27, r27
    254e:	51 e1       	ldi	r21, 0x11	; 17
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <__udivmodhi4_ep>

00002552 <__udivmodhi4_loop>:
    2552:	aa 1f       	adc	r26, r26
    2554:	bb 1f       	adc	r27, r27
    2556:	a6 17       	cp	r26, r22
    2558:	b7 07       	cpc	r27, r23
    255a:	10 f0       	brcs	.+4      	; 0x2560 <__udivmodhi4_ep>
    255c:	a6 1b       	sub	r26, r22
    255e:	b7 0b       	sbc	r27, r23

00002560 <__udivmodhi4_ep>:
    2560:	88 1f       	adc	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	5a 95       	dec	r21
    2566:	a9 f7       	brne	.-22     	; 0x2552 <__udivmodhi4_loop>
    2568:	80 95       	com	r24
    256a:	90 95       	com	r25
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	08 95       	ret

00002572 <__udivmodsi4>:
    2572:	a1 e2       	ldi	r26, 0x21	; 33
    2574:	1a 2e       	mov	r1, r26
    2576:	aa 1b       	sub	r26, r26
    2578:	bb 1b       	sub	r27, r27
    257a:	fd 01       	movw	r30, r26
    257c:	0d c0       	rjmp	.+26     	; 0x2598 <__udivmodsi4_ep>

0000257e <__udivmodsi4_loop>:
    257e:	aa 1f       	adc	r26, r26
    2580:	bb 1f       	adc	r27, r27
    2582:	ee 1f       	adc	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	a2 17       	cp	r26, r18
    2588:	b3 07       	cpc	r27, r19
    258a:	e4 07       	cpc	r30, r20
    258c:	f5 07       	cpc	r31, r21
    258e:	20 f0       	brcs	.+8      	; 0x2598 <__udivmodsi4_ep>
    2590:	a2 1b       	sub	r26, r18
    2592:	b3 0b       	sbc	r27, r19
    2594:	e4 0b       	sbc	r30, r20
    2596:	f5 0b       	sbc	r31, r21

00002598 <__udivmodsi4_ep>:
    2598:	66 1f       	adc	r22, r22
    259a:	77 1f       	adc	r23, r23
    259c:	88 1f       	adc	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	1a 94       	dec	r1
    25a2:	69 f7       	brne	.-38     	; 0x257e <__udivmodsi4_loop>
    25a4:	60 95       	com	r22
    25a6:	70 95       	com	r23
    25a8:	80 95       	com	r24
    25aa:	90 95       	com	r25
    25ac:	9b 01       	movw	r18, r22
    25ae:	ac 01       	movw	r20, r24
    25b0:	bd 01       	movw	r22, r26
    25b2:	cf 01       	movw	r24, r30
    25b4:	08 95       	ret

000025b6 <_exit>:
    25b6:	f8 94       	cli

000025b8 <__stop_program>:
    25b8:	ff cf       	rjmp	.-2      	; 0x25b8 <__stop_program>
